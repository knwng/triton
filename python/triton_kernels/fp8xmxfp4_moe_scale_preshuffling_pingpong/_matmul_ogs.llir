; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_matmul_ogs_NNT_fp8e4nvxfp8e4nvxmxfp4_256x256x128x1_swiglu(ptr addrspace(1) inreg readnone captures(none) %0, ptr addrspace(1) inreg writeonly captures(none) %1, i32 inreg %2, i32 inreg %3, i32 inreg %4, ptr addrspace(1) inreg %5, i32 inreg %6, i32 inreg %7, ptr addrspace(1) inreg readonly captures(none) %8, i32 inreg %9, i32 inreg %10, ptr addrspace(1) inreg readonly captures(none) %11, i32 inreg %12, i32 inreg %13, ptr addrspace(1) inreg readonly captures(none) %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, ptr addrspace(1) inreg readonly captures(none) %19, ptr addrspace(1) inreg readonly captures(none) %20, ptr addrspace(1) inreg readonly captures(none) %21, ptr addrspace(1) inreg readonly captures(none) %22, ptr addrspace(1) inreg readonly captures(none) %23, i32 inreg %24, i32 inreg %25, float inreg %26, float inreg %27, ptr addrspace(1) inreg readnone captures(none) %28) local_unnamed_addr #1 !dbg !7 {
  %30 = sdiv i32 %17, 2, !dbg !8
  %31 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !9
  %32 = load <1 x i32>, ptr addrspace(1) %22, align 4, !dbg !10, !amdgpu.noclobber !6
  %33 = extractelement <1 x i32> %32, i64 0, !dbg !10
  %34 = sub i32 %24, %33, !dbg !11
  %35 = mul i32 %33, %25, !dbg !12
  %36 = icmp sgt i32 %34, 0, !dbg !13
  %37 = icmp sge i32 %31, %35, !dbg !14
  %38 = and i1 %36, %37, !dbg !15
  br i1 %38, label %common.ret, label %39, !dbg !15

common.ret:                                       ; preds = %29, %39, %._crit_edge89
  ret void, !dbg !16

39:                                               ; preds = %29
  %.frozen = freeze i32 %35, !dbg !17
  %40 = sdiv i32 %.frozen, 8, !dbg !17
  %41 = mul i32 %40, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %42 = sdiv i32 %31, 8, !dbg !22
  %43 = mul i32 %42, 8, !dbg !23
  %.decomposed997 = sub i32 %31, %43, !dbg !23
  %44 = mul nsw i32 %40, %.decomposed997, !dbg !24
  %45 = tail call i32 @llvm.smin.i32(i32 %.decomposed997, i32 %.decomposed), !dbg !25
  %46 = add nsw i32 %45, %42, !dbg !26
  %47 = add i32 %46, %44, !dbg !27
  %48 = srem i32 %47, %35, !dbg !28
  %49 = shl i32 %25, 2, !dbg !29
  %.frozen998 = freeze i32 %48, !dbg !31
  %.frozen999 = freeze i32 %49, !dbg !31
  %50 = sdiv i32 %.frozen998, %.frozen999, !dbg !31
  %51 = shl i32 %50, 2, !dbg !32
  %52 = sub i32 %33, %51, !dbg !33
  %53 = tail call i32 @llvm.smin.i32(i32 %52, i32 4), !dbg !34
  %54 = srem i32 %48, %53, !dbg !35
  %55 = add i32 %51, %54, !dbg !36
  %56 = sext i32 %55 to i64, !dbg !37
  %57 = getelementptr i32, ptr addrspace(1) %23, i64 %56, !dbg !37
  %58 = load <1 x i32>, ptr addrspace(1) %57, align 4, !dbg !38
  %59 = extractelement <1 x i32> %58, i64 0, !dbg !38
  %60 = icmp eq i32 %59, -1, !dbg !39
  br i1 %60, label %common.ret, label %61, !dbg !39

61:                                               ; preds = %39
  %62 = mul i32 %50, %.frozen999, !dbg !40
  %.decomposed1000 = sub i32 %.frozen998, %62, !dbg !40
  %63 = sdiv i32 %.decomposed1000, %53, !dbg !41
  %64 = and i32 %59, 65535, !dbg !42
  %65 = ashr i32 %59, 16, !dbg !43
  %66 = zext nneg i32 %64 to i64, !dbg !44
  %67 = getelementptr i32, ptr addrspace(1) %20, i64 %66, !dbg !44
  %68 = load <1 x i32>, ptr addrspace(1) %67, align 4, !dbg !45
  %69 = extractelement <1 x i32> %68, i64 0, !dbg !45
  %70 = getelementptr i32, ptr addrspace(1) %21, i64 %66, !dbg !46
  %71 = load <1 x i32>, ptr addrspace(1) %70, align 4, !dbg !47
  %72 = extractelement <1 x i32> %71, i64 0, !dbg !47
  %73 = sext i32 %65 to i64, !dbg !48
  %74 = sext i32 %72 to i64, !dbg !49
  %75 = sext i32 %63 to i64, !dbg !50
  %76 = shl nsw i64 %73, 8, !dbg !51
  %77 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !52
  %78 = and i32 %77, 63, !dbg !52
  %79 = and i32 %77, 8, !dbg !52
  %80 = and i32 %77, 16, !dbg !52
  %81 = icmp eq i32 %80, 0, !dbg !52
  %82 = lshr exact i32 %80, 3, !dbg !52
  %83 = and i32 %77, 32, !dbg !52
  %.not12 = icmp eq i32 %83, 0, !dbg !52
  %84 = lshr exact i32 %83, 3, !dbg !52
  %85 = and i32 %77, 64, !dbg !52
  %86 = lshr i32 %77, 3, !dbg !52
  %87 = and i32 %86, 11, !dbg !52
  %88 = or disjoint i32 %87, %84, !dbg !52
  %89 = and i32 %77, 128, !dbg !52
  %90 = lshr exact i32 %89, 3, !dbg !52
  %91 = and i32 %77, 256, !dbg !52
  %92 = lshr exact i32 %91, 3, !dbg !52
  %93 = or disjoint i32 %92, %90, !dbg !52
  %94 = or disjoint i32 %93, %88, !dbg !52
  %95 = or disjoint i32 %94, 64, !dbg !52
  %96 = or disjoint i32 %94, 128, !dbg !52
  %97 = or disjoint i32 %94, 192, !dbg !52
  %.lobit57 = lshr i32 %77, 2, !dbg !52
  %98 = and i32 %.lobit57, 3, !dbg !52
  %99 = lshr exact i32 %80, 2, !dbg !52
  %100 = lshr exact i32 %83, 2, !dbg !52
  %101 = lshr exact i32 %85, 2, !dbg !52
  %102 = lshr exact i32 %89, 2, !dbg !52
  %103 = or disjoint i32 %99, %98, !dbg !52
  %104 = or disjoint i32 %103, %100, !dbg !52
  %105 = or disjoint i32 %104, %101, !dbg !52
  %106 = or disjoint i32 %105, %102, !dbg !52
  %107 = lshr exact i32 %91, 2, !dbg !52
  %108 = xor i32 %106, %107, !dbg !52
  %109 = xor i32 %108, 128, !dbg !52
  %110 = lshr exact i32 %85, 1, !dbg !52
  %111 = lshr exact i32 %89, 1, !dbg !52
  %112 = or disjoint i32 %111, %110, !dbg !52
  %113 = or disjoint i32 %112, %100, !dbg !52
  %114 = or disjoint i32 %113, %99, !dbg !52
  %115 = or disjoint i32 %114, 16, !dbg !52
  %116 = or disjoint i32 %114, 128, !dbg !52
  %117 = or disjoint i32 %114, 144, !dbg !52
  %118 = zext nneg i32 %94 to i64, !dbg !53
  %119 = zext nneg i32 %95 to i64, !dbg !53
  %120 = zext nneg i32 %96 to i64, !dbg !53
  %121 = zext nneg i32 %97 to i64, !dbg !53
  %122 = zext nneg i32 %108 to i64, !dbg !53
  %123 = zext nneg i32 %109 to i64, !dbg !53
  %124 = zext nneg i32 %114 to i64, !dbg !53
  %125 = zext nneg i32 %115 to i64, !dbg !53
  %126 = zext nneg i32 %116 to i64, !dbg !53
  %127 = zext nneg i32 %117 to i64, !dbg !53
  %128 = or disjoint i64 %76, %118, !dbg !53
  %129 = or disjoint i64 %76, %119, !dbg !53
  %130 = or disjoint i64 %76, %120, !dbg !53
  %131 = or disjoint i64 %76, %121, !dbg !53
  %132 = sext i32 %69 to i64, !dbg !54
  %.lhs.trunc = trunc nsw i64 %128 to i32, !dbg !54
  %133 = srem i32 %.lhs.trunc, %69, !dbg !54
  %.sext = sext i32 %133 to i64, !dbg !54
  %.lhs.trunc40 = trunc nsw i64 %129 to i32, !dbg !54
  %134 = srem i32 %.lhs.trunc40, %69, !dbg !54
  %.sext42 = sext i32 %134 to i64, !dbg !54
  %.lhs.trunc43 = trunc nsw i64 %130 to i32, !dbg !54
  %135 = srem i32 %.lhs.trunc43, %69, !dbg !54
  %.sext45 = sext i32 %135 to i64, !dbg !54
  %.lhs.trunc46 = trunc nsw i64 %131 to i32, !dbg !54
  %136 = srem i32 %.lhs.trunc46, %69, !dbg !54
  %.sext48 = sext i32 %136 to i64, !dbg !54
  %137 = getelementptr i32, ptr addrspace(1) %19, i64 %74, !dbg !55
  %138 = shl nsw i64 %.sext, 2, !dbg !56
  %139 = getelementptr i8, ptr addrspace(1) %137, i64 %138, !dbg !56
  %140 = shl nsw i64 %.sext42, 2, !dbg !56
  %141 = getelementptr i8, ptr addrspace(1) %137, i64 %140, !dbg !56
  %142 = shl nsw i64 %.sext45, 2, !dbg !56
  %143 = getelementptr i8, ptr addrspace(1) %137, i64 %142, !dbg !56
  %144 = shl nsw i64 %.sext48, 2, !dbg !56
  %145 = getelementptr i8, ptr addrspace(1) %137, i64 %144, !dbg !56
  %146 = load <1 x i32>, ptr addrspace(1) %139, align 4, !dbg !56
  %147 = extractelement <1 x i32> %146, i64 0, !dbg !56
  %148 = load <1 x i32>, ptr addrspace(1) %141, align 4, !dbg !56
  %149 = extractelement <1 x i32> %148, i64 0, !dbg !56
  %150 = load <1 x i32>, ptr addrspace(1) %143, align 4, !dbg !56
  %151 = extractelement <1 x i32> %150, i64 0, !dbg !56
  %152 = load <1 x i32>, ptr addrspace(1) %145, align 4, !dbg !56
  %153 = extractelement <1 x i32> %152, i64 0, !dbg !56
  %154 = sdiv i32 %147, 4, !dbg !57
  %155 = sdiv i32 %149, 4, !dbg !57
  %156 = sdiv i32 %151, 4, !dbg !57
  %157 = sdiv i32 %153, 4, !dbg !57
  %158 = shl nuw nsw i32 %77, 4, !dbg !58
  %159 = and i32 %158, 112, !dbg !58
  %160 = or disjoint i32 %159, 8, !dbg !58
  %161 = shl nuw nsw i32 %77, 2, !dbg !58
  %162 = and i32 %161, 16, !dbg !58
  %163 = shl nuw nsw i32 %79, 2, !dbg !58
  %164 = and i32 %161, 92, !dbg !58
  %165 = or disjoint i32 %164, %163, !dbg !58
  %166 = shl nuw nsw i32 %77, 1, !dbg !58
  %167 = and i32 %166, 126, !dbg !58
  %168 = zext nneg i32 %159 to i64, !dbg !59
  %169 = zext nneg i32 %160 to i64, !dbg !59
  %170 = mul i32 %154, %7, !dbg !60
  %171 = mul i32 %155, %7, !dbg !60
  %172 = mul i32 %156, %7, !dbg !60
  %173 = mul i32 %157, %7, !dbg !60
  %174 = add i32 %170, %159, !dbg !61
  %175 = add i32 %171, %159, !dbg !61
  %176 = add i32 %172, %159, !dbg !61
  %177 = add i32 %173, %159, !dbg !61
  %178 = sext i32 %12 to i64, !dbg !62
  %179 = mul nsw i64 %66, %178, !dbg !62
  %180 = getelementptr i8, ptr addrspace(1) %11, i64 %179, !dbg !63
  %181 = shl nsw i64 %75, 3, !dbg !64
  %182 = lshr i32 %77, 5, !dbg !65
  %183 = and i32 %182, 7, !dbg !65
  %184 = lshr i32 %77, 6, !dbg !65
  %185 = and i32 %184, 7, !dbg !65
  %186 = zext nneg i32 %183 to i64, !dbg !66
  %187 = zext nneg i32 %185 to i64, !dbg !66
  %188 = or disjoint i64 %181, %186, !dbg !66
  %189 = or disjoint i64 %181, %187, !dbg !66
  %190 = sext i32 %17 to i64, !dbg !67
  %191 = srem i64 %188, %190, !dbg !67
  %192 = srem i64 %189, %190, !dbg !67
  %193 = trunc nsw i64 %191 to i32, !dbg !68
  %194 = mul i32 %13, %193, !dbg !68
  %195 = trunc nsw i64 %192 to i32, !dbg !68
  %196 = mul i32 %13, %195, !dbg !68
  %197 = add i32 %194, %165, !dbg !68
  %198 = add i32 %196, %167, !dbg !68
  %199 = shl nsw i64 %75, 8, !dbg !69
  %200 = add nsw i64 %199, %122, !dbg !70
  %201 = add nsw i64 %199, %123, !dbg !70
  %202 = or disjoint i64 %199, %124, !dbg !70
  %203 = add nsw i64 %199, %125, !dbg !70
  %204 = add nsw i64 %199, %126, !dbg !70
  %205 = add nsw i64 %199, %127, !dbg !70
  %206 = srem i64 %200, %190, !dbg !71
  %207 = srem i64 %201, %190, !dbg !71
  %208 = sext i32 %9 to i64, !dbg !72
  %209 = mul nsw i64 %66, %208, !dbg !72
  %210 = getelementptr i8, ptr addrspace(1) %8, i64 %209, !dbg !73
  %211 = trunc nsw i64 %206 to i32, !dbg !74
  %212 = mul i32 %10, %211, !dbg !74
  %213 = trunc nsw i64 %207 to i32, !dbg !74
  %214 = mul i32 %10, %213, !dbg !74
  %215 = sext i32 %18 to i64, !dbg !75
  %216 = icmp sgt i32 %18, 0, !dbg !75
  %217 = sext i32 %174 to i64, !dbg !76
  %218 = getelementptr i8, ptr addrspace(1) %5, i64 %217, !dbg !76
  %219 = sext i32 %175 to i64, !dbg !76
  %220 = getelementptr i8, ptr addrspace(1) %5, i64 %219, !dbg !76
  %221 = sext i32 %176 to i64, !dbg !76
  %222 = getelementptr i8, ptr addrspace(1) %5, i64 %221, !dbg !76
  %223 = sext i32 %177 to i64, !dbg !76
  %224 = getelementptr i8, ptr addrspace(1) %5, i64 %223, !dbg !76
  %225 = xor i32 %158, %77, !dbg !76
  %226 = and i32 %225, 112, !dbg !76
  %227 = shl nuw nsw i32 %94, 7, !dbg !76
  %228 = or disjoint i32 %90, %88, !dbg !76
  %229 = or disjoint i32 %228, %92, !dbg !76
  %230 = shl nuw nsw i32 %229, 7, !dbg !76
  %231 = or disjoint i32 %230, 8192, !dbg !76
  %232 = or disjoint i32 %230, 16384, !dbg !76
  %233 = or disjoint i32 %230, 24576, !dbg !76
  %234 = or disjoint i32 %227, %159, !dbg !76
  %235 = or disjoint i32 %231, %159, !dbg !76
  %236 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %235, !dbg !76
  %237 = or disjoint i32 %232, %159, !dbg !76
  %238 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %237, !dbg !76
  %239 = or disjoint i32 %233, %159, !dbg !76
  %240 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %239, !dbg !76
  %gepdiff = sub nsw i32 %226, %159, !dbg !76
  %.lhs.trunc49 = trunc nsw i32 %gepdiff to i8, !dbg !76
  %241 = ashr exact i8 %.lhs.trunc49, 4, !dbg !76
  %.sext50 = sext i8 %241 to i32, !dbg !76
  %242 = add nsw i32 %78, %.sext50, !dbg !76
  %243 = ptrtoint ptr addrspace(1) %218 to i64, !dbg !76
  %extelt.offset = lshr i64 %243, 32, !dbg !76
  %244 = trunc nuw i64 %extelt.offset to i32, !dbg !76
  %245 = trunc i64 %243 to i32, !dbg !76
  %246 = shl nsw i32 %242, 2, !dbg !76
  %247 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %245), !dbg !76
  %248 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %244), !dbg !76
  %249 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %216), !dbg !76
  %250 = zext nneg i32 %242 to i64, !dbg !76
  %251 = lshr i64 %249, %250, !dbg !76
  %252 = trunc i64 %251 to i1, !dbg !76
  br i1 %252, label %253, label %259, !dbg !76

253:                                              ; preds = %61
  %254 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %234
  %255 = insertelement <2 x i32> poison, i32 %247, i64 0
  %256 = insertelement <2 x i32> %255, i32 %248, i64 1
  %257 = bitcast <2 x i32> %256 to i64
  %258 = inttoptr i64 %257 to ptr addrspace(1)
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %258, ptr addrspace(3) %254, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  br label %259, !dbg !76

259:                                              ; preds = %253, %61
  %260 = ptrtoint ptr addrspace(1) %220 to i64, !dbg !76
  %extelt.offset18 = lshr i64 %260, 32, !dbg !76
  %261 = trunc nuw i64 %extelt.offset18 to i32, !dbg !76
  %262 = trunc i64 %260 to i32, !dbg !76
  %263 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %262), !dbg !76
  %264 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %261), !dbg !76
  %265 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %216), !dbg !76
  %266 = lshr i64 %265, %250, !dbg !76
  %267 = trunc i64 %266 to i1, !dbg !76
  br i1 %267, label %268, label %273, !dbg !76

268:                                              ; preds = %259
  %269 = insertelement <2 x i32> poison, i32 %263, i64 0
  %270 = insertelement <2 x i32> %269, i32 %264, i64 1
  %271 = bitcast <2 x i32> %270 to i64
  %272 = inttoptr i64 %271 to ptr addrspace(1)
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %272, ptr addrspace(3) nonnull %236, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  br label %273, !dbg !76

273:                                              ; preds = %268, %259
  %274 = ptrtoint ptr addrspace(1) %222 to i64, !dbg !76
  %extelt.offset20 = lshr i64 %274, 32, !dbg !76
  %275 = trunc nuw i64 %extelt.offset20 to i32, !dbg !76
  %276 = trunc i64 %274 to i32, !dbg !76
  %277 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %276), !dbg !76
  %278 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %275), !dbg !76
  %279 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %216), !dbg !76
  %280 = lshr i64 %279, %250, !dbg !76
  %281 = trunc i64 %280 to i1, !dbg !76
  br i1 %281, label %282, label %287, !dbg !76

282:                                              ; preds = %273
  %283 = insertelement <2 x i32> poison, i32 %277, i64 0
  %284 = insertelement <2 x i32> %283, i32 %278, i64 1
  %285 = bitcast <2 x i32> %284 to i64
  %286 = inttoptr i64 %285 to ptr addrspace(1)
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %286, ptr addrspace(3) nonnull %238, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  br label %287, !dbg !76

287:                                              ; preds = %282, %273
  %288 = ptrtoint ptr addrspace(1) %224 to i64, !dbg !76
  %extelt.offset22 = lshr i64 %288, 32, !dbg !76
  %289 = trunc nuw i64 %extelt.offset22 to i32, !dbg !76
  %290 = trunc i64 %288 to i32, !dbg !76
  %291 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %290), !dbg !76
  %292 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %246, i32 %289), !dbg !76
  %293 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %216), !dbg !76
  %294 = lshr i64 %293, %250, !dbg !76
  %295 = trunc i64 %294 to i1, !dbg !76
  br i1 %295, label %296, label %301, !dbg !76

296:                                              ; preds = %287
  %297 = insertelement <2 x i32> poison, i32 %291, i64 0
  %298 = insertelement <2 x i32> %297, i32 %292, i64 1
  %299 = bitcast <2 x i32> %298 to i64
  %300 = inttoptr i64 %299 to ptr addrspace(1)
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %300, ptr addrspace(3) nonnull %240, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  br label %301, !dbg !76

301:                                              ; preds = %296, %287
  %302 = tail call i32 @llvm.amdgcn.readlane.i32(i32 %77, i32 0), !dbg !80
  %303 = shl i32 %302, 4, !dbg !80
  %304 = and i32 %303, 7168, !dbg !80
  %305 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %304, !dbg !80
  %306 = getelementptr inbounds nuw i8, ptr addrspace(3) %305, i32 8192, !dbg !80
  %307 = and i32 %158, 240, !dbg !80
  %308 = select i1 %81, i32 0, i32 272, !dbg !80
  %309 = select i1 %.not12, i32 0, i32 544, !dbg !80
  %310 = or disjoint i32 %309, %308, !dbg !80
  %311 = xor i32 %310, %307, !dbg !80
  %312 = shl nuw nsw i32 %85, 4, !dbg !80
  %313 = shl nuw nsw i32 %89, 4, !dbg !80
  %314 = shl nuw nsw i32 %91, 4, !dbg !80
  %315 = shl nuw nsw i32 %83, 4, !dbg !80
  %316 = shl nuw nsw i32 %77, 4, !dbg !80
  %317 = and i32 %316, 1280, !dbg !80
  %318 = or disjoint i32 %317, %313, !dbg !80
  %319 = or disjoint i32 %318, %307, !dbg !80
  %320 = or disjoint i32 %319, %315, !dbg !80
  %321 = or disjoint i32 %320, %314, !dbg !80
  %322 = or disjoint i32 %312, %311, !dbg !80
  %323 = or disjoint i32 %322, %313, !dbg !80
  %324 = sub nsw i32 %323, %320, !dbg !80
  %.lhs.trunc51 = trunc nsw i32 %324 to i16, !dbg !80
  %325 = sdiv i16 %.lhs.trunc51, 16, !dbg !80
  %.sext52 = sext i16 %325 to i32, !dbg !80
  %326 = or disjoint i32 %307, 8192, !dbg !80
  %327 = xor i32 %310, %326, !dbg !80
  %328 = or disjoint i32 %312, %327, !dbg !80
  %329 = or disjoint i32 %328, %313, !dbg !80
  %330 = or disjoint i32 %318, %315, !dbg !80
  %331 = or disjoint i32 %330, %326, !dbg !80
  %332 = sub nsw i32 %329, %331, !dbg !80
  %.lhs.trunc53 = trunc nsw i32 %332 to i16, !dbg !80
  %333 = sdiv i16 %.lhs.trunc53, 16, !dbg !80
  %.sext54 = sext i16 %333 to i32, !dbg !80
  %334 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %210, i16 0, i32 2147483646, i32 159744), !dbg !80
  %335 = add nsw i32 %78, %.sext52, !dbg !80
  %336 = and i32 %77, 3, !dbg !74
  %337 = add nsw i32 %336, %.sext52, !dbg !74
  %338 = shl nsw i32 %337, 4, !dbg !74
  %339 = add i32 %338, %212, !dbg !80
  %340 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %216), !dbg !80
  %341 = zext nneg i32 %335 to i64, !dbg !80
  %342 = lshr i64 %340, %341, !dbg !80
  %343 = trunc i64 %342 to i1, !dbg !80
  %344 = select i1 %343, i32 %339, i32 -2147483648, !dbg !80
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %334, ptr addrspace(3) %305, i32 16, i32 %344, i32 0, i32 0, i32 0), !dbg !80, !alias.scope !77
  %345 = add nsw i32 %78, %.sext54, !dbg !80
  %346 = add nsw i32 %336, %.sext54, !dbg !74
  %347 = shl nsw i32 %346, 4, !dbg !74
  %348 = add i32 %347, %214, !dbg !80
  %349 = zext nneg i32 %345 to i64, !dbg !80
  %350 = lshr i64 %340, %349, !dbg !80
  %351 = trunc i64 %350 to i1, !dbg !80
  %352 = select i1 %351, i32 %348, i32 -2147483648, !dbg !80
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %334, ptr addrspace(3) nonnull %306, i32 16, i32 %352, i32 0, i32 0, i32 0), !dbg !80, !alias.scope !77
  %353 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %180, i16 0, i32 2147483646, i32 159744), !dbg !81
  %354 = select i1 %216, i32 %197, i32 -2147483648, !dbg !81
  %355 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %353, i32 %354, i32 0, i32 0), !dbg !81
  %356 = bitcast i32 %355 to <4 x i8>, !dbg !81
  %357 = extractelement <4 x i8> %356, i64 0, !dbg !81
  %358 = extractelement <4 x i8> %356, i64 1, !dbg !81
  %359 = extractelement <4 x i8> %356, i64 2, !dbg !81
  %360 = extractelement <4 x i8> %356, i64 3, !dbg !81
  %361 = select i1 %216, i32 %198, i32 -2147483648, !dbg !81
  %362 = tail call i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) %353, i32 %361, i32 0, i32 0), !dbg !81
  %363 = bitcast i16 %362 to <2 x i8>, !dbg !81
  %364 = extractelement <2 x i8> %363, i64 0, !dbg !81
  %365 = extractelement <2 x i8> %363, i64 1, !dbg !81
  %366 = add nsw i64 %215, -128, !dbg !75
  fence syncscope("workgroup") release, !dbg !75
  tail call void @llvm.amdgcn.s.barrier(), !dbg !75
  fence syncscope("workgroup") acquire, !dbg !75
  %367 = icmp samesign ult i32 %77, 256, !dbg !75
  br i1 %367, label %369, label %368, !dbg !75

368:                                              ; preds = %301
  tail call void @llvm.amdgcn.s.barrier(), !dbg !75
  br label %369, !dbg !75

369:                                              ; preds = %368, %301
  %370 = icmp sgt i32 %18, 128, !dbg !75
  br i1 %370, label %.lr.ph, label %990, !dbg !75

.lr.ph:                                           ; preds = %369
  %invariant.op72 = or disjoint i32 %110, 144, !dbg !75
  %invariant.op70 = or disjoint i32 %110, 128, !dbg !75
  %invariant.op68 = or disjoint i32 %110, 16, !dbg !75
  %invariant.op66 = or disjoint i32 %92, 144, !dbg !75
  %invariant.op64 = or disjoint i32 %92, 128, !dbg !75
  %invariant.op = or disjoint i32 %92, 16, !dbg !75
  %371 = shl nuw nsw i32 %77, 3
  %372 = and i32 %371, 48
  %373 = shl nuw nsw i32 %79, 3
  %374 = or disjoint i32 %372, %373
  %375 = and i32 %77, 15
  %and.ra59 = and i32 %77, 48
  %376 = xor i32 %374, %and.ra59
  %377 = or disjoint i32 %92, %375
  %378 = shl nuw nsw i32 %377, 7
  %379 = or disjoint i32 %372, 64
  %380 = or disjoint i32 %373, %and.ra59
  %381 = xor i32 %380, %379
  %.reass = or disjoint i32 %375, %invariant.op
  %382 = shl nuw nsw i32 %.reass, 7
  %383 = or disjoint i32 %378, 8192
  %384 = or disjoint i32 %378, 10240
  %.reass65 = or disjoint i32 %375, %invariant.op64
  %385 = shl nuw nsw i32 %.reass65, 7
  %.reass67 = or disjoint i32 %375, %invariant.op66
  %386 = shl nuw nsw i32 %.reass67, 7
  %387 = or disjoint i32 %378, 24576
  %388 = or disjoint i32 %378, 26624
  %389 = or disjoint i32 %162, %163
  %390 = xor i32 %389, %and.ra59
  %391 = or disjoint i32 %375, %110
  %392 = or disjoint i32 %391, %111
  %393 = shl nuw nsw i32 %392, 6
  %.reass69 = or disjoint i32 %375, %invariant.op68
  %394 = or disjoint i32 %.reass69, %111
  %395 = shl nuw nsw i32 %394, 6
  %.reass71 = or disjoint i32 %375, %invariant.op70
  %396 = or disjoint i32 %.reass71, %111
  %397 = shl nuw nsw i32 %396, 6
  %.reass73 = or disjoint i32 %375, %invariant.op72
  %398 = or disjoint i32 %.reass73, %111
  %399 = shl nuw nsw i32 %398, 6
  br label %400, !dbg !75

400:                                              ; preds = %.lr.ph, %400
  %.pn2877 = phi i8 [ %360, %.lr.ph ], [ %631, %400 ]
  %.pn3076 = phi i8 [ %359, %.lr.ph ], [ %630, %400 ]
  %.pn3275 = phi i8 [ %358, %.lr.ph ], [ %629, %400 ]
  %.pn3474 = phi i8 [ %357, %.lr.ph ], [ %628, %400 ]
  %401 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), %.lr.ph ], [ %618, %400 ]
  %402 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %543, %400 ]
  %403 = phi i32 [ 0, %.lr.ph ], [ %541, %400 ]
  %404 = phi ptr addrspace(1) [ %180, %.lr.ph ], [ %536, %400 ]
  %405 = phi ptr addrspace(1) [ %210, %.lr.ph ], [ %538, %400 ]
  %406 = phi ptr addrspace(1) [ %5, %.lr.ph ], [ %537, %400 ]
  %407 = phi float [ 0.000000e+00, %.lr.ph ], [ %702, %400 ]
  %408 = phi float [ 0.000000e+00, %.lr.ph ], [ %703, %400 ]
  %409 = phi float [ 0.000000e+00, %.lr.ph ], [ %704, %400 ]
  %410 = phi float [ 0.000000e+00, %.lr.ph ], [ %705, %400 ]
  %411 = phi float [ 0.000000e+00, %.lr.ph ], [ %711, %400 ]
  %412 = phi float [ 0.000000e+00, %.lr.ph ], [ %712, %400 ]
  %413 = phi float [ 0.000000e+00, %.lr.ph ], [ %713, %400 ]
  %414 = phi float [ 0.000000e+00, %.lr.ph ], [ %714, %400 ]
  %415 = phi float [ 0.000000e+00, %.lr.ph ], [ %720, %400 ]
  %416 = phi float [ 0.000000e+00, %.lr.ph ], [ %721, %400 ]
  %417 = phi float [ 0.000000e+00, %.lr.ph ], [ %722, %400 ]
  %418 = phi float [ 0.000000e+00, %.lr.ph ], [ %723, %400 ]
  %419 = phi float [ 0.000000e+00, %.lr.ph ], [ %729, %400 ]
  %420 = phi float [ 0.000000e+00, %.lr.ph ], [ %730, %400 ]
  %421 = phi float [ 0.000000e+00, %.lr.ph ], [ %731, %400 ]
  %422 = phi float [ 0.000000e+00, %.lr.ph ], [ %732, %400 ]
  %423 = phi float [ 0.000000e+00, %.lr.ph ], [ %738, %400 ]
  %424 = phi float [ 0.000000e+00, %.lr.ph ], [ %739, %400 ]
  %425 = phi float [ 0.000000e+00, %.lr.ph ], [ %740, %400 ]
  %426 = phi float [ 0.000000e+00, %.lr.ph ], [ %741, %400 ]
  %427 = phi float [ 0.000000e+00, %.lr.ph ], [ %747, %400 ]
  %428 = phi float [ 0.000000e+00, %.lr.ph ], [ %748, %400 ]
  %429 = phi float [ 0.000000e+00, %.lr.ph ], [ %749, %400 ]
  %430 = phi float [ 0.000000e+00, %.lr.ph ], [ %750, %400 ]
  %431 = phi float [ 0.000000e+00, %.lr.ph ], [ %756, %400 ]
  %432 = phi float [ 0.000000e+00, %.lr.ph ], [ %757, %400 ]
  %433 = phi float [ 0.000000e+00, %.lr.ph ], [ %758, %400 ]
  %434 = phi float [ 0.000000e+00, %.lr.ph ], [ %759, %400 ]
  %435 = phi float [ 0.000000e+00, %.lr.ph ], [ %765, %400 ]
  %436 = phi float [ 0.000000e+00, %.lr.ph ], [ %766, %400 ]
  %437 = phi float [ 0.000000e+00, %.lr.ph ], [ %767, %400 ]
  %438 = phi float [ 0.000000e+00, %.lr.ph ], [ %768, %400 ]
  %439 = phi float [ 0.000000e+00, %.lr.ph ], [ %774, %400 ]
  %440 = phi float [ 0.000000e+00, %.lr.ph ], [ %775, %400 ]
  %441 = phi float [ 0.000000e+00, %.lr.ph ], [ %776, %400 ]
  %442 = phi float [ 0.000000e+00, %.lr.ph ], [ %777, %400 ]
  %443 = phi float [ 0.000000e+00, %.lr.ph ], [ %783, %400 ]
  %444 = phi float [ 0.000000e+00, %.lr.ph ], [ %784, %400 ]
  %445 = phi float [ 0.000000e+00, %.lr.ph ], [ %785, %400 ]
  %446 = phi float [ 0.000000e+00, %.lr.ph ], [ %786, %400 ]
  %447 = phi float [ 0.000000e+00, %.lr.ph ], [ %792, %400 ]
  %448 = phi float [ 0.000000e+00, %.lr.ph ], [ %793, %400 ]
  %449 = phi float [ 0.000000e+00, %.lr.ph ], [ %794, %400 ]
  %450 = phi float [ 0.000000e+00, %.lr.ph ], [ %795, %400 ]
  %451 = phi float [ 0.000000e+00, %.lr.ph ], [ %801, %400 ]
  %452 = phi float [ 0.000000e+00, %.lr.ph ], [ %802, %400 ]
  %453 = phi float [ 0.000000e+00, %.lr.ph ], [ %803, %400 ]
  %454 = phi float [ 0.000000e+00, %.lr.ph ], [ %804, %400 ]
  %455 = phi float [ 0.000000e+00, %.lr.ph ], [ %810, %400 ]
  %456 = phi float [ 0.000000e+00, %.lr.ph ], [ %811, %400 ]
  %457 = phi float [ 0.000000e+00, %.lr.ph ], [ %812, %400 ]
  %458 = phi float [ 0.000000e+00, %.lr.ph ], [ %813, %400 ]
  %459 = phi float [ 0.000000e+00, %.lr.ph ], [ %819, %400 ]
  %460 = phi float [ 0.000000e+00, %.lr.ph ], [ %820, %400 ]
  %461 = phi float [ 0.000000e+00, %.lr.ph ], [ %821, %400 ]
  %462 = phi float [ 0.000000e+00, %.lr.ph ], [ %822, %400 ]
  %463 = phi float [ 0.000000e+00, %.lr.ph ], [ %828, %400 ]
  %464 = phi float [ 0.000000e+00, %.lr.ph ], [ %829, %400 ]
  %465 = phi float [ 0.000000e+00, %.lr.ph ], [ %830, %400 ]
  %466 = phi float [ 0.000000e+00, %.lr.ph ], [ %831, %400 ]
  %467 = phi float [ 0.000000e+00, %.lr.ph ], [ %837, %400 ]
  %468 = phi float [ 0.000000e+00, %.lr.ph ], [ %838, %400 ]
  %469 = phi float [ 0.000000e+00, %.lr.ph ], [ %839, %400 ]
  %470 = phi float [ 0.000000e+00, %.lr.ph ], [ %840, %400 ]
  %471 = phi float [ 0.000000e+00, %.lr.ph ], [ %846, %400 ]
  %472 = phi float [ 0.000000e+00, %.lr.ph ], [ %847, %400 ]
  %473 = phi float [ 0.000000e+00, %.lr.ph ], [ %848, %400 ]
  %474 = phi float [ 0.000000e+00, %.lr.ph ], [ %849, %400 ]
  %475 = phi float [ 0.000000e+00, %.lr.ph ], [ %855, %400 ]
  %476 = phi float [ 0.000000e+00, %.lr.ph ], [ %856, %400 ]
  %477 = phi float [ 0.000000e+00, %.lr.ph ], [ %857, %400 ]
  %478 = phi float [ 0.000000e+00, %.lr.ph ], [ %858, %400 ]
  %479 = phi float [ 0.000000e+00, %.lr.ph ], [ %864, %400 ]
  %480 = phi float [ 0.000000e+00, %.lr.ph ], [ %865, %400 ]
  %481 = phi float [ 0.000000e+00, %.lr.ph ], [ %866, %400 ]
  %482 = phi float [ 0.000000e+00, %.lr.ph ], [ %867, %400 ]
  %483 = phi float [ 0.000000e+00, %.lr.ph ], [ %873, %400 ]
  %484 = phi float [ 0.000000e+00, %.lr.ph ], [ %874, %400 ]
  %485 = phi float [ 0.000000e+00, %.lr.ph ], [ %875, %400 ]
  %486 = phi float [ 0.000000e+00, %.lr.ph ], [ %876, %400 ]
  %487 = phi float [ 0.000000e+00, %.lr.ph ], [ %882, %400 ]
  %488 = phi float [ 0.000000e+00, %.lr.ph ], [ %883, %400 ]
  %489 = phi float [ 0.000000e+00, %.lr.ph ], [ %884, %400 ]
  %490 = phi float [ 0.000000e+00, %.lr.ph ], [ %885, %400 ]
  %491 = phi float [ 0.000000e+00, %.lr.ph ], [ %891, %400 ]
  %492 = phi float [ 0.000000e+00, %.lr.ph ], [ %892, %400 ]
  %493 = phi float [ 0.000000e+00, %.lr.ph ], [ %893, %400 ]
  %494 = phi float [ 0.000000e+00, %.lr.ph ], [ %894, %400 ]
  %495 = phi float [ 0.000000e+00, %.lr.ph ], [ %900, %400 ]
  %496 = phi float [ 0.000000e+00, %.lr.ph ], [ %901, %400 ]
  %497 = phi float [ 0.000000e+00, %.lr.ph ], [ %902, %400 ]
  %498 = phi float [ 0.000000e+00, %.lr.ph ], [ %903, %400 ]
  %499 = phi float [ 0.000000e+00, %.lr.ph ], [ %909, %400 ]
  %500 = phi float [ 0.000000e+00, %.lr.ph ], [ %910, %400 ]
  %501 = phi float [ 0.000000e+00, %.lr.ph ], [ %911, %400 ]
  %502 = phi float [ 0.000000e+00, %.lr.ph ], [ %912, %400 ]
  %503 = phi float [ 0.000000e+00, %.lr.ph ], [ %918, %400 ]
  %504 = phi float [ 0.000000e+00, %.lr.ph ], [ %919, %400 ]
  %505 = phi float [ 0.000000e+00, %.lr.ph ], [ %920, %400 ]
  %506 = phi float [ 0.000000e+00, %.lr.ph ], [ %921, %400 ]
  %507 = phi float [ 0.000000e+00, %.lr.ph ], [ %927, %400 ]
  %508 = phi float [ 0.000000e+00, %.lr.ph ], [ %928, %400 ]
  %509 = phi float [ 0.000000e+00, %.lr.ph ], [ %929, %400 ]
  %510 = phi float [ 0.000000e+00, %.lr.ph ], [ %930, %400 ]
  %511 = phi float [ 0.000000e+00, %.lr.ph ], [ %936, %400 ]
  %512 = phi float [ 0.000000e+00, %.lr.ph ], [ %937, %400 ]
  %513 = phi float [ 0.000000e+00, %.lr.ph ], [ %938, %400 ]
  %514 = phi float [ 0.000000e+00, %.lr.ph ], [ %939, %400 ]
  %515 = phi float [ 0.000000e+00, %.lr.ph ], [ %945, %400 ]
  %516 = phi float [ 0.000000e+00, %.lr.ph ], [ %946, %400 ]
  %517 = phi float [ 0.000000e+00, %.lr.ph ], [ %947, %400 ]
  %518 = phi float [ 0.000000e+00, %.lr.ph ], [ %948, %400 ]
  %519 = phi float [ 0.000000e+00, %.lr.ph ], [ %954, %400 ]
  %520 = phi float [ 0.000000e+00, %.lr.ph ], [ %955, %400 ]
  %521 = phi float [ 0.000000e+00, %.lr.ph ], [ %956, %400 ]
  %522 = phi float [ 0.000000e+00, %.lr.ph ], [ %957, %400 ]
  %523 = phi float [ 0.000000e+00, %.lr.ph ], [ %963, %400 ]
  %524 = phi float [ 0.000000e+00, %.lr.ph ], [ %964, %400 ]
  %525 = phi float [ 0.000000e+00, %.lr.ph ], [ %965, %400 ]
  %526 = phi float [ 0.000000e+00, %.lr.ph ], [ %966, %400 ]
  %527 = phi float [ 0.000000e+00, %.lr.ph ], [ %972, %400 ]
  %528 = phi float [ 0.000000e+00, %.lr.ph ], [ %973, %400 ]
  %529 = phi float [ 0.000000e+00, %.lr.ph ], [ %974, %400 ]
  %530 = phi float [ 0.000000e+00, %.lr.ph ], [ %975, %400 ]
  %531 = phi float [ 0.000000e+00, %.lr.ph ], [ %981, %400 ]
  %532 = phi float [ 0.000000e+00, %.lr.ph ], [ %982, %400 ]
  %533 = phi float [ 0.000000e+00, %.lr.ph ], [ %983, %400 ]
  %534 = phi float [ 0.000000e+00, %.lr.ph ], [ %984, %400 ]
  %535 = phi i64 [ 0, %.lr.ph ], [ %985, %400 ]
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !82
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49168), !dbg !76
  fence syncscope("workgroup") release, !dbg !76
  tail call void @llvm.amdgcn.s.barrier(), !dbg !76
  fence syncscope("workgroup") acquire, !dbg !76
  %536 = getelementptr i8, ptr addrspace(1) %404, i64 4, !dbg !83
  %537 = getelementptr i8, ptr addrspace(1) %406, i64 128, !dbg !84
  %538 = getelementptr i8, ptr addrspace(1) %405, i64 64, !dbg !85
  %539 = add i32 %403, 1, !dbg !75
  %540 = icmp slt i32 %539, 2, !dbg !75
  %541 = select i1 %540, i32 %539, i32 0, !dbg !75
  %542 = shl i32 %541, 15, !dbg !76
  %543 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %542, !dbg !76
  %544 = getelementptr i8, ptr addrspace(1) %537, i64 %217, !dbg !76
  %545 = getelementptr i8, ptr addrspace(1) %537, i64 %219, !dbg !76
  %546 = getelementptr i8, ptr addrspace(1) %537, i64 %221, !dbg !76
  %547 = getelementptr i8, ptr addrspace(1) %537, i64 %223, !dbg !76
  %548 = getelementptr inbounds nuw i8, ptr addrspace(3) %543, i32 %226, !dbg !76
  %549 = getelementptr inbounds nuw i8, ptr addrspace(3) %548, i32 %227, !dbg !76
  %550 = getelementptr inbounds nuw i8, ptr addrspace(3) %548, i32 %231, !dbg !76
  %551 = getelementptr inbounds nuw i8, ptr addrspace(3) %548, i32 %232, !dbg !76
  %552 = getelementptr inbounds nuw i8, ptr addrspace(3) %548, i32 %233, !dbg !76
  %553 = getelementptr inbounds nuw i8, ptr addrspace(3) %543, i32 %234, !dbg !76
  %554 = getelementptr inbounds nuw i8, ptr addrspace(3) %543, i32 %235, !dbg !76
  %555 = getelementptr inbounds nuw i8, ptr addrspace(3) %543, i32 %237, !dbg !76
  %556 = getelementptr inbounds nuw i8, ptr addrspace(3) %543, i32 %239, !dbg !76
  %557 = ptrtoint ptr addrspace(3) %553 to i32, !dbg !76
  %558 = ptrtoint ptr addrspace(3) %549 to i32, !dbg !76
  %559 = sub i32 %558, %557, !dbg !76
  %560 = ashr exact i32 %559, 4, !dbg !76
  %561 = add nsw i32 %560, %78, !dbg !76
  %562 = ptrtoint ptr addrspace(1) %544 to i64, !dbg !76
  %extelt.offset36 = lshr i64 %562, 32, !dbg !76
  %563 = trunc nuw i64 %extelt.offset36 to i32, !dbg !76
  %564 = trunc i64 %562 to i32, !dbg !76
  %565 = shl nsw i32 %561, 2, !dbg !76
  %566 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %565, i32 %564), !dbg !76
  %567 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %565, i32 %563), !dbg !76
  %568 = insertelement <2 x i32> poison, i32 %566, i64 0, !dbg !76
  %569 = insertelement <2 x i32> %568, i32 %567, i64 1, !dbg !76
  %570 = bitcast <2 x i32> %569 to i64, !dbg !76
  %571 = inttoptr i64 %570 to ptr addrspace(1), !dbg !76
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %571, ptr addrspace(3) %553, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  %572 = ptrtoint ptr addrspace(3) %554 to i32, !dbg !76
  %573 = ptrtoint ptr addrspace(3) %550 to i32, !dbg !76
  %574 = sub i32 %573, %572, !dbg !76
  %575 = ashr exact i32 %574, 4, !dbg !76
  %576 = add nsw i32 %575, %78, !dbg !76
  %577 = ptrtoint ptr addrspace(1) %545 to i64, !dbg !76
  %extelt.offset37 = lshr i64 %577, 32, !dbg !76
  %578 = trunc nuw i64 %extelt.offset37 to i32, !dbg !76
  %579 = trunc i64 %577 to i32, !dbg !76
  %580 = shl nsw i32 %576, 2, !dbg !76
  %581 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %580, i32 %579), !dbg !76
  %582 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %580, i32 %578), !dbg !76
  %583 = insertelement <2 x i32> poison, i32 %581, i64 0, !dbg !76
  %584 = insertelement <2 x i32> %583, i32 %582, i64 1, !dbg !76
  %585 = bitcast <2 x i32> %584 to i64, !dbg !76
  %586 = inttoptr i64 %585 to ptr addrspace(1), !dbg !76
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %586, ptr addrspace(3) nonnull %554, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  %587 = ptrtoint ptr addrspace(3) %555 to i32, !dbg !76
  %588 = ptrtoint ptr addrspace(3) %551 to i32, !dbg !76
  %589 = sub i32 %588, %587, !dbg !76
  %590 = ashr exact i32 %589, 4, !dbg !76
  %591 = add nsw i32 %590, %78, !dbg !76
  %592 = ptrtoint ptr addrspace(1) %546 to i64, !dbg !76
  %extelt.offset38 = lshr i64 %592, 32, !dbg !76
  %593 = trunc nuw i64 %extelt.offset38 to i32, !dbg !76
  %594 = trunc i64 %592 to i32, !dbg !76
  %595 = shl nsw i32 %591, 2, !dbg !76
  %596 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %595, i32 %594), !dbg !76
  %597 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %595, i32 %593), !dbg !76
  %598 = insertelement <2 x i32> poison, i32 %596, i64 0, !dbg !76
  %599 = insertelement <2 x i32> %598, i32 %597, i64 1, !dbg !76
  %600 = bitcast <2 x i32> %599 to i64, !dbg !76
  %601 = inttoptr i64 %600 to ptr addrspace(1), !dbg !76
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %601, ptr addrspace(3) nonnull %555, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  %602 = ptrtoint ptr addrspace(3) %556 to i32, !dbg !76
  %603 = ptrtoint ptr addrspace(3) %552 to i32, !dbg !76
  %604 = sub i32 %603, %602, !dbg !76
  %605 = ashr exact i32 %604, 4, !dbg !76
  %606 = add nsw i32 %605, %78, !dbg !76
  %607 = ptrtoint ptr addrspace(1) %547 to i64, !dbg !76
  %extelt.offset39 = lshr i64 %607, 32, !dbg !76
  %608 = trunc nuw i64 %extelt.offset39 to i32, !dbg !76
  %609 = trunc i64 %607 to i32, !dbg !76
  %610 = shl nsw i32 %606, 2, !dbg !76
  %611 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %610, i32 %609), !dbg !76
  %612 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %610, i32 %608), !dbg !76
  %613 = insertelement <2 x i32> poison, i32 %611, i64 0, !dbg !76
  %614 = insertelement <2 x i32> %613, i32 %612, i64 1, !dbg !76
  %615 = bitcast <2 x i32> %614 to i64, !dbg !76
  %616 = inttoptr i64 %615 to ptr addrspace(1), !dbg !76
  tail call void @llvm.amdgcn.global.load.lds(ptr addrspace(1) %616, ptr addrspace(3) nonnull %556, i32 16, i32 0, i32 0), !dbg !76, !alias.scope !77
  %617 = shl i32 %541, 14, !dbg !80
  %618 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %617, !dbg !80
  %619 = tail call i32 @llvm.amdgcn.readlane.i32(i32 %77, i32 0), !dbg !80
  %620 = shl i32 %619, 4, !dbg !80
  %621 = and i32 %620, 7168, !dbg !80
  %622 = getelementptr inbounds nuw i8, ptr addrspace(3) %618, i32 %621, !dbg !80
  %623 = getelementptr inbounds nuw i8, ptr addrspace(3) %622, i32 8192, !dbg !80
  %624 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %538, i16 0, i32 2147483646, i32 159744), !dbg !80
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %624, ptr addrspace(3) %622, i32 16, i32 %339, i32 0, i32 0, i32 0), !dbg !80, !alias.scope !77
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %624, ptr addrspace(3) nonnull %623, i32 16, i32 %348, i32 0, i32 0, i32 0), !dbg !80, !alias.scope !77
  %625 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %536, i16 0, i32 2147483646, i32 159744), !dbg !81
  %626 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %625, i32 %197, i32 0, i32 0), !dbg !81
  %627 = bitcast i32 %626 to <4 x i8>, !dbg !81
  %628 = extractelement <4 x i8> %627, i64 0, !dbg !81
  %629 = extractelement <4 x i8> %627, i64 1, !dbg !81
  %630 = extractelement <4 x i8> %627, i64 2, !dbg !81
  %631 = extractelement <4 x i8> %627, i64 3, !dbg !81
  %632 = tail call i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) %625, i32 %198, i32 0, i32 0), !dbg !81
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !82
  tail call void @llvm.amdgcn.s.barrier(), !dbg !82
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !82
  %633 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %376, !dbg !76
  %634 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %378, !dbg !76
  %635 = load <16 x i8>, ptr addrspace(3) %634, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %636 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 %381, !dbg !76
  %637 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %378, !dbg !76
  %638 = load <16 x i8>, ptr addrspace(3) %637, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %639 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %382, !dbg !76
  %640 = load <16 x i8>, ptr addrspace(3) %639, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %641 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %382, !dbg !76
  %642 = load <16 x i8>, ptr addrspace(3) %641, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %643 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %383, !dbg !76
  %644 = load <16 x i8>, ptr addrspace(3) %643, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %645 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %383, !dbg !76
  %646 = load <16 x i8>, ptr addrspace(3) %645, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %647 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %384, !dbg !76
  %648 = load <16 x i8>, ptr addrspace(3) %647, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %649 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %384, !dbg !76
  %650 = load <16 x i8>, ptr addrspace(3) %649, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %651 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %385, !dbg !76
  %652 = load <16 x i8>, ptr addrspace(3) %651, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %653 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %385, !dbg !76
  %654 = load <16 x i8>, ptr addrspace(3) %653, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %655 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %386, !dbg !76
  %656 = load <16 x i8>, ptr addrspace(3) %655, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %657 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %386, !dbg !76
  %658 = load <16 x i8>, ptr addrspace(3) %657, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %659 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %387, !dbg !76
  %660 = load <16 x i8>, ptr addrspace(3) %659, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %661 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %387, !dbg !76
  %662 = load <16 x i8>, ptr addrspace(3) %661, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %663 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 %388, !dbg !76
  %664 = load <16 x i8>, ptr addrspace(3) %663, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %665 = getelementptr inbounds nuw i8, ptr addrspace(3) %636, i32 %388, !dbg !76
  %666 = load <16 x i8>, ptr addrspace(3) %665, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %667 = getelementptr inbounds nuw i8, ptr addrspace(3) %401, i32 %390, !dbg !80
  %668 = getelementptr inbounds nuw i8, ptr addrspace(3) %667, i32 %393, !dbg !80
  %669 = load <4 x i32>, ptr addrspace(3) %668, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %670 = getelementptr inbounds nuw i8, ptr addrspace(3) %667, i32 %395, !dbg !80
  %671 = load <4 x i32>, ptr addrspace(3) %670, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %672 = getelementptr inbounds nuw i8, ptr addrspace(3) %667, i32 %397, !dbg !80
  %673 = load <4 x i32>, ptr addrspace(3) %672, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %674 = getelementptr inbounds nuw i8, ptr addrspace(3) %667, i32 %399, !dbg !80
  %675 = load <4 x i32>, ptr addrspace(3) %674, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %676 = shufflevector <16 x i8> %635, <16 x i8> %638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %677 = bitcast <32 x i8> %676 to <8 x i32>, !dbg !82
  %678 = shufflevector <16 x i8> %640, <16 x i8> %642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %679 = bitcast <32 x i8> %678 to <8 x i32>, !dbg !82
  %680 = shufflevector <16 x i8> %644, <16 x i8> %646, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %681 = bitcast <32 x i8> %680 to <8 x i32>, !dbg !82
  %682 = shufflevector <16 x i8> %648, <16 x i8> %650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %683 = bitcast <32 x i8> %682 to <8 x i32>, !dbg !82
  %684 = shufflevector <16 x i8> %652, <16 x i8> %654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %685 = bitcast <32 x i8> %684 to <8 x i32>, !dbg !82
  %686 = shufflevector <16 x i8> %656, <16 x i8> %658, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %687 = bitcast <32 x i8> %686 to <8 x i32>, !dbg !82
  %688 = shufflevector <16 x i8> %660, <16 x i8> %662, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %689 = bitcast <32 x i8> %688 to <8 x i32>, !dbg !82
  %690 = shufflevector <16 x i8> %664, <16 x i8> %666, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !82
  %691 = bitcast <32 x i8> %690 to <8 x i32>, !dbg !82
  %692 = insertelement <4 x i8> poison, i8 %.pn3474, i64 0, !dbg !82
  %693 = insertelement <4 x i8> %692, i8 %.pn3275, i64 1, !dbg !82
  %694 = insertelement <4 x i8> %693, i8 %.pn3076, i64 2, !dbg !82
  %695 = insertelement <4 x i8> %694, i8 %.pn2877, i64 3, !dbg !82
  %696 = bitcast <4 x i8> %695 to i32, !dbg !82
  %697 = insertelement <4 x float> poison, float %407, i64 0, !dbg !82
  %698 = insertelement <4 x float> %697, float %408, i64 1, !dbg !82
  %699 = insertelement <4 x float> %698, float %409, i64 2, !dbg !82
  %700 = insertelement <4 x float> %699, float %410, i64 3, !dbg !82
  %701 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %677, <4 x float> %700, i32 4, i32 0, i32 0, i32 %696, i32 0, i32 2139062143), !dbg !82
  %702 = extractelement <4 x float> %701, i64 0, !dbg !82
  %703 = extractelement <4 x float> %701, i64 1, !dbg !82
  %704 = extractelement <4 x float> %701, i64 2, !dbg !82
  %705 = extractelement <4 x float> %701, i64 3, !dbg !82
  %706 = insertelement <4 x float> poison, float %411, i64 0, !dbg !82
  %707 = insertelement <4 x float> %706, float %412, i64 1, !dbg !82
  %708 = insertelement <4 x float> %707, float %413, i64 2, !dbg !82
  %709 = insertelement <4 x float> %708, float %414, i64 3, !dbg !82
  %710 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %677, <4 x float> %709, i32 4, i32 0, i32 1, i32 %696, i32 0, i32 2139062143), !dbg !82
  %711 = extractelement <4 x float> %710, i64 0, !dbg !82
  %712 = extractelement <4 x float> %710, i64 1, !dbg !82
  %713 = extractelement <4 x float> %710, i64 2, !dbg !82
  %714 = extractelement <4 x float> %710, i64 3, !dbg !82
  %715 = insertelement <4 x float> poison, float %415, i64 0, !dbg !82
  %716 = insertelement <4 x float> %715, float %416, i64 1, !dbg !82
  %717 = insertelement <4 x float> %716, float %417, i64 2, !dbg !82
  %718 = insertelement <4 x float> %717, float %418, i64 3, !dbg !82
  %719 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %679, <4 x float> %718, i32 4, i32 0, i32 0, i32 %696, i32 1, i32 2139062143), !dbg !82
  %720 = extractelement <4 x float> %719, i64 0, !dbg !82
  %721 = extractelement <4 x float> %719, i64 1, !dbg !82
  %722 = extractelement <4 x float> %719, i64 2, !dbg !82
  %723 = extractelement <4 x float> %719, i64 3, !dbg !82
  %724 = insertelement <4 x float> poison, float %419, i64 0, !dbg !82
  %725 = insertelement <4 x float> %724, float %420, i64 1, !dbg !82
  %726 = insertelement <4 x float> %725, float %421, i64 2, !dbg !82
  %727 = insertelement <4 x float> %726, float %422, i64 3, !dbg !82
  %728 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %679, <4 x float> %727, i32 4, i32 0, i32 1, i32 %696, i32 1, i32 2139062143), !dbg !82
  %729 = extractelement <4 x float> %728, i64 0, !dbg !82
  %730 = extractelement <4 x float> %728, i64 1, !dbg !82
  %731 = extractelement <4 x float> %728, i64 2, !dbg !82
  %732 = extractelement <4 x float> %728, i64 3, !dbg !82
  %733 = insertelement <4 x float> poison, float %423, i64 0, !dbg !82
  %734 = insertelement <4 x float> %733, float %424, i64 1, !dbg !82
  %735 = insertelement <4 x float> %734, float %425, i64 2, !dbg !82
  %736 = insertelement <4 x float> %735, float %426, i64 3, !dbg !82
  %737 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %677, <4 x float> %736, i32 4, i32 0, i32 2, i32 %696, i32 0, i32 2139062143), !dbg !82
  %738 = extractelement <4 x float> %737, i64 0, !dbg !82
  %739 = extractelement <4 x float> %737, i64 1, !dbg !82
  %740 = extractelement <4 x float> %737, i64 2, !dbg !82
  %741 = extractelement <4 x float> %737, i64 3, !dbg !82
  %742 = insertelement <4 x float> poison, float %427, i64 0, !dbg !82
  %743 = insertelement <4 x float> %742, float %428, i64 1, !dbg !82
  %744 = insertelement <4 x float> %743, float %429, i64 2, !dbg !82
  %745 = insertelement <4 x float> %744, float %430, i64 3, !dbg !82
  %746 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %677, <4 x float> %745, i32 4, i32 0, i32 3, i32 %696, i32 0, i32 2139062143), !dbg !82
  %747 = extractelement <4 x float> %746, i64 0, !dbg !82
  %748 = extractelement <4 x float> %746, i64 1, !dbg !82
  %749 = extractelement <4 x float> %746, i64 2, !dbg !82
  %750 = extractelement <4 x float> %746, i64 3, !dbg !82
  %751 = insertelement <4 x float> poison, float %431, i64 0, !dbg !82
  %752 = insertelement <4 x float> %751, float %432, i64 1, !dbg !82
  %753 = insertelement <4 x float> %752, float %433, i64 2, !dbg !82
  %754 = insertelement <4 x float> %753, float %434, i64 3, !dbg !82
  %755 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %679, <4 x float> %754, i32 4, i32 0, i32 2, i32 %696, i32 1, i32 2139062143), !dbg !82
  %756 = extractelement <4 x float> %755, i64 0, !dbg !82
  %757 = extractelement <4 x float> %755, i64 1, !dbg !82
  %758 = extractelement <4 x float> %755, i64 2, !dbg !82
  %759 = extractelement <4 x float> %755, i64 3, !dbg !82
  %760 = insertelement <4 x float> poison, float %435, i64 0, !dbg !82
  %761 = insertelement <4 x float> %760, float %436, i64 1, !dbg !82
  %762 = insertelement <4 x float> %761, float %437, i64 2, !dbg !82
  %763 = insertelement <4 x float> %762, float %438, i64 3, !dbg !82
  %764 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %679, <4 x float> %763, i32 4, i32 0, i32 3, i32 %696, i32 1, i32 2139062143), !dbg !82
  %765 = extractelement <4 x float> %764, i64 0, !dbg !82
  %766 = extractelement <4 x float> %764, i64 1, !dbg !82
  %767 = extractelement <4 x float> %764, i64 2, !dbg !82
  %768 = extractelement <4 x float> %764, i64 3, !dbg !82
  %769 = insertelement <4 x float> poison, float %439, i64 0, !dbg !82
  %770 = insertelement <4 x float> %769, float %440, i64 1, !dbg !82
  %771 = insertelement <4 x float> %770, float %441, i64 2, !dbg !82
  %772 = insertelement <4 x float> %771, float %442, i64 3, !dbg !82
  %773 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %681, <4 x float> %772, i32 4, i32 0, i32 0, i32 %696, i32 2, i32 2139062143), !dbg !82
  %774 = extractelement <4 x float> %773, i64 0, !dbg !82
  %775 = extractelement <4 x float> %773, i64 1, !dbg !82
  %776 = extractelement <4 x float> %773, i64 2, !dbg !82
  %777 = extractelement <4 x float> %773, i64 3, !dbg !82
  %778 = insertelement <4 x float> poison, float %443, i64 0, !dbg !82
  %779 = insertelement <4 x float> %778, float %444, i64 1, !dbg !82
  %780 = insertelement <4 x float> %779, float %445, i64 2, !dbg !82
  %781 = insertelement <4 x float> %780, float %446, i64 3, !dbg !82
  %782 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %681, <4 x float> %781, i32 4, i32 0, i32 1, i32 %696, i32 2, i32 2139062143), !dbg !82
  %783 = extractelement <4 x float> %782, i64 0, !dbg !82
  %784 = extractelement <4 x float> %782, i64 1, !dbg !82
  %785 = extractelement <4 x float> %782, i64 2, !dbg !82
  %786 = extractelement <4 x float> %782, i64 3, !dbg !82
  %787 = insertelement <4 x float> poison, float %447, i64 0, !dbg !82
  %788 = insertelement <4 x float> %787, float %448, i64 1, !dbg !82
  %789 = insertelement <4 x float> %788, float %449, i64 2, !dbg !82
  %790 = insertelement <4 x float> %789, float %450, i64 3, !dbg !82
  %791 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %683, <4 x float> %790, i32 4, i32 0, i32 0, i32 %696, i32 3, i32 2139062143), !dbg !82
  %792 = extractelement <4 x float> %791, i64 0, !dbg !82
  %793 = extractelement <4 x float> %791, i64 1, !dbg !82
  %794 = extractelement <4 x float> %791, i64 2, !dbg !82
  %795 = extractelement <4 x float> %791, i64 3, !dbg !82
  %796 = insertelement <4 x float> poison, float %451, i64 0, !dbg !82
  %797 = insertelement <4 x float> %796, float %452, i64 1, !dbg !82
  %798 = insertelement <4 x float> %797, float %453, i64 2, !dbg !82
  %799 = insertelement <4 x float> %798, float %454, i64 3, !dbg !82
  %800 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %683, <4 x float> %799, i32 4, i32 0, i32 1, i32 %696, i32 3, i32 2139062143), !dbg !82
  %801 = extractelement <4 x float> %800, i64 0, !dbg !82
  %802 = extractelement <4 x float> %800, i64 1, !dbg !82
  %803 = extractelement <4 x float> %800, i64 2, !dbg !82
  %804 = extractelement <4 x float> %800, i64 3, !dbg !82
  %805 = insertelement <4 x float> poison, float %455, i64 0, !dbg !82
  %806 = insertelement <4 x float> %805, float %456, i64 1, !dbg !82
  %807 = insertelement <4 x float> %806, float %457, i64 2, !dbg !82
  %808 = insertelement <4 x float> %807, float %458, i64 3, !dbg !82
  %809 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %681, <4 x float> %808, i32 4, i32 0, i32 2, i32 %696, i32 2, i32 2139062143), !dbg !82
  %810 = extractelement <4 x float> %809, i64 0, !dbg !82
  %811 = extractelement <4 x float> %809, i64 1, !dbg !82
  %812 = extractelement <4 x float> %809, i64 2, !dbg !82
  %813 = extractelement <4 x float> %809, i64 3, !dbg !82
  %814 = insertelement <4 x float> poison, float %459, i64 0, !dbg !82
  %815 = insertelement <4 x float> %814, float %460, i64 1, !dbg !82
  %816 = insertelement <4 x float> %815, float %461, i64 2, !dbg !82
  %817 = insertelement <4 x float> %816, float %462, i64 3, !dbg !82
  %818 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %681, <4 x float> %817, i32 4, i32 0, i32 3, i32 %696, i32 2, i32 2139062143), !dbg !82
  %819 = extractelement <4 x float> %818, i64 0, !dbg !82
  %820 = extractelement <4 x float> %818, i64 1, !dbg !82
  %821 = extractelement <4 x float> %818, i64 2, !dbg !82
  %822 = extractelement <4 x float> %818, i64 3, !dbg !82
  %823 = insertelement <4 x float> poison, float %463, i64 0, !dbg !82
  %824 = insertelement <4 x float> %823, float %464, i64 1, !dbg !82
  %825 = insertelement <4 x float> %824, float %465, i64 2, !dbg !82
  %826 = insertelement <4 x float> %825, float %466, i64 3, !dbg !82
  %827 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %683, <4 x float> %826, i32 4, i32 0, i32 2, i32 %696, i32 3, i32 2139062143), !dbg !82
  %828 = extractelement <4 x float> %827, i64 0, !dbg !82
  %829 = extractelement <4 x float> %827, i64 1, !dbg !82
  %830 = extractelement <4 x float> %827, i64 2, !dbg !82
  %831 = extractelement <4 x float> %827, i64 3, !dbg !82
  %832 = insertelement <4 x float> poison, float %467, i64 0, !dbg !82
  %833 = insertelement <4 x float> %832, float %468, i64 1, !dbg !82
  %834 = insertelement <4 x float> %833, float %469, i64 2, !dbg !82
  %835 = insertelement <4 x float> %834, float %470, i64 3, !dbg !82
  %836 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %683, <4 x float> %835, i32 4, i32 0, i32 3, i32 %696, i32 3, i32 2139062143), !dbg !82
  %837 = extractelement <4 x float> %836, i64 0, !dbg !82
  %838 = extractelement <4 x float> %836, i64 1, !dbg !82
  %839 = extractelement <4 x float> %836, i64 2, !dbg !82
  %840 = extractelement <4 x float> %836, i64 3, !dbg !82
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !82
  tail call void @llvm.amdgcn.s.barrier(), !dbg !82
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !82
  %841 = insertelement <4 x float> poison, float %471, i64 0, !dbg !82
  %842 = insertelement <4 x float> %841, float %472, i64 1, !dbg !82
  %843 = insertelement <4 x float> %842, float %473, i64 2, !dbg !82
  %844 = insertelement <4 x float> %843, float %474, i64 3, !dbg !82
  %845 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %685, <4 x float> %844, i32 4, i32 0, i32 0, i32 %696, i32 0, i32 2139062143), !dbg !82
  %846 = extractelement <4 x float> %845, i64 0, !dbg !82
  %847 = extractelement <4 x float> %845, i64 1, !dbg !82
  %848 = extractelement <4 x float> %845, i64 2, !dbg !82
  %849 = extractelement <4 x float> %845, i64 3, !dbg !82
  %850 = insertelement <4 x float> poison, float %475, i64 0, !dbg !82
  %851 = insertelement <4 x float> %850, float %476, i64 1, !dbg !82
  %852 = insertelement <4 x float> %851, float %477, i64 2, !dbg !82
  %853 = insertelement <4 x float> %852, float %478, i64 3, !dbg !82
  %854 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %685, <4 x float> %853, i32 4, i32 0, i32 1, i32 %696, i32 0, i32 2139062143), !dbg !82
  %855 = extractelement <4 x float> %854, i64 0, !dbg !82
  %856 = extractelement <4 x float> %854, i64 1, !dbg !82
  %857 = extractelement <4 x float> %854, i64 2, !dbg !82
  %858 = extractelement <4 x float> %854, i64 3, !dbg !82
  %859 = insertelement <4 x float> poison, float %479, i64 0, !dbg !82
  %860 = insertelement <4 x float> %859, float %480, i64 1, !dbg !82
  %861 = insertelement <4 x float> %860, float %481, i64 2, !dbg !82
  %862 = insertelement <4 x float> %861, float %482, i64 3, !dbg !82
  %863 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %687, <4 x float> %862, i32 4, i32 0, i32 0, i32 %696, i32 1, i32 2139062143), !dbg !82
  %864 = extractelement <4 x float> %863, i64 0, !dbg !82
  %865 = extractelement <4 x float> %863, i64 1, !dbg !82
  %866 = extractelement <4 x float> %863, i64 2, !dbg !82
  %867 = extractelement <4 x float> %863, i64 3, !dbg !82
  %868 = insertelement <4 x float> poison, float %483, i64 0, !dbg !82
  %869 = insertelement <4 x float> %868, float %484, i64 1, !dbg !82
  %870 = insertelement <4 x float> %869, float %485, i64 2, !dbg !82
  %871 = insertelement <4 x float> %870, float %486, i64 3, !dbg !82
  %872 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %687, <4 x float> %871, i32 4, i32 0, i32 1, i32 %696, i32 1, i32 2139062143), !dbg !82
  %873 = extractelement <4 x float> %872, i64 0, !dbg !82
  %874 = extractelement <4 x float> %872, i64 1, !dbg !82
  %875 = extractelement <4 x float> %872, i64 2, !dbg !82
  %876 = extractelement <4 x float> %872, i64 3, !dbg !82
  %877 = insertelement <4 x float> poison, float %487, i64 0, !dbg !82
  %878 = insertelement <4 x float> %877, float %488, i64 1, !dbg !82
  %879 = insertelement <4 x float> %878, float %489, i64 2, !dbg !82
  %880 = insertelement <4 x float> %879, float %490, i64 3, !dbg !82
  %881 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %685, <4 x float> %880, i32 4, i32 0, i32 2, i32 %696, i32 0, i32 2139062143), !dbg !82
  %882 = extractelement <4 x float> %881, i64 0, !dbg !82
  %883 = extractelement <4 x float> %881, i64 1, !dbg !82
  %884 = extractelement <4 x float> %881, i64 2, !dbg !82
  %885 = extractelement <4 x float> %881, i64 3, !dbg !82
  %886 = insertelement <4 x float> poison, float %491, i64 0, !dbg !82
  %887 = insertelement <4 x float> %886, float %492, i64 1, !dbg !82
  %888 = insertelement <4 x float> %887, float %493, i64 2, !dbg !82
  %889 = insertelement <4 x float> %888, float %494, i64 3, !dbg !82
  %890 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %685, <4 x float> %889, i32 4, i32 0, i32 3, i32 %696, i32 0, i32 2139062143), !dbg !82
  %891 = extractelement <4 x float> %890, i64 0, !dbg !82
  %892 = extractelement <4 x float> %890, i64 1, !dbg !82
  %893 = extractelement <4 x float> %890, i64 2, !dbg !82
  %894 = extractelement <4 x float> %890, i64 3, !dbg !82
  %895 = insertelement <4 x float> poison, float %495, i64 0, !dbg !82
  %896 = insertelement <4 x float> %895, float %496, i64 1, !dbg !82
  %897 = insertelement <4 x float> %896, float %497, i64 2, !dbg !82
  %898 = insertelement <4 x float> %897, float %498, i64 3, !dbg !82
  %899 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %687, <4 x float> %898, i32 4, i32 0, i32 2, i32 %696, i32 1, i32 2139062143), !dbg !82
  %900 = extractelement <4 x float> %899, i64 0, !dbg !82
  %901 = extractelement <4 x float> %899, i64 1, !dbg !82
  %902 = extractelement <4 x float> %899, i64 2, !dbg !82
  %903 = extractelement <4 x float> %899, i64 3, !dbg !82
  %904 = insertelement <4 x float> poison, float %499, i64 0, !dbg !82
  %905 = insertelement <4 x float> %904, float %500, i64 1, !dbg !82
  %906 = insertelement <4 x float> %905, float %501, i64 2, !dbg !82
  %907 = insertelement <4 x float> %906, float %502, i64 3, !dbg !82
  %908 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %687, <4 x float> %907, i32 4, i32 0, i32 3, i32 %696, i32 1, i32 2139062143), !dbg !82
  %909 = extractelement <4 x float> %908, i64 0, !dbg !82
  %910 = extractelement <4 x float> %908, i64 1, !dbg !82
  %911 = extractelement <4 x float> %908, i64 2, !dbg !82
  %912 = extractelement <4 x float> %908, i64 3, !dbg !82
  %913 = insertelement <4 x float> poison, float %503, i64 0, !dbg !82
  %914 = insertelement <4 x float> %913, float %504, i64 1, !dbg !82
  %915 = insertelement <4 x float> %914, float %505, i64 2, !dbg !82
  %916 = insertelement <4 x float> %915, float %506, i64 3, !dbg !82
  %917 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %689, <4 x float> %916, i32 4, i32 0, i32 0, i32 %696, i32 2, i32 2139062143), !dbg !82
  %918 = extractelement <4 x float> %917, i64 0, !dbg !82
  %919 = extractelement <4 x float> %917, i64 1, !dbg !82
  %920 = extractelement <4 x float> %917, i64 2, !dbg !82
  %921 = extractelement <4 x float> %917, i64 3, !dbg !82
  %922 = insertelement <4 x float> poison, float %507, i64 0, !dbg !82
  %923 = insertelement <4 x float> %922, float %508, i64 1, !dbg !82
  %924 = insertelement <4 x float> %923, float %509, i64 2, !dbg !82
  %925 = insertelement <4 x float> %924, float %510, i64 3, !dbg !82
  %926 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %689, <4 x float> %925, i32 4, i32 0, i32 1, i32 %696, i32 2, i32 2139062143), !dbg !82
  %927 = extractelement <4 x float> %926, i64 0, !dbg !82
  %928 = extractelement <4 x float> %926, i64 1, !dbg !82
  %929 = extractelement <4 x float> %926, i64 2, !dbg !82
  %930 = extractelement <4 x float> %926, i64 3, !dbg !82
  %931 = insertelement <4 x float> poison, float %511, i64 0, !dbg !82
  %932 = insertelement <4 x float> %931, float %512, i64 1, !dbg !82
  %933 = insertelement <4 x float> %932, float %513, i64 2, !dbg !82
  %934 = insertelement <4 x float> %933, float %514, i64 3, !dbg !82
  %935 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %669, <8 x i32> %691, <4 x float> %934, i32 4, i32 0, i32 0, i32 %696, i32 3, i32 2139062143), !dbg !82
  %936 = extractelement <4 x float> %935, i64 0, !dbg !82
  %937 = extractelement <4 x float> %935, i64 1, !dbg !82
  %938 = extractelement <4 x float> %935, i64 2, !dbg !82
  %939 = extractelement <4 x float> %935, i64 3, !dbg !82
  %940 = insertelement <4 x float> poison, float %515, i64 0, !dbg !82
  %941 = insertelement <4 x float> %940, float %516, i64 1, !dbg !82
  %942 = insertelement <4 x float> %941, float %517, i64 2, !dbg !82
  %943 = insertelement <4 x float> %942, float %518, i64 3, !dbg !82
  %944 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %671, <8 x i32> %691, <4 x float> %943, i32 4, i32 0, i32 1, i32 %696, i32 3, i32 2139062143), !dbg !82
  %945 = extractelement <4 x float> %944, i64 0, !dbg !82
  %946 = extractelement <4 x float> %944, i64 1, !dbg !82
  %947 = extractelement <4 x float> %944, i64 2, !dbg !82
  %948 = extractelement <4 x float> %944, i64 3, !dbg !82
  %949 = insertelement <4 x float> poison, float %519, i64 0, !dbg !82
  %950 = insertelement <4 x float> %949, float %520, i64 1, !dbg !82
  %951 = insertelement <4 x float> %950, float %521, i64 2, !dbg !82
  %952 = insertelement <4 x float> %951, float %522, i64 3, !dbg !82
  %953 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %689, <4 x float> %952, i32 4, i32 0, i32 2, i32 %696, i32 2, i32 2139062143), !dbg !82
  %954 = extractelement <4 x float> %953, i64 0, !dbg !82
  %955 = extractelement <4 x float> %953, i64 1, !dbg !82
  %956 = extractelement <4 x float> %953, i64 2, !dbg !82
  %957 = extractelement <4 x float> %953, i64 3, !dbg !82
  %958 = insertelement <4 x float> poison, float %523, i64 0, !dbg !82
  %959 = insertelement <4 x float> %958, float %524, i64 1, !dbg !82
  %960 = insertelement <4 x float> %959, float %525, i64 2, !dbg !82
  %961 = insertelement <4 x float> %960, float %526, i64 3, !dbg !82
  %962 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %689, <4 x float> %961, i32 4, i32 0, i32 3, i32 %696, i32 2, i32 2139062143), !dbg !82
  %963 = extractelement <4 x float> %962, i64 0, !dbg !82
  %964 = extractelement <4 x float> %962, i64 1, !dbg !82
  %965 = extractelement <4 x float> %962, i64 2, !dbg !82
  %966 = extractelement <4 x float> %962, i64 3, !dbg !82
  %967 = insertelement <4 x float> poison, float %527, i64 0, !dbg !82
  %968 = insertelement <4 x float> %967, float %528, i64 1, !dbg !82
  %969 = insertelement <4 x float> %968, float %529, i64 2, !dbg !82
  %970 = insertelement <4 x float> %969, float %530, i64 3, !dbg !82
  %971 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %673, <8 x i32> %691, <4 x float> %970, i32 4, i32 0, i32 2, i32 %696, i32 3, i32 2139062143), !dbg !82
  %972 = extractelement <4 x float> %971, i64 0, !dbg !82
  %973 = extractelement <4 x float> %971, i64 1, !dbg !82
  %974 = extractelement <4 x float> %971, i64 2, !dbg !82
  %975 = extractelement <4 x float> %971, i64 3, !dbg !82
  %976 = insertelement <4 x float> poison, float %531, i64 0, !dbg !82
  %977 = insertelement <4 x float> %976, float %532, i64 1, !dbg !82
  %978 = insertelement <4 x float> %977, float %533, i64 2, !dbg !82
  %979 = insertelement <4 x float> %978, float %534, i64 3, !dbg !82
  %980 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %675, <8 x i32> %691, <4 x float> %979, i32 4, i32 0, i32 3, i32 %696, i32 3, i32 2139062143), !dbg !82
  %981 = extractelement <4 x float> %980, i64 0, !dbg !82
  %982 = extractelement <4 x float> %980, i64 1, !dbg !82
  %983 = extractelement <4 x float> %980, i64 2, !dbg !82
  %984 = extractelement <4 x float> %980, i64 3, !dbg !82
  %985 = add nuw nsw i64 %535, 128, !dbg !75
  tail call void @llvm.amdgcn.iglp.opt(i32 0), !dbg !82
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !82
  %986 = icmp slt i64 %985, %366, !dbg !75
  br i1 %986, label %400, label %._crit_edge, !dbg !75

._crit_edge:                                      ; preds = %400
  %987 = bitcast i16 %632 to <2 x i8>
  %988 = extractelement <2 x i8> %987, i64 0
  %989 = extractelement <2 x i8> %987, i64 1
  br label %990, !dbg !75

990:                                              ; preds = %._crit_edge, %369
  %991 = phi float [ %702, %._crit_edge ], [ 0.000000e+00, %369 ]
  %992 = phi float [ %703, %._crit_edge ], [ 0.000000e+00, %369 ]
  %993 = phi float [ %704, %._crit_edge ], [ 0.000000e+00, %369 ]
  %994 = phi float [ %705, %._crit_edge ], [ 0.000000e+00, %369 ]
  %995 = phi float [ %711, %._crit_edge ], [ 0.000000e+00, %369 ]
  %996 = phi float [ %712, %._crit_edge ], [ 0.000000e+00, %369 ]
  %997 = phi float [ %713, %._crit_edge ], [ 0.000000e+00, %369 ]
  %998 = phi float [ %714, %._crit_edge ], [ 0.000000e+00, %369 ]
  %999 = phi float [ %720, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1000 = phi float [ %721, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1001 = phi float [ %722, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1002 = phi float [ %723, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1003 = phi float [ %729, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1004 = phi float [ %730, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1005 = phi float [ %731, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1006 = phi float [ %732, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1007 = phi float [ %738, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1008 = phi float [ %739, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1009 = phi float [ %740, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1010 = phi float [ %741, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1011 = phi float [ %747, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1012 = phi float [ %748, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1013 = phi float [ %749, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1014 = phi float [ %750, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1015 = phi float [ %756, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1016 = phi float [ %757, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1017 = phi float [ %758, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1018 = phi float [ %759, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1019 = phi float [ %765, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1020 = phi float [ %766, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1021 = phi float [ %767, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1022 = phi float [ %768, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1023 = phi float [ %774, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1024 = phi float [ %775, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1025 = phi float [ %776, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1026 = phi float [ %777, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1027 = phi float [ %783, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1028 = phi float [ %784, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1029 = phi float [ %785, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1030 = phi float [ %786, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1031 = phi float [ %792, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1032 = phi float [ %793, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1033 = phi float [ %794, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1034 = phi float [ %795, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1035 = phi float [ %801, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1036 = phi float [ %802, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1037 = phi float [ %803, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1038 = phi float [ %804, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1039 = phi float [ %810, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1040 = phi float [ %811, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1041 = phi float [ %812, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1042 = phi float [ %813, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1043 = phi float [ %819, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1044 = phi float [ %820, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1045 = phi float [ %821, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1046 = phi float [ %822, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1047 = phi float [ %828, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1048 = phi float [ %829, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1049 = phi float [ %830, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1050 = phi float [ %831, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1051 = phi float [ %837, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1052 = phi float [ %838, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1053 = phi float [ %839, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1054 = phi float [ %840, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1055 = phi float [ %846, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1056 = phi float [ %847, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1057 = phi float [ %848, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1058 = phi float [ %849, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1059 = phi float [ %855, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1060 = phi float [ %856, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1061 = phi float [ %857, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1062 = phi float [ %858, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1063 = phi float [ %864, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1064 = phi float [ %865, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1065 = phi float [ %866, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1066 = phi float [ %867, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1067 = phi float [ %873, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1068 = phi float [ %874, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1069 = phi float [ %875, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1070 = phi float [ %876, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1071 = phi float [ %882, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1072 = phi float [ %883, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1073 = phi float [ %884, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1074 = phi float [ %885, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1075 = phi float [ %891, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1076 = phi float [ %892, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1077 = phi float [ %893, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1078 = phi float [ %894, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1079 = phi float [ %900, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1080 = phi float [ %901, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1081 = phi float [ %902, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1082 = phi float [ %903, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1083 = phi float [ %909, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1084 = phi float [ %910, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1085 = phi float [ %911, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1086 = phi float [ %912, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1087 = phi float [ %918, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1088 = phi float [ %919, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1089 = phi float [ %920, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1090 = phi float [ %921, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1091 = phi float [ %927, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1092 = phi float [ %928, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1093 = phi float [ %929, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1094 = phi float [ %930, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1095 = phi float [ %936, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1096 = phi float [ %937, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1097 = phi float [ %938, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1098 = phi float [ %939, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1099 = phi float [ %945, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1100 = phi float [ %946, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1101 = phi float [ %947, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1102 = phi float [ %948, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1103 = phi float [ %954, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1104 = phi float [ %955, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1105 = phi float [ %956, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1106 = phi float [ %957, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1107 = phi float [ %963, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1108 = phi float [ %964, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1109 = phi float [ %965, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1110 = phi float [ %966, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1111 = phi float [ %972, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1112 = phi float [ %973, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1113 = phi float [ %974, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1114 = phi float [ %975, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1115 = phi float [ %981, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1116 = phi float [ %982, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1117 = phi float [ %983, %._crit_edge ], [ 0.000000e+00, %369 ]
  %1118 = phi float [ %984, %._crit_edge ], [ 0.000000e+00, %369 ]
  %.lcssa62 = phi ptr addrspace(3) [ %543, %._crit_edge ], [ @global_smem, %369 ], !dbg !76
  %.lcssa = phi ptr addrspace(3) [ %618, %._crit_edge ], [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), %369 ], !dbg !80
  %.pn26.lcssa = phi i8 [ %988, %._crit_edge ], [ %364, %369 ]
  %.pn24.lcssa = phi i8 [ %989, %._crit_edge ], [ %365, %369 ]
  br i1 %367, label %1119, label %1120, !dbg !75

1119:                                             ; preds = %990
  tail call void @llvm.amdgcn.s.barrier(), !dbg !75
  br label %1120, !dbg !75

1120:                                             ; preds = %1119, %990
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49168), !dbg !76
  fence syncscope("workgroup") release, !dbg !76
  tail call void @llvm.amdgcn.s.barrier(), !dbg !76
  fence syncscope("workgroup") acquire, !dbg !76
  %1121 = shl nuw nsw i32 %77, 3, !dbg !76
  %1122 = and i32 %1121, 48, !dbg !76
  %1123 = shl nuw nsw i32 %79, 3, !dbg !76
  %1124 = or disjoint i32 %1122, %1123, !dbg !76
  %1125 = and i32 %77, 15, !dbg !76
  %and.ra = and i32 %77, 48, !dbg !76
  %1126 = xor i32 %1124, %and.ra, !dbg !76
  %1127 = or disjoint i32 %92, %1125, !dbg !76
  %1128 = shl nuw nsw i32 %1127, 7, !dbg !76
  %1129 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa62, i32 %1126, !dbg !76
  %1130 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1128, !dbg !76
  %1131 = load <16 x i8>, ptr addrspace(3) %1130, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1132 = or disjoint i32 %1122, 64, !dbg !76
  %1133 = or disjoint i32 %1123, %and.ra, !dbg !76
  %1134 = xor i32 %1133, %1132, !dbg !76
  %1135 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa62, i32 %1134, !dbg !76
  %1136 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1128, !dbg !76
  %1137 = load <16 x i8>, ptr addrspace(3) %1136, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1138 = or disjoint i32 %1125, 16, !dbg !76
  %1139 = or disjoint i32 %1138, %92, !dbg !76
  %1140 = shl nuw nsw i32 %1139, 7, !dbg !76
  %1141 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1140, !dbg !76
  %1142 = load <16 x i8>, ptr addrspace(3) %1141, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1143 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1140, !dbg !76
  %1144 = load <16 x i8>, ptr addrspace(3) %1143, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1145 = or disjoint i32 %1128, 8192, !dbg !76
  %1146 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1145, !dbg !76
  %1147 = load <16 x i8>, ptr addrspace(3) %1146, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1148 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1145, !dbg !76
  %1149 = load <16 x i8>, ptr addrspace(3) %1148, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1150 = or disjoint i32 %1128, 10240, !dbg !76
  %1151 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1150, !dbg !76
  %1152 = load <16 x i8>, ptr addrspace(3) %1151, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1153 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1150, !dbg !76
  %1154 = load <16 x i8>, ptr addrspace(3) %1153, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1155 = or disjoint i32 %1125, 128, !dbg !76
  %1156 = or disjoint i32 %1155, %92, !dbg !76
  %1157 = shl nuw nsw i32 %1156, 7, !dbg !76
  %1158 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1157, !dbg !76
  %1159 = load <16 x i8>, ptr addrspace(3) %1158, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1160 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1157, !dbg !76
  %1161 = load <16 x i8>, ptr addrspace(3) %1160, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1162 = or disjoint i32 %1125, 144, !dbg !76
  %1163 = or disjoint i32 %1162, %92, !dbg !76
  %1164 = shl nuw nsw i32 %1163, 7, !dbg !76
  %1165 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1164, !dbg !76
  %1166 = load <16 x i8>, ptr addrspace(3) %1165, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1167 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1164, !dbg !76
  %1168 = load <16 x i8>, ptr addrspace(3) %1167, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1169 = or disjoint i32 %1128, 24576, !dbg !76
  %1170 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1169, !dbg !76
  %1171 = load <16 x i8>, ptr addrspace(3) %1170, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1172 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1169, !dbg !76
  %1173 = load <16 x i8>, ptr addrspace(3) %1172, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1174 = or disjoint i32 %1128, 26624, !dbg !76
  %1175 = getelementptr inbounds nuw i8, ptr addrspace(3) %1129, i32 %1174, !dbg !76
  %1176 = load <16 x i8>, ptr addrspace(3) %1175, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1177 = getelementptr inbounds nuw i8, ptr addrspace(3) %1135, i32 %1174, !dbg !76
  %1178 = load <16 x i8>, ptr addrspace(3) %1177, align 16, !dbg !76, !alias.scope !86, !noalias !77
  %1179 = or disjoint i32 %162, %163, !dbg !80
  %1180 = xor i32 %1179, %and.ra, !dbg !80
  %1181 = or disjoint i32 %1125, %110, !dbg !80
  %1182 = or disjoint i32 %1181, %111, !dbg !80
  %1183 = shl nuw nsw i32 %1182, 6, !dbg !80
  %1184 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa, i32 %1180, !dbg !80
  %1185 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1183, !dbg !80
  %1186 = load <4 x i32>, ptr addrspace(3) %1185, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %1187 = or disjoint i32 %1138, %110, !dbg !80
  %1188 = or disjoint i32 %1187, %111, !dbg !80
  %1189 = shl nuw nsw i32 %1188, 6, !dbg !80
  %1190 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1189, !dbg !80
  %1191 = load <4 x i32>, ptr addrspace(3) %1190, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %1192 = or disjoint i32 %1155, %110, !dbg !80
  %1193 = or disjoint i32 %1192, %111, !dbg !80
  %1194 = shl nuw nsw i32 %1193, 6, !dbg !80
  %1195 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1194, !dbg !80
  %1196 = load <4 x i32>, ptr addrspace(3) %1195, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %1197 = or disjoint i32 %1162, %110, !dbg !80
  %1198 = or disjoint i32 %1197, %111, !dbg !80
  %1199 = shl nuw nsw i32 %1198, 6, !dbg !80
  %1200 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1199, !dbg !80
  %1201 = load <4 x i32>, ptr addrspace(3) %1200, align 16, !dbg !80, !alias.scope !86, !noalias !77
  %1202 = and i32 %166, 1022, !dbg !88
  %1203 = and i32 %166, 1020, !dbg !88
  %1204 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %1203, !dbg !88
  %1205 = getelementptr inbounds nuw i8, ptr addrspace(3) %1204, i32 %1202, !dbg !88
  %1206 = insertelement <2 x i8> poison, i8 %.pn26.lcssa, i64 0, !dbg !88
  %1207 = insertelement <2 x i8> %1206, i8 %.pn24.lcssa, i64 1, !dbg !88
  store <2 x i8> %1207, ptr addrspace(3) %1205, align 2, !dbg !88
  fence syncscope("workgroup") release, !dbg !88
  tail call void @llvm.amdgcn.s.barrier(), !dbg !88
  fence syncscope("workgroup") acquire, !dbg !88
  br i1 %216, label %1208, label %._crit_edge89, !dbg !82

1208:                                             ; preds = %1120
  %1209 = and i32 %161, 896, !dbg !88
  %1210 = or disjoint i32 %165, %1209, !dbg !88
  %1211 = shl nuw nsw i32 %1210, 1, !dbg !88
  %1212 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %1211, !dbg !88
  %1213 = load i32, ptr addrspace(3) %1212, align 8, !dbg !88
  %1214 = extractelement <16 x i8> %1178, i64 15, !dbg !76
  %1215 = extractelement <16 x i8> %1178, i64 14, !dbg !76
  %1216 = extractelement <16 x i8> %1178, i64 13, !dbg !76
  %1217 = extractelement <16 x i8> %1178, i64 12, !dbg !76
  %1218 = extractelement <16 x i8> %1178, i64 11, !dbg !76
  %1219 = extractelement <16 x i8> %1178, i64 10, !dbg !76
  %1220 = extractelement <16 x i8> %1178, i64 9, !dbg !76
  %1221 = extractelement <16 x i8> %1178, i64 8, !dbg !76
  %1222 = extractelement <16 x i8> %1178, i64 7, !dbg !76
  %1223 = extractelement <16 x i8> %1178, i64 6, !dbg !76
  %1224 = extractelement <16 x i8> %1178, i64 5, !dbg !76
  %1225 = extractelement <16 x i8> %1178, i64 4, !dbg !76
  %1226 = extractelement <16 x i8> %1178, i64 3, !dbg !76
  %1227 = extractelement <16 x i8> %1178, i64 2, !dbg !76
  %1228 = extractelement <16 x i8> %1178, i64 1, !dbg !76
  %1229 = extractelement <16 x i8> %1178, i64 0, !dbg !76
  %1230 = extractelement <16 x i8> %1176, i64 15, !dbg !76
  %1231 = extractelement <16 x i8> %1176, i64 14, !dbg !76
  %1232 = extractelement <16 x i8> %1176, i64 13, !dbg !76
  %1233 = extractelement <16 x i8> %1176, i64 12, !dbg !76
  %1234 = extractelement <16 x i8> %1176, i64 11, !dbg !76
  %1235 = extractelement <16 x i8> %1176, i64 10, !dbg !76
  %1236 = extractelement <16 x i8> %1176, i64 9, !dbg !76
  %1237 = extractelement <16 x i8> %1176, i64 8, !dbg !76
  %1238 = extractelement <16 x i8> %1176, i64 7, !dbg !76
  %1239 = extractelement <16 x i8> %1176, i64 6, !dbg !76
  %1240 = extractelement <16 x i8> %1176, i64 5, !dbg !76
  %1241 = extractelement <16 x i8> %1176, i64 4, !dbg !76
  %1242 = extractelement <16 x i8> %1176, i64 3, !dbg !76
  %1243 = extractelement <16 x i8> %1176, i64 2, !dbg !76
  %1244 = extractelement <16 x i8> %1176, i64 1, !dbg !76
  %1245 = extractelement <16 x i8> %1176, i64 0, !dbg !76
  %1246 = extractelement <16 x i8> %1173, i64 15, !dbg !76
  %1247 = extractelement <16 x i8> %1173, i64 14, !dbg !76
  %1248 = extractelement <16 x i8> %1173, i64 13, !dbg !76
  %1249 = extractelement <16 x i8> %1173, i64 12, !dbg !76
  %1250 = extractelement <16 x i8> %1173, i64 11, !dbg !76
  %1251 = extractelement <16 x i8> %1173, i64 10, !dbg !76
  %1252 = extractelement <16 x i8> %1173, i64 9, !dbg !76
  %1253 = extractelement <16 x i8> %1173, i64 8, !dbg !76
  %1254 = extractelement <16 x i8> %1173, i64 7, !dbg !76
  %1255 = extractelement <16 x i8> %1173, i64 6, !dbg !76
  %1256 = extractelement <16 x i8> %1173, i64 5, !dbg !76
  %1257 = extractelement <16 x i8> %1173, i64 4, !dbg !76
  %1258 = extractelement <16 x i8> %1173, i64 3, !dbg !76
  %1259 = extractelement <16 x i8> %1173, i64 2, !dbg !76
  %1260 = extractelement <16 x i8> %1173, i64 1, !dbg !76
  %1261 = extractelement <16 x i8> %1173, i64 0, !dbg !76
  %1262 = extractelement <16 x i8> %1171, i64 15, !dbg !76
  %1263 = extractelement <16 x i8> %1171, i64 14, !dbg !76
  %1264 = extractelement <16 x i8> %1171, i64 13, !dbg !76
  %1265 = extractelement <16 x i8> %1171, i64 12, !dbg !76
  %1266 = extractelement <16 x i8> %1171, i64 11, !dbg !76
  %1267 = extractelement <16 x i8> %1171, i64 10, !dbg !76
  %1268 = extractelement <16 x i8> %1171, i64 9, !dbg !76
  %1269 = extractelement <16 x i8> %1171, i64 8, !dbg !76
  %1270 = extractelement <16 x i8> %1171, i64 7, !dbg !76
  %1271 = extractelement <16 x i8> %1171, i64 6, !dbg !76
  %1272 = extractelement <16 x i8> %1171, i64 5, !dbg !76
  %1273 = extractelement <16 x i8> %1171, i64 4, !dbg !76
  %1274 = extractelement <16 x i8> %1171, i64 3, !dbg !76
  %1275 = extractelement <16 x i8> %1171, i64 2, !dbg !76
  %1276 = extractelement <16 x i8> %1171, i64 1, !dbg !76
  %1277 = extractelement <16 x i8> %1171, i64 0, !dbg !76
  %1278 = extractelement <16 x i8> %1168, i64 15, !dbg !76
  %1279 = extractelement <16 x i8> %1168, i64 14, !dbg !76
  %1280 = extractelement <16 x i8> %1168, i64 13, !dbg !76
  %1281 = extractelement <16 x i8> %1168, i64 12, !dbg !76
  %1282 = extractelement <16 x i8> %1168, i64 11, !dbg !76
  %1283 = extractelement <16 x i8> %1168, i64 10, !dbg !76
  %1284 = extractelement <16 x i8> %1168, i64 9, !dbg !76
  %1285 = extractelement <16 x i8> %1168, i64 8, !dbg !76
  %1286 = extractelement <16 x i8> %1168, i64 7, !dbg !76
  %1287 = extractelement <16 x i8> %1168, i64 6, !dbg !76
  %1288 = extractelement <16 x i8> %1168, i64 5, !dbg !76
  %1289 = extractelement <16 x i8> %1168, i64 4, !dbg !76
  %1290 = extractelement <16 x i8> %1168, i64 3, !dbg !76
  %1291 = extractelement <16 x i8> %1168, i64 2, !dbg !76
  %1292 = extractelement <16 x i8> %1168, i64 1, !dbg !76
  %1293 = extractelement <16 x i8> %1168, i64 0, !dbg !76
  %1294 = extractelement <16 x i8> %1166, i64 15, !dbg !76
  %1295 = extractelement <16 x i8> %1166, i64 14, !dbg !76
  %1296 = extractelement <16 x i8> %1166, i64 13, !dbg !76
  %1297 = extractelement <16 x i8> %1166, i64 12, !dbg !76
  %1298 = extractelement <16 x i8> %1166, i64 11, !dbg !76
  %1299 = extractelement <16 x i8> %1166, i64 10, !dbg !76
  %1300 = extractelement <16 x i8> %1166, i64 9, !dbg !76
  %1301 = extractelement <16 x i8> %1166, i64 8, !dbg !76
  %1302 = extractelement <16 x i8> %1166, i64 7, !dbg !76
  %1303 = extractelement <16 x i8> %1166, i64 6, !dbg !76
  %1304 = extractelement <16 x i8> %1166, i64 5, !dbg !76
  %1305 = extractelement <16 x i8> %1166, i64 4, !dbg !76
  %1306 = extractelement <16 x i8> %1166, i64 3, !dbg !76
  %1307 = extractelement <16 x i8> %1166, i64 2, !dbg !76
  %1308 = extractelement <16 x i8> %1166, i64 1, !dbg !76
  %1309 = extractelement <16 x i8> %1166, i64 0, !dbg !76
  %1310 = extractelement <16 x i8> %1161, i64 15, !dbg !76
  %1311 = extractelement <16 x i8> %1161, i64 14, !dbg !76
  %1312 = extractelement <16 x i8> %1161, i64 13, !dbg !76
  %1313 = extractelement <16 x i8> %1161, i64 12, !dbg !76
  %1314 = extractelement <16 x i8> %1161, i64 11, !dbg !76
  %1315 = extractelement <16 x i8> %1161, i64 10, !dbg !76
  %1316 = extractelement <16 x i8> %1161, i64 9, !dbg !76
  %1317 = extractelement <16 x i8> %1161, i64 8, !dbg !76
  %1318 = extractelement <16 x i8> %1161, i64 7, !dbg !76
  %1319 = extractelement <16 x i8> %1161, i64 6, !dbg !76
  %1320 = extractelement <16 x i8> %1161, i64 5, !dbg !76
  %1321 = extractelement <16 x i8> %1161, i64 4, !dbg !76
  %1322 = extractelement <16 x i8> %1161, i64 3, !dbg !76
  %1323 = extractelement <16 x i8> %1161, i64 2, !dbg !76
  %1324 = extractelement <16 x i8> %1161, i64 1, !dbg !76
  %1325 = extractelement <16 x i8> %1161, i64 0, !dbg !76
  %1326 = extractelement <16 x i8> %1159, i64 15, !dbg !76
  %1327 = extractelement <16 x i8> %1159, i64 14, !dbg !76
  %1328 = extractelement <16 x i8> %1159, i64 13, !dbg !76
  %1329 = extractelement <16 x i8> %1159, i64 12, !dbg !76
  %1330 = extractelement <16 x i8> %1159, i64 11, !dbg !76
  %1331 = extractelement <16 x i8> %1159, i64 10, !dbg !76
  %1332 = extractelement <16 x i8> %1159, i64 9, !dbg !76
  %1333 = extractelement <16 x i8> %1159, i64 8, !dbg !76
  %1334 = extractelement <16 x i8> %1159, i64 7, !dbg !76
  %1335 = extractelement <16 x i8> %1159, i64 6, !dbg !76
  %1336 = extractelement <16 x i8> %1159, i64 5, !dbg !76
  %1337 = extractelement <16 x i8> %1159, i64 4, !dbg !76
  %1338 = extractelement <16 x i8> %1159, i64 3, !dbg !76
  %1339 = extractelement <16 x i8> %1159, i64 2, !dbg !76
  %1340 = extractelement <16 x i8> %1159, i64 1, !dbg !76
  %1341 = extractelement <16 x i8> %1159, i64 0, !dbg !76
  %1342 = extractelement <16 x i8> %1154, i64 15, !dbg !76
  %1343 = extractelement <16 x i8> %1154, i64 14, !dbg !76
  %1344 = extractelement <16 x i8> %1154, i64 13, !dbg !76
  %1345 = extractelement <16 x i8> %1154, i64 12, !dbg !76
  %1346 = extractelement <16 x i8> %1154, i64 11, !dbg !76
  %1347 = extractelement <16 x i8> %1154, i64 10, !dbg !76
  %1348 = extractelement <16 x i8> %1154, i64 9, !dbg !76
  %1349 = extractelement <16 x i8> %1154, i64 8, !dbg !76
  %1350 = extractelement <16 x i8> %1154, i64 7, !dbg !76
  %1351 = extractelement <16 x i8> %1154, i64 6, !dbg !76
  %1352 = extractelement <16 x i8> %1154, i64 5, !dbg !76
  %1353 = extractelement <16 x i8> %1154, i64 4, !dbg !76
  %1354 = extractelement <16 x i8> %1154, i64 3, !dbg !76
  %1355 = extractelement <16 x i8> %1154, i64 2, !dbg !76
  %1356 = extractelement <16 x i8> %1154, i64 1, !dbg !76
  %1357 = extractelement <16 x i8> %1154, i64 0, !dbg !76
  %1358 = extractelement <16 x i8> %1152, i64 15, !dbg !76
  %1359 = extractelement <16 x i8> %1152, i64 14, !dbg !76
  %1360 = extractelement <16 x i8> %1152, i64 13, !dbg !76
  %1361 = extractelement <16 x i8> %1152, i64 12, !dbg !76
  %1362 = extractelement <16 x i8> %1152, i64 11, !dbg !76
  %1363 = extractelement <16 x i8> %1152, i64 10, !dbg !76
  %1364 = extractelement <16 x i8> %1152, i64 9, !dbg !76
  %1365 = extractelement <16 x i8> %1152, i64 8, !dbg !76
  %1366 = extractelement <16 x i8> %1152, i64 7, !dbg !76
  %1367 = extractelement <16 x i8> %1152, i64 6, !dbg !76
  %1368 = extractelement <16 x i8> %1152, i64 5, !dbg !76
  %1369 = extractelement <16 x i8> %1152, i64 4, !dbg !76
  %1370 = extractelement <16 x i8> %1152, i64 3, !dbg !76
  %1371 = extractelement <16 x i8> %1152, i64 2, !dbg !76
  %1372 = extractelement <16 x i8> %1152, i64 1, !dbg !76
  %1373 = extractelement <16 x i8> %1152, i64 0, !dbg !76
  %1374 = extractelement <16 x i8> %1149, i64 15, !dbg !76
  %1375 = extractelement <16 x i8> %1149, i64 14, !dbg !76
  %1376 = extractelement <16 x i8> %1149, i64 13, !dbg !76
  %1377 = extractelement <16 x i8> %1149, i64 12, !dbg !76
  %1378 = extractelement <16 x i8> %1149, i64 11, !dbg !76
  %1379 = extractelement <16 x i8> %1149, i64 10, !dbg !76
  %1380 = extractelement <16 x i8> %1149, i64 9, !dbg !76
  %1381 = extractelement <16 x i8> %1149, i64 8, !dbg !76
  %1382 = extractelement <16 x i8> %1149, i64 7, !dbg !76
  %1383 = extractelement <16 x i8> %1149, i64 6, !dbg !76
  %1384 = extractelement <16 x i8> %1149, i64 5, !dbg !76
  %1385 = extractelement <16 x i8> %1149, i64 4, !dbg !76
  %1386 = extractelement <16 x i8> %1149, i64 3, !dbg !76
  %1387 = extractelement <16 x i8> %1149, i64 2, !dbg !76
  %1388 = extractelement <16 x i8> %1149, i64 1, !dbg !76
  %1389 = extractelement <16 x i8> %1149, i64 0, !dbg !76
  %1390 = extractelement <16 x i8> %1147, i64 15, !dbg !76
  %1391 = extractelement <16 x i8> %1147, i64 14, !dbg !76
  %1392 = extractelement <16 x i8> %1147, i64 13, !dbg !76
  %1393 = extractelement <16 x i8> %1147, i64 12, !dbg !76
  %1394 = extractelement <16 x i8> %1147, i64 11, !dbg !76
  %1395 = extractelement <16 x i8> %1147, i64 10, !dbg !76
  %1396 = extractelement <16 x i8> %1147, i64 9, !dbg !76
  %1397 = extractelement <16 x i8> %1147, i64 8, !dbg !76
  %1398 = extractelement <16 x i8> %1147, i64 7, !dbg !76
  %1399 = extractelement <16 x i8> %1147, i64 6, !dbg !76
  %1400 = extractelement <16 x i8> %1147, i64 5, !dbg !76
  %1401 = extractelement <16 x i8> %1147, i64 4, !dbg !76
  %1402 = extractelement <16 x i8> %1147, i64 3, !dbg !76
  %1403 = extractelement <16 x i8> %1147, i64 2, !dbg !76
  %1404 = extractelement <16 x i8> %1147, i64 1, !dbg !76
  %1405 = extractelement <16 x i8> %1147, i64 0, !dbg !76
  %1406 = extractelement <16 x i8> %1144, i64 15, !dbg !76
  %1407 = extractelement <16 x i8> %1144, i64 14, !dbg !76
  %1408 = extractelement <16 x i8> %1144, i64 13, !dbg !76
  %1409 = extractelement <16 x i8> %1144, i64 12, !dbg !76
  %1410 = extractelement <16 x i8> %1144, i64 11, !dbg !76
  %1411 = extractelement <16 x i8> %1144, i64 10, !dbg !76
  %1412 = extractelement <16 x i8> %1144, i64 9, !dbg !76
  %1413 = extractelement <16 x i8> %1144, i64 8, !dbg !76
  %1414 = extractelement <16 x i8> %1144, i64 7, !dbg !76
  %1415 = extractelement <16 x i8> %1144, i64 6, !dbg !76
  %1416 = extractelement <16 x i8> %1144, i64 5, !dbg !76
  %1417 = extractelement <16 x i8> %1144, i64 4, !dbg !76
  %1418 = extractelement <16 x i8> %1144, i64 3, !dbg !76
  %1419 = extractelement <16 x i8> %1144, i64 2, !dbg !76
  %1420 = extractelement <16 x i8> %1144, i64 1, !dbg !76
  %1421 = extractelement <16 x i8> %1144, i64 0, !dbg !76
  %1422 = extractelement <16 x i8> %1142, i64 15, !dbg !76
  %1423 = extractelement <16 x i8> %1142, i64 14, !dbg !76
  %1424 = extractelement <16 x i8> %1142, i64 13, !dbg !76
  %1425 = extractelement <16 x i8> %1142, i64 12, !dbg !76
  %1426 = extractelement <16 x i8> %1142, i64 11, !dbg !76
  %1427 = extractelement <16 x i8> %1142, i64 10, !dbg !76
  %1428 = extractelement <16 x i8> %1142, i64 9, !dbg !76
  %1429 = extractelement <16 x i8> %1142, i64 8, !dbg !76
  %1430 = extractelement <16 x i8> %1142, i64 7, !dbg !76
  %1431 = extractelement <16 x i8> %1142, i64 6, !dbg !76
  %1432 = extractelement <16 x i8> %1142, i64 5, !dbg !76
  %1433 = extractelement <16 x i8> %1142, i64 4, !dbg !76
  %1434 = extractelement <16 x i8> %1142, i64 3, !dbg !76
  %1435 = extractelement <16 x i8> %1142, i64 2, !dbg !76
  %1436 = extractelement <16 x i8> %1142, i64 1, !dbg !76
  %1437 = extractelement <16 x i8> %1142, i64 0, !dbg !76
  %1438 = extractelement <16 x i8> %1137, i64 15, !dbg !76
  %1439 = extractelement <16 x i8> %1137, i64 14, !dbg !76
  %1440 = extractelement <16 x i8> %1137, i64 13, !dbg !76
  %1441 = extractelement <16 x i8> %1137, i64 12, !dbg !76
  %1442 = extractelement <16 x i8> %1137, i64 11, !dbg !76
  %1443 = extractelement <16 x i8> %1137, i64 10, !dbg !76
  %1444 = extractelement <16 x i8> %1137, i64 9, !dbg !76
  %1445 = extractelement <16 x i8> %1137, i64 8, !dbg !76
  %1446 = extractelement <16 x i8> %1137, i64 7, !dbg !76
  %1447 = extractelement <16 x i8> %1137, i64 6, !dbg !76
  %1448 = extractelement <16 x i8> %1137, i64 5, !dbg !76
  %1449 = extractelement <16 x i8> %1137, i64 4, !dbg !76
  %1450 = extractelement <16 x i8> %1137, i64 3, !dbg !76
  %1451 = extractelement <16 x i8> %1137, i64 2, !dbg !76
  %1452 = extractelement <16 x i8> %1137, i64 1, !dbg !76
  %1453 = extractelement <16 x i8> %1137, i64 0, !dbg !76
  %1454 = extractelement <16 x i8> %1131, i64 15, !dbg !76
  %1455 = extractelement <16 x i8> %1131, i64 14, !dbg !76
  %1456 = extractelement <16 x i8> %1131, i64 13, !dbg !76
  %1457 = extractelement <16 x i8> %1131, i64 12, !dbg !76
  %1458 = extractelement <16 x i8> %1131, i64 11, !dbg !76
  %1459 = extractelement <16 x i8> %1131, i64 10, !dbg !76
  %1460 = extractelement <16 x i8> %1131, i64 9, !dbg !76
  %1461 = extractelement <16 x i8> %1131, i64 8, !dbg !76
  %1462 = extractelement <16 x i8> %1131, i64 7, !dbg !76
  %1463 = extractelement <16 x i8> %1131, i64 6, !dbg !76
  %1464 = extractelement <16 x i8> %1131, i64 5, !dbg !76
  %1465 = extractelement <16 x i8> %1131, i64 4, !dbg !76
  %1466 = extractelement <16 x i8> %1131, i64 3, !dbg !76
  %1467 = extractelement <16 x i8> %1131, i64 2, !dbg !76
  %1468 = extractelement <16 x i8> %1131, i64 1, !dbg !76
  %1469 = extractelement <16 x i8> %1131, i64 0, !dbg !76
  %1470 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1469, i64 0, !dbg !82
  %1471 = insertelement <32 x i8> %1470, i8 %1468, i64 1, !dbg !82
  %1472 = insertelement <32 x i8> %1471, i8 %1467, i64 2, !dbg !82
  %1473 = insertelement <32 x i8> %1472, i8 %1466, i64 3, !dbg !82
  %1474 = insertelement <32 x i8> %1473, i8 %1465, i64 4, !dbg !82
  %1475 = insertelement <32 x i8> %1474, i8 %1464, i64 5, !dbg !82
  %1476 = insertelement <32 x i8> %1475, i8 %1463, i64 6, !dbg !82
  %1477 = insertelement <32 x i8> %1476, i8 %1462, i64 7, !dbg !82
  %1478 = insertelement <32 x i8> %1477, i8 %1461, i64 8, !dbg !82
  %1479 = insertelement <32 x i8> %1478, i8 %1460, i64 9, !dbg !82
  %1480 = insertelement <32 x i8> %1479, i8 %1459, i64 10, !dbg !82
  %1481 = insertelement <32 x i8> %1480, i8 %1458, i64 11, !dbg !82
  %1482 = insertelement <32 x i8> %1481, i8 %1457, i64 12, !dbg !82
  %1483 = insertelement <32 x i8> %1482, i8 %1456, i64 13, !dbg !82
  %1484 = insertelement <32 x i8> %1483, i8 %1455, i64 14, !dbg !82
  %1485 = insertelement <32 x i8> %1484, i8 %1454, i64 15, !dbg !82
  %1486 = insertelement <32 x i8> %1485, i8 %1453, i64 16, !dbg !82
  %1487 = insertelement <32 x i8> %1486, i8 %1452, i64 17, !dbg !82
  %1488 = insertelement <32 x i8> %1487, i8 %1451, i64 18, !dbg !82
  %1489 = insertelement <32 x i8> %1488, i8 %1450, i64 19, !dbg !82
  %1490 = insertelement <32 x i8> %1489, i8 %1449, i64 20, !dbg !82
  %1491 = insertelement <32 x i8> %1490, i8 %1448, i64 21, !dbg !82
  %1492 = insertelement <32 x i8> %1491, i8 %1447, i64 22, !dbg !82
  %1493 = insertelement <32 x i8> %1492, i8 %1446, i64 23, !dbg !82
  %1494 = insertelement <32 x i8> %1493, i8 %1445, i64 24, !dbg !82
  %1495 = insertelement <32 x i8> %1494, i8 %1444, i64 25, !dbg !82
  %1496 = insertelement <32 x i8> %1495, i8 %1443, i64 26, !dbg !82
  %1497 = insertelement <32 x i8> %1496, i8 %1442, i64 27, !dbg !82
  %1498 = insertelement <32 x i8> %1497, i8 %1441, i64 28, !dbg !82
  %1499 = insertelement <32 x i8> %1498, i8 %1440, i64 29, !dbg !82
  %1500 = insertelement <32 x i8> %1499, i8 %1439, i64 30, !dbg !82
  %1501 = insertelement <32 x i8> %1500, i8 %1438, i64 31, !dbg !82
  %1502 = bitcast <32 x i8> %1501 to <8 x i32>, !dbg !82
  %1503 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1437, i64 0, !dbg !82
  %1504 = insertelement <32 x i8> %1503, i8 %1436, i64 1, !dbg !82
  %1505 = insertelement <32 x i8> %1504, i8 %1435, i64 2, !dbg !82
  %1506 = insertelement <32 x i8> %1505, i8 %1434, i64 3, !dbg !82
  %1507 = insertelement <32 x i8> %1506, i8 %1433, i64 4, !dbg !82
  %1508 = insertelement <32 x i8> %1507, i8 %1432, i64 5, !dbg !82
  %1509 = insertelement <32 x i8> %1508, i8 %1431, i64 6, !dbg !82
  %1510 = insertelement <32 x i8> %1509, i8 %1430, i64 7, !dbg !82
  %1511 = insertelement <32 x i8> %1510, i8 %1429, i64 8, !dbg !82
  %1512 = insertelement <32 x i8> %1511, i8 %1428, i64 9, !dbg !82
  %1513 = insertelement <32 x i8> %1512, i8 %1427, i64 10, !dbg !82
  %1514 = insertelement <32 x i8> %1513, i8 %1426, i64 11, !dbg !82
  %1515 = insertelement <32 x i8> %1514, i8 %1425, i64 12, !dbg !82
  %1516 = insertelement <32 x i8> %1515, i8 %1424, i64 13, !dbg !82
  %1517 = insertelement <32 x i8> %1516, i8 %1423, i64 14, !dbg !82
  %1518 = insertelement <32 x i8> %1517, i8 %1422, i64 15, !dbg !82
  %1519 = insertelement <32 x i8> %1518, i8 %1421, i64 16, !dbg !82
  %1520 = insertelement <32 x i8> %1519, i8 %1420, i64 17, !dbg !82
  %1521 = insertelement <32 x i8> %1520, i8 %1419, i64 18, !dbg !82
  %1522 = insertelement <32 x i8> %1521, i8 %1418, i64 19, !dbg !82
  %1523 = insertelement <32 x i8> %1522, i8 %1417, i64 20, !dbg !82
  %1524 = insertelement <32 x i8> %1523, i8 %1416, i64 21, !dbg !82
  %1525 = insertelement <32 x i8> %1524, i8 %1415, i64 22, !dbg !82
  %1526 = insertelement <32 x i8> %1525, i8 %1414, i64 23, !dbg !82
  %1527 = insertelement <32 x i8> %1526, i8 %1413, i64 24, !dbg !82
  %1528 = insertelement <32 x i8> %1527, i8 %1412, i64 25, !dbg !82
  %1529 = insertelement <32 x i8> %1528, i8 %1411, i64 26, !dbg !82
  %1530 = insertelement <32 x i8> %1529, i8 %1410, i64 27, !dbg !82
  %1531 = insertelement <32 x i8> %1530, i8 %1409, i64 28, !dbg !82
  %1532 = insertelement <32 x i8> %1531, i8 %1408, i64 29, !dbg !82
  %1533 = insertelement <32 x i8> %1532, i8 %1407, i64 30, !dbg !82
  %1534 = insertelement <32 x i8> %1533, i8 %1406, i64 31, !dbg !82
  %1535 = bitcast <32 x i8> %1534 to <8 x i32>, !dbg !82
  %1536 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1405, i64 0, !dbg !82
  %1537 = insertelement <32 x i8> %1536, i8 %1404, i64 1, !dbg !82
  %1538 = insertelement <32 x i8> %1537, i8 %1403, i64 2, !dbg !82
  %1539 = insertelement <32 x i8> %1538, i8 %1402, i64 3, !dbg !82
  %1540 = insertelement <32 x i8> %1539, i8 %1401, i64 4, !dbg !82
  %1541 = insertelement <32 x i8> %1540, i8 %1400, i64 5, !dbg !82
  %1542 = insertelement <32 x i8> %1541, i8 %1399, i64 6, !dbg !82
  %1543 = insertelement <32 x i8> %1542, i8 %1398, i64 7, !dbg !82
  %1544 = insertelement <32 x i8> %1543, i8 %1397, i64 8, !dbg !82
  %1545 = insertelement <32 x i8> %1544, i8 %1396, i64 9, !dbg !82
  %1546 = insertelement <32 x i8> %1545, i8 %1395, i64 10, !dbg !82
  %1547 = insertelement <32 x i8> %1546, i8 %1394, i64 11, !dbg !82
  %1548 = insertelement <32 x i8> %1547, i8 %1393, i64 12, !dbg !82
  %1549 = insertelement <32 x i8> %1548, i8 %1392, i64 13, !dbg !82
  %1550 = insertelement <32 x i8> %1549, i8 %1391, i64 14, !dbg !82
  %1551 = insertelement <32 x i8> %1550, i8 %1390, i64 15, !dbg !82
  %1552 = insertelement <32 x i8> %1551, i8 %1389, i64 16, !dbg !82
  %1553 = insertelement <32 x i8> %1552, i8 %1388, i64 17, !dbg !82
  %1554 = insertelement <32 x i8> %1553, i8 %1387, i64 18, !dbg !82
  %1555 = insertelement <32 x i8> %1554, i8 %1386, i64 19, !dbg !82
  %1556 = insertelement <32 x i8> %1555, i8 %1385, i64 20, !dbg !82
  %1557 = insertelement <32 x i8> %1556, i8 %1384, i64 21, !dbg !82
  %1558 = insertelement <32 x i8> %1557, i8 %1383, i64 22, !dbg !82
  %1559 = insertelement <32 x i8> %1558, i8 %1382, i64 23, !dbg !82
  %1560 = insertelement <32 x i8> %1559, i8 %1381, i64 24, !dbg !82
  %1561 = insertelement <32 x i8> %1560, i8 %1380, i64 25, !dbg !82
  %1562 = insertelement <32 x i8> %1561, i8 %1379, i64 26, !dbg !82
  %1563 = insertelement <32 x i8> %1562, i8 %1378, i64 27, !dbg !82
  %1564 = insertelement <32 x i8> %1563, i8 %1377, i64 28, !dbg !82
  %1565 = insertelement <32 x i8> %1564, i8 %1376, i64 29, !dbg !82
  %1566 = insertelement <32 x i8> %1565, i8 %1375, i64 30, !dbg !82
  %1567 = insertelement <32 x i8> %1566, i8 %1374, i64 31, !dbg !82
  %1568 = bitcast <32 x i8> %1567 to <8 x i32>, !dbg !82
  %1569 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1373, i64 0, !dbg !82
  %1570 = insertelement <32 x i8> %1569, i8 %1372, i64 1, !dbg !82
  %1571 = insertelement <32 x i8> %1570, i8 %1371, i64 2, !dbg !82
  %1572 = insertelement <32 x i8> %1571, i8 %1370, i64 3, !dbg !82
  %1573 = insertelement <32 x i8> %1572, i8 %1369, i64 4, !dbg !82
  %1574 = insertelement <32 x i8> %1573, i8 %1368, i64 5, !dbg !82
  %1575 = insertelement <32 x i8> %1574, i8 %1367, i64 6, !dbg !82
  %1576 = insertelement <32 x i8> %1575, i8 %1366, i64 7, !dbg !82
  %1577 = insertelement <32 x i8> %1576, i8 %1365, i64 8, !dbg !82
  %1578 = insertelement <32 x i8> %1577, i8 %1364, i64 9, !dbg !82
  %1579 = insertelement <32 x i8> %1578, i8 %1363, i64 10, !dbg !82
  %1580 = insertelement <32 x i8> %1579, i8 %1362, i64 11, !dbg !82
  %1581 = insertelement <32 x i8> %1580, i8 %1361, i64 12, !dbg !82
  %1582 = insertelement <32 x i8> %1581, i8 %1360, i64 13, !dbg !82
  %1583 = insertelement <32 x i8> %1582, i8 %1359, i64 14, !dbg !82
  %1584 = insertelement <32 x i8> %1583, i8 %1358, i64 15, !dbg !82
  %1585 = insertelement <32 x i8> %1584, i8 %1357, i64 16, !dbg !82
  %1586 = insertelement <32 x i8> %1585, i8 %1356, i64 17, !dbg !82
  %1587 = insertelement <32 x i8> %1586, i8 %1355, i64 18, !dbg !82
  %1588 = insertelement <32 x i8> %1587, i8 %1354, i64 19, !dbg !82
  %1589 = insertelement <32 x i8> %1588, i8 %1353, i64 20, !dbg !82
  %1590 = insertelement <32 x i8> %1589, i8 %1352, i64 21, !dbg !82
  %1591 = insertelement <32 x i8> %1590, i8 %1351, i64 22, !dbg !82
  %1592 = insertelement <32 x i8> %1591, i8 %1350, i64 23, !dbg !82
  %1593 = insertelement <32 x i8> %1592, i8 %1349, i64 24, !dbg !82
  %1594 = insertelement <32 x i8> %1593, i8 %1348, i64 25, !dbg !82
  %1595 = insertelement <32 x i8> %1594, i8 %1347, i64 26, !dbg !82
  %1596 = insertelement <32 x i8> %1595, i8 %1346, i64 27, !dbg !82
  %1597 = insertelement <32 x i8> %1596, i8 %1345, i64 28, !dbg !82
  %1598 = insertelement <32 x i8> %1597, i8 %1344, i64 29, !dbg !82
  %1599 = insertelement <32 x i8> %1598, i8 %1343, i64 30, !dbg !82
  %1600 = insertelement <32 x i8> %1599, i8 %1342, i64 31, !dbg !82
  %1601 = bitcast <32 x i8> %1600 to <8 x i32>, !dbg !82
  %1602 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1341, i64 0, !dbg !82
  %1603 = insertelement <32 x i8> %1602, i8 %1340, i64 1, !dbg !82
  %1604 = insertelement <32 x i8> %1603, i8 %1339, i64 2, !dbg !82
  %1605 = insertelement <32 x i8> %1604, i8 %1338, i64 3, !dbg !82
  %1606 = insertelement <32 x i8> %1605, i8 %1337, i64 4, !dbg !82
  %1607 = insertelement <32 x i8> %1606, i8 %1336, i64 5, !dbg !82
  %1608 = insertelement <32 x i8> %1607, i8 %1335, i64 6, !dbg !82
  %1609 = insertelement <32 x i8> %1608, i8 %1334, i64 7, !dbg !82
  %1610 = insertelement <32 x i8> %1609, i8 %1333, i64 8, !dbg !82
  %1611 = insertelement <32 x i8> %1610, i8 %1332, i64 9, !dbg !82
  %1612 = insertelement <32 x i8> %1611, i8 %1331, i64 10, !dbg !82
  %1613 = insertelement <32 x i8> %1612, i8 %1330, i64 11, !dbg !82
  %1614 = insertelement <32 x i8> %1613, i8 %1329, i64 12, !dbg !82
  %1615 = insertelement <32 x i8> %1614, i8 %1328, i64 13, !dbg !82
  %1616 = insertelement <32 x i8> %1615, i8 %1327, i64 14, !dbg !82
  %1617 = insertelement <32 x i8> %1616, i8 %1326, i64 15, !dbg !82
  %1618 = insertelement <32 x i8> %1617, i8 %1325, i64 16, !dbg !82
  %1619 = insertelement <32 x i8> %1618, i8 %1324, i64 17, !dbg !82
  %1620 = insertelement <32 x i8> %1619, i8 %1323, i64 18, !dbg !82
  %1621 = insertelement <32 x i8> %1620, i8 %1322, i64 19, !dbg !82
  %1622 = insertelement <32 x i8> %1621, i8 %1321, i64 20, !dbg !82
  %1623 = insertelement <32 x i8> %1622, i8 %1320, i64 21, !dbg !82
  %1624 = insertelement <32 x i8> %1623, i8 %1319, i64 22, !dbg !82
  %1625 = insertelement <32 x i8> %1624, i8 %1318, i64 23, !dbg !82
  %1626 = insertelement <32 x i8> %1625, i8 %1317, i64 24, !dbg !82
  %1627 = insertelement <32 x i8> %1626, i8 %1316, i64 25, !dbg !82
  %1628 = insertelement <32 x i8> %1627, i8 %1315, i64 26, !dbg !82
  %1629 = insertelement <32 x i8> %1628, i8 %1314, i64 27, !dbg !82
  %1630 = insertelement <32 x i8> %1629, i8 %1313, i64 28, !dbg !82
  %1631 = insertelement <32 x i8> %1630, i8 %1312, i64 29, !dbg !82
  %1632 = insertelement <32 x i8> %1631, i8 %1311, i64 30, !dbg !82
  %1633 = insertelement <32 x i8> %1632, i8 %1310, i64 31, !dbg !82
  %1634 = bitcast <32 x i8> %1633 to <8 x i32>, !dbg !82
  %1635 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1309, i64 0, !dbg !82
  %1636 = insertelement <32 x i8> %1635, i8 %1308, i64 1, !dbg !82
  %1637 = insertelement <32 x i8> %1636, i8 %1307, i64 2, !dbg !82
  %1638 = insertelement <32 x i8> %1637, i8 %1306, i64 3, !dbg !82
  %1639 = insertelement <32 x i8> %1638, i8 %1305, i64 4, !dbg !82
  %1640 = insertelement <32 x i8> %1639, i8 %1304, i64 5, !dbg !82
  %1641 = insertelement <32 x i8> %1640, i8 %1303, i64 6, !dbg !82
  %1642 = insertelement <32 x i8> %1641, i8 %1302, i64 7, !dbg !82
  %1643 = insertelement <32 x i8> %1642, i8 %1301, i64 8, !dbg !82
  %1644 = insertelement <32 x i8> %1643, i8 %1300, i64 9, !dbg !82
  %1645 = insertelement <32 x i8> %1644, i8 %1299, i64 10, !dbg !82
  %1646 = insertelement <32 x i8> %1645, i8 %1298, i64 11, !dbg !82
  %1647 = insertelement <32 x i8> %1646, i8 %1297, i64 12, !dbg !82
  %1648 = insertelement <32 x i8> %1647, i8 %1296, i64 13, !dbg !82
  %1649 = insertelement <32 x i8> %1648, i8 %1295, i64 14, !dbg !82
  %1650 = insertelement <32 x i8> %1649, i8 %1294, i64 15, !dbg !82
  %1651 = insertelement <32 x i8> %1650, i8 %1293, i64 16, !dbg !82
  %1652 = insertelement <32 x i8> %1651, i8 %1292, i64 17, !dbg !82
  %1653 = insertelement <32 x i8> %1652, i8 %1291, i64 18, !dbg !82
  %1654 = insertelement <32 x i8> %1653, i8 %1290, i64 19, !dbg !82
  %1655 = insertelement <32 x i8> %1654, i8 %1289, i64 20, !dbg !82
  %1656 = insertelement <32 x i8> %1655, i8 %1288, i64 21, !dbg !82
  %1657 = insertelement <32 x i8> %1656, i8 %1287, i64 22, !dbg !82
  %1658 = insertelement <32 x i8> %1657, i8 %1286, i64 23, !dbg !82
  %1659 = insertelement <32 x i8> %1658, i8 %1285, i64 24, !dbg !82
  %1660 = insertelement <32 x i8> %1659, i8 %1284, i64 25, !dbg !82
  %1661 = insertelement <32 x i8> %1660, i8 %1283, i64 26, !dbg !82
  %1662 = insertelement <32 x i8> %1661, i8 %1282, i64 27, !dbg !82
  %1663 = insertelement <32 x i8> %1662, i8 %1281, i64 28, !dbg !82
  %1664 = insertelement <32 x i8> %1663, i8 %1280, i64 29, !dbg !82
  %1665 = insertelement <32 x i8> %1664, i8 %1279, i64 30, !dbg !82
  %1666 = insertelement <32 x i8> %1665, i8 %1278, i64 31, !dbg !82
  %1667 = bitcast <32 x i8> %1666 to <8 x i32>, !dbg !82
  %1668 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1277, i64 0, !dbg !82
  %1669 = insertelement <32 x i8> %1668, i8 %1276, i64 1, !dbg !82
  %1670 = insertelement <32 x i8> %1669, i8 %1275, i64 2, !dbg !82
  %1671 = insertelement <32 x i8> %1670, i8 %1274, i64 3, !dbg !82
  %1672 = insertelement <32 x i8> %1671, i8 %1273, i64 4, !dbg !82
  %1673 = insertelement <32 x i8> %1672, i8 %1272, i64 5, !dbg !82
  %1674 = insertelement <32 x i8> %1673, i8 %1271, i64 6, !dbg !82
  %1675 = insertelement <32 x i8> %1674, i8 %1270, i64 7, !dbg !82
  %1676 = insertelement <32 x i8> %1675, i8 %1269, i64 8, !dbg !82
  %1677 = insertelement <32 x i8> %1676, i8 %1268, i64 9, !dbg !82
  %1678 = insertelement <32 x i8> %1677, i8 %1267, i64 10, !dbg !82
  %1679 = insertelement <32 x i8> %1678, i8 %1266, i64 11, !dbg !82
  %1680 = insertelement <32 x i8> %1679, i8 %1265, i64 12, !dbg !82
  %1681 = insertelement <32 x i8> %1680, i8 %1264, i64 13, !dbg !82
  %1682 = insertelement <32 x i8> %1681, i8 %1263, i64 14, !dbg !82
  %1683 = insertelement <32 x i8> %1682, i8 %1262, i64 15, !dbg !82
  %1684 = insertelement <32 x i8> %1683, i8 %1261, i64 16, !dbg !82
  %1685 = insertelement <32 x i8> %1684, i8 %1260, i64 17, !dbg !82
  %1686 = insertelement <32 x i8> %1685, i8 %1259, i64 18, !dbg !82
  %1687 = insertelement <32 x i8> %1686, i8 %1258, i64 19, !dbg !82
  %1688 = insertelement <32 x i8> %1687, i8 %1257, i64 20, !dbg !82
  %1689 = insertelement <32 x i8> %1688, i8 %1256, i64 21, !dbg !82
  %1690 = insertelement <32 x i8> %1689, i8 %1255, i64 22, !dbg !82
  %1691 = insertelement <32 x i8> %1690, i8 %1254, i64 23, !dbg !82
  %1692 = insertelement <32 x i8> %1691, i8 %1253, i64 24, !dbg !82
  %1693 = insertelement <32 x i8> %1692, i8 %1252, i64 25, !dbg !82
  %1694 = insertelement <32 x i8> %1693, i8 %1251, i64 26, !dbg !82
  %1695 = insertelement <32 x i8> %1694, i8 %1250, i64 27, !dbg !82
  %1696 = insertelement <32 x i8> %1695, i8 %1249, i64 28, !dbg !82
  %1697 = insertelement <32 x i8> %1696, i8 %1248, i64 29, !dbg !82
  %1698 = insertelement <32 x i8> %1697, i8 %1247, i64 30, !dbg !82
  %1699 = insertelement <32 x i8> %1698, i8 %1246, i64 31, !dbg !82
  %1700 = bitcast <32 x i8> %1699 to <8 x i32>, !dbg !82
  %1701 = insertelement <32 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, i8 %1245, i64 0, !dbg !82
  %1702 = insertelement <32 x i8> %1701, i8 %1244, i64 1, !dbg !82
  %1703 = insertelement <32 x i8> %1702, i8 %1243, i64 2, !dbg !82
  %1704 = insertelement <32 x i8> %1703, i8 %1242, i64 3, !dbg !82
  %1705 = insertelement <32 x i8> %1704, i8 %1241, i64 4, !dbg !82
  %1706 = insertelement <32 x i8> %1705, i8 %1240, i64 5, !dbg !82
  %1707 = insertelement <32 x i8> %1706, i8 %1239, i64 6, !dbg !82
  %1708 = insertelement <32 x i8> %1707, i8 %1238, i64 7, !dbg !82
  %1709 = insertelement <32 x i8> %1708, i8 %1237, i64 8, !dbg !82
  %1710 = insertelement <32 x i8> %1709, i8 %1236, i64 9, !dbg !82
  %1711 = insertelement <32 x i8> %1710, i8 %1235, i64 10, !dbg !82
  %1712 = insertelement <32 x i8> %1711, i8 %1234, i64 11, !dbg !82
  %1713 = insertelement <32 x i8> %1712, i8 %1233, i64 12, !dbg !82
  %1714 = insertelement <32 x i8> %1713, i8 %1232, i64 13, !dbg !82
  %1715 = insertelement <32 x i8> %1714, i8 %1231, i64 14, !dbg !82
  %1716 = insertelement <32 x i8> %1715, i8 %1230, i64 15, !dbg !82
  %1717 = insertelement <32 x i8> %1716, i8 %1229, i64 16, !dbg !82
  %1718 = insertelement <32 x i8> %1717, i8 %1228, i64 17, !dbg !82
  %1719 = insertelement <32 x i8> %1718, i8 %1227, i64 18, !dbg !82
  %1720 = insertelement <32 x i8> %1719, i8 %1226, i64 19, !dbg !82
  %1721 = insertelement <32 x i8> %1720, i8 %1225, i64 20, !dbg !82
  %1722 = insertelement <32 x i8> %1721, i8 %1224, i64 21, !dbg !82
  %1723 = insertelement <32 x i8> %1722, i8 %1223, i64 22, !dbg !82
  %1724 = insertelement <32 x i8> %1723, i8 %1222, i64 23, !dbg !82
  %1725 = insertelement <32 x i8> %1724, i8 %1221, i64 24, !dbg !82
  %1726 = insertelement <32 x i8> %1725, i8 %1220, i64 25, !dbg !82
  %1727 = insertelement <32 x i8> %1726, i8 %1219, i64 26, !dbg !82
  %1728 = insertelement <32 x i8> %1727, i8 %1218, i64 27, !dbg !82
  %1729 = insertelement <32 x i8> %1728, i8 %1217, i64 28, !dbg !82
  %1730 = insertelement <32 x i8> %1729, i8 %1216, i64 29, !dbg !82
  %1731 = insertelement <32 x i8> %1730, i8 %1215, i64 30, !dbg !82
  %1732 = insertelement <32 x i8> %1731, i8 %1214, i64 31, !dbg !82
  %1733 = bitcast <32 x i8> %1732 to <8 x i32>, !dbg !82
  %1734 = insertelement <4 x float> poison, float %991, i64 0, !dbg !82
  %1735 = insertelement <4 x float> %1734, float %992, i64 1, !dbg !82
  %1736 = insertelement <4 x float> %1735, float %993, i64 2, !dbg !82
  %1737 = insertelement <4 x float> %1736, float %994, i64 3, !dbg !82
  %1738 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1502, <4 x float> %1737, i32 4, i32 0, i32 0, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1739 = extractelement <4 x float> %1738, i64 0, !dbg !82
  %1740 = extractelement <4 x float> %1738, i64 1, !dbg !82
  %1741 = extractelement <4 x float> %1738, i64 2, !dbg !82
  %1742 = extractelement <4 x float> %1738, i64 3, !dbg !82
  %1743 = insertelement <4 x float> poison, float %995, i64 0, !dbg !82
  %1744 = insertelement <4 x float> %1743, float %996, i64 1, !dbg !82
  %1745 = insertelement <4 x float> %1744, float %997, i64 2, !dbg !82
  %1746 = insertelement <4 x float> %1745, float %998, i64 3, !dbg !82
  %1747 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1502, <4 x float> %1746, i32 4, i32 0, i32 1, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1748 = extractelement <4 x float> %1747, i64 0, !dbg !82
  %1749 = extractelement <4 x float> %1747, i64 1, !dbg !82
  %1750 = extractelement <4 x float> %1747, i64 2, !dbg !82
  %1751 = extractelement <4 x float> %1747, i64 3, !dbg !82
  %1752 = insertelement <4 x float> poison, float %999, i64 0, !dbg !82
  %1753 = insertelement <4 x float> %1752, float %1000, i64 1, !dbg !82
  %1754 = insertelement <4 x float> %1753, float %1001, i64 2, !dbg !82
  %1755 = insertelement <4 x float> %1754, float %1002, i64 3, !dbg !82
  %1756 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1535, <4 x float> %1755, i32 4, i32 0, i32 0, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1757 = extractelement <4 x float> %1756, i64 0, !dbg !82
  %1758 = extractelement <4 x float> %1756, i64 1, !dbg !82
  %1759 = extractelement <4 x float> %1756, i64 2, !dbg !82
  %1760 = extractelement <4 x float> %1756, i64 3, !dbg !82
  %1761 = insertelement <4 x float> poison, float %1003, i64 0, !dbg !82
  %1762 = insertelement <4 x float> %1761, float %1004, i64 1, !dbg !82
  %1763 = insertelement <4 x float> %1762, float %1005, i64 2, !dbg !82
  %1764 = insertelement <4 x float> %1763, float %1006, i64 3, !dbg !82
  %1765 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1535, <4 x float> %1764, i32 4, i32 0, i32 1, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1766 = extractelement <4 x float> %1765, i64 0, !dbg !82
  %1767 = extractelement <4 x float> %1765, i64 1, !dbg !82
  %1768 = extractelement <4 x float> %1765, i64 2, !dbg !82
  %1769 = extractelement <4 x float> %1765, i64 3, !dbg !82
  %1770 = insertelement <4 x float> poison, float %1007, i64 0, !dbg !82
  %1771 = insertelement <4 x float> %1770, float %1008, i64 1, !dbg !82
  %1772 = insertelement <4 x float> %1771, float %1009, i64 2, !dbg !82
  %1773 = insertelement <4 x float> %1772, float %1010, i64 3, !dbg !82
  %1774 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1502, <4 x float> %1773, i32 4, i32 0, i32 2, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1775 = extractelement <4 x float> %1774, i64 0, !dbg !82
  %1776 = extractelement <4 x float> %1774, i64 1, !dbg !82
  %1777 = extractelement <4 x float> %1774, i64 2, !dbg !82
  %1778 = extractelement <4 x float> %1774, i64 3, !dbg !82
  %1779 = insertelement <4 x float> poison, float %1011, i64 0, !dbg !82
  %1780 = insertelement <4 x float> %1779, float %1012, i64 1, !dbg !82
  %1781 = insertelement <4 x float> %1780, float %1013, i64 2, !dbg !82
  %1782 = insertelement <4 x float> %1781, float %1014, i64 3, !dbg !82
  %1783 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1502, <4 x float> %1782, i32 4, i32 0, i32 3, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1784 = extractelement <4 x float> %1783, i64 0, !dbg !82
  %1785 = extractelement <4 x float> %1783, i64 1, !dbg !82
  %1786 = extractelement <4 x float> %1783, i64 2, !dbg !82
  %1787 = extractelement <4 x float> %1783, i64 3, !dbg !82
  %1788 = insertelement <4 x float> poison, float %1015, i64 0, !dbg !82
  %1789 = insertelement <4 x float> %1788, float %1016, i64 1, !dbg !82
  %1790 = insertelement <4 x float> %1789, float %1017, i64 2, !dbg !82
  %1791 = insertelement <4 x float> %1790, float %1018, i64 3, !dbg !82
  %1792 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1535, <4 x float> %1791, i32 4, i32 0, i32 2, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1793 = extractelement <4 x float> %1792, i64 0, !dbg !82
  %1794 = extractelement <4 x float> %1792, i64 1, !dbg !82
  %1795 = extractelement <4 x float> %1792, i64 2, !dbg !82
  %1796 = extractelement <4 x float> %1792, i64 3, !dbg !82
  %1797 = insertelement <4 x float> poison, float %1019, i64 0, !dbg !82
  %1798 = insertelement <4 x float> %1797, float %1020, i64 1, !dbg !82
  %1799 = insertelement <4 x float> %1798, float %1021, i64 2, !dbg !82
  %1800 = insertelement <4 x float> %1799, float %1022, i64 3, !dbg !82
  %1801 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1535, <4 x float> %1800, i32 4, i32 0, i32 3, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1802 = extractelement <4 x float> %1801, i64 0, !dbg !82
  %1803 = extractelement <4 x float> %1801, i64 1, !dbg !82
  %1804 = extractelement <4 x float> %1801, i64 2, !dbg !82
  %1805 = extractelement <4 x float> %1801, i64 3, !dbg !82
  %1806 = insertelement <4 x float> poison, float %1023, i64 0, !dbg !82
  %1807 = insertelement <4 x float> %1806, float %1024, i64 1, !dbg !82
  %1808 = insertelement <4 x float> %1807, float %1025, i64 2, !dbg !82
  %1809 = insertelement <4 x float> %1808, float %1026, i64 3, !dbg !82
  %1810 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1568, <4 x float> %1809, i32 4, i32 0, i32 0, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1811 = extractelement <4 x float> %1810, i64 0, !dbg !82
  %1812 = extractelement <4 x float> %1810, i64 1, !dbg !82
  %1813 = extractelement <4 x float> %1810, i64 2, !dbg !82
  %1814 = extractelement <4 x float> %1810, i64 3, !dbg !82
  %1815 = insertelement <4 x float> poison, float %1027, i64 0, !dbg !82
  %1816 = insertelement <4 x float> %1815, float %1028, i64 1, !dbg !82
  %1817 = insertelement <4 x float> %1816, float %1029, i64 2, !dbg !82
  %1818 = insertelement <4 x float> %1817, float %1030, i64 3, !dbg !82
  %1819 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1568, <4 x float> %1818, i32 4, i32 0, i32 1, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1820 = extractelement <4 x float> %1819, i64 0, !dbg !82
  %1821 = extractelement <4 x float> %1819, i64 1, !dbg !82
  %1822 = extractelement <4 x float> %1819, i64 2, !dbg !82
  %1823 = extractelement <4 x float> %1819, i64 3, !dbg !82
  %1824 = insertelement <4 x float> poison, float %1031, i64 0, !dbg !82
  %1825 = insertelement <4 x float> %1824, float %1032, i64 1, !dbg !82
  %1826 = insertelement <4 x float> %1825, float %1033, i64 2, !dbg !82
  %1827 = insertelement <4 x float> %1826, float %1034, i64 3, !dbg !82
  %1828 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1601, <4 x float> %1827, i32 4, i32 0, i32 0, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %1829 = extractelement <4 x float> %1828, i64 0, !dbg !82
  %1830 = extractelement <4 x float> %1828, i64 1, !dbg !82
  %1831 = extractelement <4 x float> %1828, i64 2, !dbg !82
  %1832 = extractelement <4 x float> %1828, i64 3, !dbg !82
  %1833 = insertelement <4 x float> poison, float %1035, i64 0, !dbg !82
  %1834 = insertelement <4 x float> %1833, float %1036, i64 1, !dbg !82
  %1835 = insertelement <4 x float> %1834, float %1037, i64 2, !dbg !82
  %1836 = insertelement <4 x float> %1835, float %1038, i64 3, !dbg !82
  %1837 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1601, <4 x float> %1836, i32 4, i32 0, i32 1, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %1838 = extractelement <4 x float> %1837, i64 0, !dbg !82
  %1839 = extractelement <4 x float> %1837, i64 1, !dbg !82
  %1840 = extractelement <4 x float> %1837, i64 2, !dbg !82
  %1841 = extractelement <4 x float> %1837, i64 3, !dbg !82
  %1842 = insertelement <4 x float> poison, float %1039, i64 0, !dbg !82
  %1843 = insertelement <4 x float> %1842, float %1040, i64 1, !dbg !82
  %1844 = insertelement <4 x float> %1843, float %1041, i64 2, !dbg !82
  %1845 = insertelement <4 x float> %1844, float %1042, i64 3, !dbg !82
  %1846 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1568, <4 x float> %1845, i32 4, i32 0, i32 2, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1847 = extractelement <4 x float> %1846, i64 0, !dbg !82
  %1848 = extractelement <4 x float> %1846, i64 1, !dbg !82
  %1849 = extractelement <4 x float> %1846, i64 2, !dbg !82
  %1850 = extractelement <4 x float> %1846, i64 3, !dbg !82
  %1851 = insertelement <4 x float> poison, float %1043, i64 0, !dbg !82
  %1852 = insertelement <4 x float> %1851, float %1044, i64 1, !dbg !82
  %1853 = insertelement <4 x float> %1852, float %1045, i64 2, !dbg !82
  %1854 = insertelement <4 x float> %1853, float %1046, i64 3, !dbg !82
  %1855 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1568, <4 x float> %1854, i32 4, i32 0, i32 3, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1856 = extractelement <4 x float> %1855, i64 0, !dbg !82
  %1857 = extractelement <4 x float> %1855, i64 1, !dbg !82
  %1858 = extractelement <4 x float> %1855, i64 2, !dbg !82
  %1859 = extractelement <4 x float> %1855, i64 3, !dbg !82
  %1860 = insertelement <4 x float> poison, float %1047, i64 0, !dbg !82
  %1861 = insertelement <4 x float> %1860, float %1048, i64 1, !dbg !82
  %1862 = insertelement <4 x float> %1861, float %1049, i64 2, !dbg !82
  %1863 = insertelement <4 x float> %1862, float %1050, i64 3, !dbg !82
  %1864 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1601, <4 x float> %1863, i32 4, i32 0, i32 2, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %1865 = extractelement <4 x float> %1864, i64 0, !dbg !82
  %1866 = extractelement <4 x float> %1864, i64 1, !dbg !82
  %1867 = extractelement <4 x float> %1864, i64 2, !dbg !82
  %1868 = extractelement <4 x float> %1864, i64 3, !dbg !82
  %1869 = insertelement <4 x float> poison, float %1051, i64 0, !dbg !82
  %1870 = insertelement <4 x float> %1869, float %1052, i64 1, !dbg !82
  %1871 = insertelement <4 x float> %1870, float %1053, i64 2, !dbg !82
  %1872 = insertelement <4 x float> %1871, float %1054, i64 3, !dbg !82
  %1873 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1601, <4 x float> %1872, i32 4, i32 0, i32 3, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %1874 = extractelement <4 x float> %1873, i64 0, !dbg !82
  %1875 = extractelement <4 x float> %1873, i64 1, !dbg !82
  %1876 = extractelement <4 x float> %1873, i64 2, !dbg !82
  %1877 = extractelement <4 x float> %1873, i64 3, !dbg !82
  %1878 = insertelement <4 x float> poison, float %1055, i64 0, !dbg !82
  %1879 = insertelement <4 x float> %1878, float %1056, i64 1, !dbg !82
  %1880 = insertelement <4 x float> %1879, float %1057, i64 2, !dbg !82
  %1881 = insertelement <4 x float> %1880, float %1058, i64 3, !dbg !82
  %1882 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1634, <4 x float> %1881, i32 4, i32 0, i32 0, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1883 = extractelement <4 x float> %1882, i64 0, !dbg !82
  %1884 = extractelement <4 x float> %1882, i64 1, !dbg !82
  %1885 = extractelement <4 x float> %1882, i64 2, !dbg !82
  %1886 = extractelement <4 x float> %1882, i64 3, !dbg !82
  %1887 = insertelement <4 x float> poison, float %1059, i64 0, !dbg !82
  %1888 = insertelement <4 x float> %1887, float %1060, i64 1, !dbg !82
  %1889 = insertelement <4 x float> %1888, float %1061, i64 2, !dbg !82
  %1890 = insertelement <4 x float> %1889, float %1062, i64 3, !dbg !82
  %1891 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1634, <4 x float> %1890, i32 4, i32 0, i32 1, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1892 = extractelement <4 x float> %1891, i64 0, !dbg !82
  %1893 = extractelement <4 x float> %1891, i64 1, !dbg !82
  %1894 = extractelement <4 x float> %1891, i64 2, !dbg !82
  %1895 = extractelement <4 x float> %1891, i64 3, !dbg !82
  %1896 = insertelement <4 x float> poison, float %1063, i64 0, !dbg !82
  %1897 = insertelement <4 x float> %1896, float %1064, i64 1, !dbg !82
  %1898 = insertelement <4 x float> %1897, float %1065, i64 2, !dbg !82
  %1899 = insertelement <4 x float> %1898, float %1066, i64 3, !dbg !82
  %1900 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1667, <4 x float> %1899, i32 4, i32 0, i32 0, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1901 = extractelement <4 x float> %1900, i64 0, !dbg !82
  %1902 = extractelement <4 x float> %1900, i64 1, !dbg !82
  %1903 = extractelement <4 x float> %1900, i64 2, !dbg !82
  %1904 = extractelement <4 x float> %1900, i64 3, !dbg !82
  %1905 = insertelement <4 x float> poison, float %1067, i64 0, !dbg !82
  %1906 = insertelement <4 x float> %1905, float %1068, i64 1, !dbg !82
  %1907 = insertelement <4 x float> %1906, float %1069, i64 2, !dbg !82
  %1908 = insertelement <4 x float> %1907, float %1070, i64 3, !dbg !82
  %1909 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1667, <4 x float> %1908, i32 4, i32 0, i32 1, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1910 = extractelement <4 x float> %1909, i64 0, !dbg !82
  %1911 = extractelement <4 x float> %1909, i64 1, !dbg !82
  %1912 = extractelement <4 x float> %1909, i64 2, !dbg !82
  %1913 = extractelement <4 x float> %1909, i64 3, !dbg !82
  %1914 = insertelement <4 x float> poison, float %1071, i64 0, !dbg !82
  %1915 = insertelement <4 x float> %1914, float %1072, i64 1, !dbg !82
  %1916 = insertelement <4 x float> %1915, float %1073, i64 2, !dbg !82
  %1917 = insertelement <4 x float> %1916, float %1074, i64 3, !dbg !82
  %1918 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1634, <4 x float> %1917, i32 4, i32 0, i32 2, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1919 = extractelement <4 x float> %1918, i64 0, !dbg !82
  %1920 = extractelement <4 x float> %1918, i64 1, !dbg !82
  %1921 = extractelement <4 x float> %1918, i64 2, !dbg !82
  %1922 = extractelement <4 x float> %1918, i64 3, !dbg !82
  %1923 = insertelement <4 x float> poison, float %1075, i64 0, !dbg !82
  %1924 = insertelement <4 x float> %1923, float %1076, i64 1, !dbg !82
  %1925 = insertelement <4 x float> %1924, float %1077, i64 2, !dbg !82
  %1926 = insertelement <4 x float> %1925, float %1078, i64 3, !dbg !82
  %1927 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1634, <4 x float> %1926, i32 4, i32 0, i32 3, i32 %1213, i32 0, i32 2139062143), !dbg !82
  %1928 = extractelement <4 x float> %1927, i64 0, !dbg !82
  %1929 = extractelement <4 x float> %1927, i64 1, !dbg !82
  %1930 = extractelement <4 x float> %1927, i64 2, !dbg !82
  %1931 = extractelement <4 x float> %1927, i64 3, !dbg !82
  %1932 = insertelement <4 x float> poison, float %1079, i64 0, !dbg !82
  %1933 = insertelement <4 x float> %1932, float %1080, i64 1, !dbg !82
  %1934 = insertelement <4 x float> %1933, float %1081, i64 2, !dbg !82
  %1935 = insertelement <4 x float> %1934, float %1082, i64 3, !dbg !82
  %1936 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1667, <4 x float> %1935, i32 4, i32 0, i32 2, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1937 = extractelement <4 x float> %1936, i64 0, !dbg !82
  %1938 = extractelement <4 x float> %1936, i64 1, !dbg !82
  %1939 = extractelement <4 x float> %1936, i64 2, !dbg !82
  %1940 = extractelement <4 x float> %1936, i64 3, !dbg !82
  %1941 = insertelement <4 x float> poison, float %1083, i64 0, !dbg !82
  %1942 = insertelement <4 x float> %1941, float %1084, i64 1, !dbg !82
  %1943 = insertelement <4 x float> %1942, float %1085, i64 2, !dbg !82
  %1944 = insertelement <4 x float> %1943, float %1086, i64 3, !dbg !82
  %1945 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1667, <4 x float> %1944, i32 4, i32 0, i32 3, i32 %1213, i32 1, i32 2139062143), !dbg !82
  %1946 = extractelement <4 x float> %1945, i64 0, !dbg !82
  %1947 = extractelement <4 x float> %1945, i64 1, !dbg !82
  %1948 = extractelement <4 x float> %1945, i64 2, !dbg !82
  %1949 = extractelement <4 x float> %1945, i64 3, !dbg !82
  %1950 = insertelement <4 x float> poison, float %1087, i64 0, !dbg !82
  %1951 = insertelement <4 x float> %1950, float %1088, i64 1, !dbg !82
  %1952 = insertelement <4 x float> %1951, float %1089, i64 2, !dbg !82
  %1953 = insertelement <4 x float> %1952, float %1090, i64 3, !dbg !82
  %1954 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1700, <4 x float> %1953, i32 4, i32 0, i32 0, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1955 = extractelement <4 x float> %1954, i64 0, !dbg !82
  %1956 = extractelement <4 x float> %1954, i64 1, !dbg !82
  %1957 = extractelement <4 x float> %1954, i64 2, !dbg !82
  %1958 = extractelement <4 x float> %1954, i64 3, !dbg !82
  %1959 = insertelement <4 x float> poison, float %1091, i64 0, !dbg !82
  %1960 = insertelement <4 x float> %1959, float %1092, i64 1, !dbg !82
  %1961 = insertelement <4 x float> %1960, float %1093, i64 2, !dbg !82
  %1962 = insertelement <4 x float> %1961, float %1094, i64 3, !dbg !82
  %1963 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1700, <4 x float> %1962, i32 4, i32 0, i32 1, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1964 = extractelement <4 x float> %1963, i64 0, !dbg !82
  %1965 = extractelement <4 x float> %1963, i64 1, !dbg !82
  %1966 = extractelement <4 x float> %1963, i64 2, !dbg !82
  %1967 = extractelement <4 x float> %1963, i64 3, !dbg !82
  %1968 = insertelement <4 x float> poison, float %1095, i64 0, !dbg !82
  %1969 = insertelement <4 x float> %1968, float %1096, i64 1, !dbg !82
  %1970 = insertelement <4 x float> %1969, float %1097, i64 2, !dbg !82
  %1971 = insertelement <4 x float> %1970, float %1098, i64 3, !dbg !82
  %1972 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1186, <8 x i32> %1733, <4 x float> %1971, i32 4, i32 0, i32 0, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %1973 = extractelement <4 x float> %1972, i64 0, !dbg !82
  %1974 = extractelement <4 x float> %1972, i64 1, !dbg !82
  %1975 = extractelement <4 x float> %1972, i64 2, !dbg !82
  %1976 = extractelement <4 x float> %1972, i64 3, !dbg !82
  %1977 = insertelement <4 x float> poison, float %1099, i64 0, !dbg !82
  %1978 = insertelement <4 x float> %1977, float %1100, i64 1, !dbg !82
  %1979 = insertelement <4 x float> %1978, float %1101, i64 2, !dbg !82
  %1980 = insertelement <4 x float> %1979, float %1102, i64 3, !dbg !82
  %1981 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1191, <8 x i32> %1733, <4 x float> %1980, i32 4, i32 0, i32 1, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %1982 = extractelement <4 x float> %1981, i64 0, !dbg !82
  %1983 = extractelement <4 x float> %1981, i64 1, !dbg !82
  %1984 = extractelement <4 x float> %1981, i64 2, !dbg !82
  %1985 = extractelement <4 x float> %1981, i64 3, !dbg !82
  %1986 = insertelement <4 x float> poison, float %1103, i64 0, !dbg !82
  %1987 = insertelement <4 x float> %1986, float %1104, i64 1, !dbg !82
  %1988 = insertelement <4 x float> %1987, float %1105, i64 2, !dbg !82
  %1989 = insertelement <4 x float> %1988, float %1106, i64 3, !dbg !82
  %1990 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1700, <4 x float> %1989, i32 4, i32 0, i32 2, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %1991 = extractelement <4 x float> %1990, i64 0, !dbg !82
  %1992 = extractelement <4 x float> %1990, i64 1, !dbg !82
  %1993 = extractelement <4 x float> %1990, i64 2, !dbg !82
  %1994 = extractelement <4 x float> %1990, i64 3, !dbg !82
  %1995 = insertelement <4 x float> poison, float %1107, i64 0, !dbg !82
  %1996 = insertelement <4 x float> %1995, float %1108, i64 1, !dbg !82
  %1997 = insertelement <4 x float> %1996, float %1109, i64 2, !dbg !82
  %1998 = insertelement <4 x float> %1997, float %1110, i64 3, !dbg !82
  %1999 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1700, <4 x float> %1998, i32 4, i32 0, i32 3, i32 %1213, i32 2, i32 2139062143), !dbg !82
  %2000 = extractelement <4 x float> %1999, i64 0, !dbg !82
  %2001 = extractelement <4 x float> %1999, i64 1, !dbg !82
  %2002 = extractelement <4 x float> %1999, i64 2, !dbg !82
  %2003 = extractelement <4 x float> %1999, i64 3, !dbg !82
  %2004 = insertelement <4 x float> poison, float %1111, i64 0, !dbg !82
  %2005 = insertelement <4 x float> %2004, float %1112, i64 1, !dbg !82
  %2006 = insertelement <4 x float> %2005, float %1113, i64 2, !dbg !82
  %2007 = insertelement <4 x float> %2006, float %1114, i64 3, !dbg !82
  %2008 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1196, <8 x i32> %1733, <4 x float> %2007, i32 4, i32 0, i32 2, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %2009 = extractelement <4 x float> %2008, i64 0, !dbg !82
  %2010 = extractelement <4 x float> %2008, i64 1, !dbg !82
  %2011 = extractelement <4 x float> %2008, i64 2, !dbg !82
  %2012 = extractelement <4 x float> %2008, i64 3, !dbg !82
  %2013 = insertelement <4 x float> poison, float %1115, i64 0, !dbg !82
  %2014 = insertelement <4 x float> %2013, float %1116, i64 1, !dbg !82
  %2015 = insertelement <4 x float> %2014, float %1117, i64 2, !dbg !82
  %2016 = insertelement <4 x float> %2015, float %1118, i64 3, !dbg !82
  %2017 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32> %1201, <8 x i32> %1733, <4 x float> %2016, i32 4, i32 0, i32 3, i32 %1213, i32 3, i32 2139062143), !dbg !82
  %2018 = extractelement <4 x float> %2017, i64 0, !dbg !82
  %2019 = extractelement <4 x float> %2017, i64 1, !dbg !82
  %2020 = extractelement <4 x float> %2017, i64 2, !dbg !82
  %2021 = extractelement <4 x float> %2017, i64 3, !dbg !82
  br label %._crit_edge89, !dbg !82

._crit_edge89:                                    ; preds = %1120, %1208
  %2022 = phi float [ %2021, %1208 ], [ %1118, %1120 ], !dbg !75
  %2023 = phi float [ %2020, %1208 ], [ %1117, %1120 ], !dbg !75
  %2024 = phi float [ %2019, %1208 ], [ %1116, %1120 ], !dbg !75
  %2025 = phi float [ %2018, %1208 ], [ %1115, %1120 ], !dbg !75
  %2026 = phi float [ %2012, %1208 ], [ %1114, %1120 ], !dbg !75
  %2027 = phi float [ %2011, %1208 ], [ %1113, %1120 ], !dbg !75
  %2028 = phi float [ %2010, %1208 ], [ %1112, %1120 ], !dbg !75
  %2029 = phi float [ %2009, %1208 ], [ %1111, %1120 ], !dbg !75
  %2030 = phi float [ %2003, %1208 ], [ %1110, %1120 ], !dbg !75
  %2031 = phi float [ %2002, %1208 ], [ %1109, %1120 ], !dbg !75
  %2032 = phi float [ %2001, %1208 ], [ %1108, %1120 ], !dbg !75
  %2033 = phi float [ %2000, %1208 ], [ %1107, %1120 ], !dbg !75
  %2034 = phi float [ %1994, %1208 ], [ %1106, %1120 ], !dbg !75
  %2035 = phi float [ %1993, %1208 ], [ %1105, %1120 ], !dbg !75
  %2036 = phi float [ %1992, %1208 ], [ %1104, %1120 ], !dbg !75
  %2037 = phi float [ %1991, %1208 ], [ %1103, %1120 ], !dbg !75
  %2038 = phi float [ %1985, %1208 ], [ %1102, %1120 ], !dbg !75
  %2039 = phi float [ %1984, %1208 ], [ %1101, %1120 ], !dbg !75
  %2040 = phi float [ %1983, %1208 ], [ %1100, %1120 ], !dbg !75
  %2041 = phi float [ %1982, %1208 ], [ %1099, %1120 ], !dbg !75
  %2042 = phi float [ %1976, %1208 ], [ %1098, %1120 ], !dbg !75
  %2043 = phi float [ %1975, %1208 ], [ %1097, %1120 ], !dbg !75
  %2044 = phi float [ %1974, %1208 ], [ %1096, %1120 ], !dbg !75
  %2045 = phi float [ %1973, %1208 ], [ %1095, %1120 ], !dbg !75
  %2046 = phi float [ %1967, %1208 ], [ %1094, %1120 ], !dbg !75
  %2047 = phi float [ %1966, %1208 ], [ %1093, %1120 ], !dbg !75
  %2048 = phi float [ %1965, %1208 ], [ %1092, %1120 ], !dbg !75
  %2049 = phi float [ %1964, %1208 ], [ %1091, %1120 ], !dbg !75
  %2050 = phi float [ %1958, %1208 ], [ %1090, %1120 ], !dbg !75
  %2051 = phi float [ %1957, %1208 ], [ %1089, %1120 ], !dbg !75
  %2052 = phi float [ %1956, %1208 ], [ %1088, %1120 ], !dbg !75
  %2053 = phi float [ %1955, %1208 ], [ %1087, %1120 ], !dbg !75
  %2054 = phi float [ %1949, %1208 ], [ %1086, %1120 ], !dbg !75
  %2055 = phi float [ %1948, %1208 ], [ %1085, %1120 ], !dbg !75
  %2056 = phi float [ %1947, %1208 ], [ %1084, %1120 ], !dbg !75
  %2057 = phi float [ %1946, %1208 ], [ %1083, %1120 ], !dbg !75
  %2058 = phi float [ %1940, %1208 ], [ %1082, %1120 ], !dbg !75
  %2059 = phi float [ %1939, %1208 ], [ %1081, %1120 ], !dbg !75
  %2060 = phi float [ %1938, %1208 ], [ %1080, %1120 ], !dbg !75
  %2061 = phi float [ %1937, %1208 ], [ %1079, %1120 ], !dbg !75
  %2062 = phi float [ %1931, %1208 ], [ %1078, %1120 ], !dbg !75
  %2063 = phi float [ %1930, %1208 ], [ %1077, %1120 ], !dbg !75
  %2064 = phi float [ %1929, %1208 ], [ %1076, %1120 ], !dbg !75
  %2065 = phi float [ %1928, %1208 ], [ %1075, %1120 ], !dbg !75
  %2066 = phi float [ %1922, %1208 ], [ %1074, %1120 ], !dbg !75
  %2067 = phi float [ %1921, %1208 ], [ %1073, %1120 ], !dbg !75
  %2068 = phi float [ %1920, %1208 ], [ %1072, %1120 ], !dbg !75
  %2069 = phi float [ %1919, %1208 ], [ %1071, %1120 ], !dbg !75
  %2070 = phi float [ %1913, %1208 ], [ %1070, %1120 ], !dbg !75
  %2071 = phi float [ %1912, %1208 ], [ %1069, %1120 ], !dbg !75
  %2072 = phi float [ %1911, %1208 ], [ %1068, %1120 ], !dbg !75
  %2073 = phi float [ %1910, %1208 ], [ %1067, %1120 ], !dbg !75
  %2074 = phi float [ %1904, %1208 ], [ %1066, %1120 ], !dbg !75
  %2075 = phi float [ %1903, %1208 ], [ %1065, %1120 ], !dbg !75
  %2076 = phi float [ %1902, %1208 ], [ %1064, %1120 ], !dbg !75
  %2077 = phi float [ %1901, %1208 ], [ %1063, %1120 ], !dbg !75
  %2078 = phi float [ %1895, %1208 ], [ %1062, %1120 ], !dbg !75
  %2079 = phi float [ %1894, %1208 ], [ %1061, %1120 ], !dbg !75
  %2080 = phi float [ %1893, %1208 ], [ %1060, %1120 ], !dbg !75
  %2081 = phi float [ %1892, %1208 ], [ %1059, %1120 ], !dbg !75
  %2082 = phi float [ %1886, %1208 ], [ %1058, %1120 ], !dbg !75
  %2083 = phi float [ %1885, %1208 ], [ %1057, %1120 ], !dbg !75
  %2084 = phi float [ %1884, %1208 ], [ %1056, %1120 ], !dbg !75
  %2085 = phi float [ %1883, %1208 ], [ %1055, %1120 ], !dbg !75
  %2086 = phi float [ %1877, %1208 ], [ %1054, %1120 ], !dbg !75
  %2087 = phi float [ %1876, %1208 ], [ %1053, %1120 ], !dbg !75
  %2088 = phi float [ %1875, %1208 ], [ %1052, %1120 ], !dbg !75
  %2089 = phi float [ %1874, %1208 ], [ %1051, %1120 ], !dbg !75
  %2090 = phi float [ %1868, %1208 ], [ %1050, %1120 ], !dbg !75
  %2091 = phi float [ %1867, %1208 ], [ %1049, %1120 ], !dbg !75
  %2092 = phi float [ %1866, %1208 ], [ %1048, %1120 ], !dbg !75
  %2093 = phi float [ %1865, %1208 ], [ %1047, %1120 ], !dbg !75
  %2094 = phi float [ %1859, %1208 ], [ %1046, %1120 ], !dbg !75
  %2095 = phi float [ %1858, %1208 ], [ %1045, %1120 ], !dbg !75
  %2096 = phi float [ %1857, %1208 ], [ %1044, %1120 ], !dbg !75
  %2097 = phi float [ %1856, %1208 ], [ %1043, %1120 ], !dbg !75
  %2098 = phi float [ %1850, %1208 ], [ %1042, %1120 ], !dbg !75
  %2099 = phi float [ %1849, %1208 ], [ %1041, %1120 ], !dbg !75
  %2100 = phi float [ %1848, %1208 ], [ %1040, %1120 ], !dbg !75
  %2101 = phi float [ %1847, %1208 ], [ %1039, %1120 ], !dbg !75
  %2102 = phi float [ %1841, %1208 ], [ %1038, %1120 ], !dbg !75
  %2103 = phi float [ %1840, %1208 ], [ %1037, %1120 ], !dbg !75
  %2104 = phi float [ %1839, %1208 ], [ %1036, %1120 ], !dbg !75
  %2105 = phi float [ %1838, %1208 ], [ %1035, %1120 ], !dbg !75
  %2106 = phi float [ %1832, %1208 ], [ %1034, %1120 ], !dbg !75
  %2107 = phi float [ %1831, %1208 ], [ %1033, %1120 ], !dbg !75
  %2108 = phi float [ %1830, %1208 ], [ %1032, %1120 ], !dbg !75
  %2109 = phi float [ %1829, %1208 ], [ %1031, %1120 ], !dbg !75
  %2110 = phi float [ %1823, %1208 ], [ %1030, %1120 ], !dbg !75
  %2111 = phi float [ %1822, %1208 ], [ %1029, %1120 ], !dbg !75
  %2112 = phi float [ %1821, %1208 ], [ %1028, %1120 ], !dbg !75
  %2113 = phi float [ %1820, %1208 ], [ %1027, %1120 ], !dbg !75
  %2114 = phi float [ %1814, %1208 ], [ %1026, %1120 ], !dbg !75
  %2115 = phi float [ %1813, %1208 ], [ %1025, %1120 ], !dbg !75
  %2116 = phi float [ %1812, %1208 ], [ %1024, %1120 ], !dbg !75
  %2117 = phi float [ %1811, %1208 ], [ %1023, %1120 ], !dbg !75
  %2118 = phi float [ %1805, %1208 ], [ %1022, %1120 ], !dbg !75
  %2119 = phi float [ %1804, %1208 ], [ %1021, %1120 ], !dbg !75
  %2120 = phi float [ %1803, %1208 ], [ %1020, %1120 ], !dbg !75
  %2121 = phi float [ %1802, %1208 ], [ %1019, %1120 ], !dbg !75
  %2122 = phi float [ %1796, %1208 ], [ %1018, %1120 ], !dbg !75
  %2123 = phi float [ %1795, %1208 ], [ %1017, %1120 ], !dbg !75
  %2124 = phi float [ %1794, %1208 ], [ %1016, %1120 ], !dbg !75
  %2125 = phi float [ %1793, %1208 ], [ %1015, %1120 ], !dbg !75
  %2126 = phi float [ %1787, %1208 ], [ %1014, %1120 ], !dbg !75
  %2127 = phi float [ %1786, %1208 ], [ %1013, %1120 ], !dbg !75
  %2128 = phi float [ %1785, %1208 ], [ %1012, %1120 ], !dbg !75
  %2129 = phi float [ %1784, %1208 ], [ %1011, %1120 ], !dbg !75
  %2130 = phi float [ %1778, %1208 ], [ %1010, %1120 ], !dbg !75
  %2131 = phi float [ %1777, %1208 ], [ %1009, %1120 ], !dbg !75
  %2132 = phi float [ %1776, %1208 ], [ %1008, %1120 ], !dbg !75
  %2133 = phi float [ %1775, %1208 ], [ %1007, %1120 ], !dbg !75
  %2134 = phi float [ %1769, %1208 ], [ %1006, %1120 ], !dbg !75
  %2135 = phi float [ %1768, %1208 ], [ %1005, %1120 ], !dbg !75
  %2136 = phi float [ %1767, %1208 ], [ %1004, %1120 ], !dbg !75
  %2137 = phi float [ %1766, %1208 ], [ %1003, %1120 ], !dbg !75
  %2138 = phi float [ %1760, %1208 ], [ %1002, %1120 ], !dbg !75
  %2139 = phi float [ %1759, %1208 ], [ %1001, %1120 ], !dbg !75
  %2140 = phi float [ %1758, %1208 ], [ %1000, %1120 ], !dbg !75
  %2141 = phi float [ %1757, %1208 ], [ %999, %1120 ], !dbg !75
  %2142 = phi float [ %1751, %1208 ], [ %998, %1120 ], !dbg !75
  %2143 = phi float [ %1750, %1208 ], [ %997, %1120 ], !dbg !75
  %2144 = phi float [ %1749, %1208 ], [ %996, %1120 ], !dbg !75
  %2145 = phi float [ %1748, %1208 ], [ %995, %1120 ], !dbg !75
  %2146 = phi float [ %1742, %1208 ], [ %994, %1120 ], !dbg !75
  %2147 = phi float [ %1741, %1208 ], [ %993, %1120 ], !dbg !75
  %2148 = phi float [ %1740, %1208 ], [ %992, %1120 ], !dbg !75
  %2149 = phi float [ %1739, %1208 ], [ %991, %1120 ], !dbg !75
  %2150 = icmp slt i64 %128, %132, !dbg !89
  %2151 = icmp slt i64 %129, %132, !dbg !89
  %2152 = icmp slt i64 %130, %132, !dbg !89
  %2153 = icmp slt i64 %131, %132, !dbg !89
  %2154 = icmp slt i64 %202, %190, !dbg !90
  %2155 = icmp slt i64 %203, %190, !dbg !90
  %2156 = icmp slt i64 %204, %190, !dbg !90
  %2157 = icmp slt i64 %205, %190, !dbg !90
  %2158 = sext i32 %15 to i64, !dbg !91
  %2159 = mul nsw i64 %66, %2158, !dbg !91
  %2160 = getelementptr float, ptr addrspace(1) %14, i64 %2159, !dbg !92
  %2161 = getelementptr float, ptr addrspace(1) %2160, i64 %199, !dbg !93
  %2162 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %2161, i16 0, i32 2147483646, i32 159744), !dbg !94
  %2163 = shl nuw nsw i32 %114, 2, !dbg !94
  %2164 = select i1 %2154, i32 %2163, i32 -2147483648, !dbg !94
  %2165 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %2162, i32 %2164, i32 0, i32 0), !dbg !94
  %2166 = extractelement <4 x float> %2165, i64 0, !dbg !94
  %2167 = extractelement <4 x float> %2165, i64 1, !dbg !94
  %2168 = extractelement <4 x float> %2165, i64 2, !dbg !94
  %2169 = extractelement <4 x float> %2165, i64 3, !dbg !94
  %2170 = shl nuw nsw i32 %115, 2, !dbg !94
  %2171 = select i1 %2155, i32 %2170, i32 -2147483648, !dbg !94
  %2172 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %2162, i32 %2171, i32 0, i32 0), !dbg !94
  %2173 = extractelement <4 x float> %2172, i64 0, !dbg !94
  %2174 = extractelement <4 x float> %2172, i64 1, !dbg !94
  %2175 = extractelement <4 x float> %2172, i64 2, !dbg !94
  %2176 = extractelement <4 x float> %2172, i64 3, !dbg !94
  %2177 = shl nuw nsw i32 %116, 2, !dbg !94
  %2178 = select i1 %2156, i32 %2177, i32 -2147483648, !dbg !94
  %2179 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %2162, i32 %2178, i32 0, i32 0), !dbg !94
  %2180 = extractelement <4 x float> %2179, i64 0, !dbg !94
  %2181 = extractelement <4 x float> %2179, i64 1, !dbg !94
  %2182 = extractelement <4 x float> %2179, i64 2, !dbg !94
  %2183 = extractelement <4 x float> %2179, i64 3, !dbg !94
  %2184 = shl nuw nsw i32 %117, 2, !dbg !94
  %2185 = select i1 %2157, i32 %2184, i32 -2147483648, !dbg !94
  %2186 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %2162, i32 %2185, i32 0, i32 0), !dbg !94
  %2187 = extractelement <4 x float> %2186, i64 0, !dbg !94
  %2188 = extractelement <4 x float> %2186, i64 1, !dbg !94
  %2189 = extractelement <4 x float> %2186, i64 2, !dbg !94
  %2190 = extractelement <4 x float> %2186, i64 3, !dbg !94
  %2191 = fadd float %2149, %2166, !dbg !95
  %2192 = fadd float %2148, %2167, !dbg !95
  %2193 = fadd float %2147, %2168, !dbg !95
  %2194 = fadd float %2146, %2169, !dbg !95
  %2195 = fadd float %2145, %2173, !dbg !95
  %2196 = fadd float %2144, %2174, !dbg !95
  %2197 = fadd float %2143, %2175, !dbg !95
  %2198 = fadd float %2142, %2176, !dbg !95
  %2199 = fadd float %2141, %2166, !dbg !95
  %2200 = fadd float %2140, %2167, !dbg !95
  %2201 = fadd float %2139, %2168, !dbg !95
  %2202 = fadd float %2138, %2169, !dbg !95
  %2203 = fadd float %2137, %2173, !dbg !95
  %2204 = fadd float %2136, %2174, !dbg !95
  %2205 = fadd float %2135, %2175, !dbg !95
  %2206 = fadd float %2134, %2176, !dbg !95
  %2207 = fadd float %2133, %2180, !dbg !95
  %2208 = fadd float %2132, %2181, !dbg !95
  %2209 = fadd float %2131, %2182, !dbg !95
  %2210 = fadd float %2130, %2183, !dbg !95
  %2211 = fadd float %2129, %2187, !dbg !95
  %2212 = fadd float %2128, %2188, !dbg !95
  %2213 = fadd float %2127, %2189, !dbg !95
  %2214 = fadd float %2126, %2190, !dbg !95
  %2215 = fadd float %2125, %2180, !dbg !95
  %2216 = fadd float %2124, %2181, !dbg !95
  %2217 = fadd float %2123, %2182, !dbg !95
  %2218 = fadd float %2122, %2183, !dbg !95
  %2219 = fadd float %2121, %2187, !dbg !95
  %2220 = fadd float %2120, %2188, !dbg !95
  %2221 = fadd float %2119, %2189, !dbg !95
  %2222 = fadd float %2118, %2190, !dbg !95
  %2223 = fadd float %2117, %2166, !dbg !95
  %2224 = fadd float %2116, %2167, !dbg !95
  %2225 = fadd float %2115, %2168, !dbg !95
  %2226 = fadd float %2114, %2169, !dbg !95
  %2227 = fadd float %2113, %2173, !dbg !95
  %2228 = fadd float %2112, %2174, !dbg !95
  %2229 = fadd float %2111, %2175, !dbg !95
  %2230 = fadd float %2110, %2176, !dbg !95
  %2231 = fadd float %2109, %2166, !dbg !95
  %2232 = fadd float %2108, %2167, !dbg !95
  %2233 = fadd float %2107, %2168, !dbg !95
  %2234 = fadd float %2106, %2169, !dbg !95
  %2235 = fadd float %2105, %2173, !dbg !95
  %2236 = fadd float %2104, %2174, !dbg !95
  %2237 = fadd float %2103, %2175, !dbg !95
  %2238 = fadd float %2102, %2176, !dbg !95
  %2239 = fadd float %2101, %2180, !dbg !95
  %2240 = fadd float %2100, %2181, !dbg !95
  %2241 = fadd float %2099, %2182, !dbg !95
  %2242 = fadd float %2098, %2183, !dbg !95
  %2243 = fadd float %2097, %2187, !dbg !95
  %2244 = fadd float %2096, %2188, !dbg !95
  %2245 = fadd float %2095, %2189, !dbg !95
  %2246 = fadd float %2094, %2190, !dbg !95
  %2247 = fadd float %2093, %2180, !dbg !95
  %2248 = fadd float %2092, %2181, !dbg !95
  %2249 = fadd float %2091, %2182, !dbg !95
  %2250 = fadd float %2090, %2183, !dbg !95
  %2251 = fadd float %2089, %2187, !dbg !95
  %2252 = fadd float %2088, %2188, !dbg !95
  %2253 = fadd float %2087, %2189, !dbg !95
  %2254 = fadd float %2086, %2190, !dbg !95
  %2255 = fadd float %2085, %2166, !dbg !95
  %2256 = fadd float %2084, %2167, !dbg !95
  %2257 = fadd float %2083, %2168, !dbg !95
  %2258 = fadd float %2082, %2169, !dbg !95
  %2259 = fadd float %2081, %2173, !dbg !95
  %2260 = fadd float %2080, %2174, !dbg !95
  %2261 = fadd float %2079, %2175, !dbg !95
  %2262 = fadd float %2078, %2176, !dbg !95
  %2263 = fadd float %2077, %2166, !dbg !95
  %2264 = fadd float %2076, %2167, !dbg !95
  %2265 = fadd float %2075, %2168, !dbg !95
  %2266 = fadd float %2074, %2169, !dbg !95
  %2267 = fadd float %2073, %2173, !dbg !95
  %2268 = fadd float %2072, %2174, !dbg !95
  %2269 = fadd float %2071, %2175, !dbg !95
  %2270 = fadd float %2070, %2176, !dbg !95
  %2271 = fadd float %2069, %2180, !dbg !95
  %2272 = fadd float %2068, %2181, !dbg !95
  %2273 = fadd float %2067, %2182, !dbg !95
  %2274 = fadd float %2066, %2183, !dbg !95
  %2275 = fadd float %2065, %2187, !dbg !95
  %2276 = fadd float %2064, %2188, !dbg !95
  %2277 = fadd float %2063, %2189, !dbg !95
  %2278 = fadd float %2062, %2190, !dbg !95
  %2279 = fadd float %2061, %2180, !dbg !95
  %2280 = fadd float %2060, %2181, !dbg !95
  %2281 = fadd float %2059, %2182, !dbg !95
  %2282 = fadd float %2058, %2183, !dbg !95
  %2283 = fadd float %2057, %2187, !dbg !95
  %2284 = fadd float %2056, %2188, !dbg !95
  %2285 = fadd float %2055, %2189, !dbg !95
  %2286 = fadd float %2054, %2190, !dbg !95
  %2287 = fadd float %2053, %2166, !dbg !95
  %2288 = fadd float %2052, %2167, !dbg !95
  %2289 = fadd float %2051, %2168, !dbg !95
  %2290 = fadd float %2050, %2169, !dbg !95
  %2291 = fadd float %2049, %2173, !dbg !95
  %2292 = fadd float %2048, %2174, !dbg !95
  %2293 = fadd float %2047, %2175, !dbg !95
  %2294 = fadd float %2046, %2176, !dbg !95
  %2295 = fadd float %2045, %2166, !dbg !95
  %2296 = fadd float %2044, %2167, !dbg !95
  %2297 = fadd float %2043, %2168, !dbg !95
  %2298 = fadd float %2042, %2169, !dbg !95
  %2299 = fadd float %2041, %2173, !dbg !95
  %2300 = fadd float %2040, %2174, !dbg !95
  %2301 = fadd float %2039, %2175, !dbg !95
  %2302 = fadd float %2038, %2176, !dbg !95
  %2303 = fadd float %2037, %2180, !dbg !95
  %2304 = fadd float %2036, %2181, !dbg !95
  %2305 = fadd float %2035, %2182, !dbg !95
  %2306 = fadd float %2034, %2183, !dbg !95
  %2307 = fadd float %2033, %2187, !dbg !95
  %2308 = fadd float %2032, %2188, !dbg !95
  %2309 = fadd float %2031, %2189, !dbg !95
  %2310 = fadd float %2030, %2190, !dbg !95
  %2311 = fadd float %2029, %2180, !dbg !95
  %2312 = fadd float %2028, %2181, !dbg !95
  %2313 = fadd float %2027, %2182, !dbg !95
  %2314 = fadd float %2026, %2183, !dbg !95
  %2315 = fadd float %2025, %2187, !dbg !95
  %2316 = fadd float %2024, %2188, !dbg !95
  %2317 = fadd float %2023, %2189, !dbg !95
  %2318 = fadd float %2022, %2190, !dbg !95
  %2319 = tail call float @llvm.minnum.f32(float %2191, float %27), !dbg !96
  %2320 = tail call float @llvm.minnum.f32(float %2193, float %27), !dbg !96
  %2321 = tail call float @llvm.minnum.f32(float %2195, float %27), !dbg !96
  %2322 = tail call float @llvm.minnum.f32(float %2197, float %27), !dbg !96
  %2323 = tail call float @llvm.minnum.f32(float %2199, float %27), !dbg !96
  %2324 = tail call float @llvm.minnum.f32(float %2201, float %27), !dbg !96
  %2325 = tail call float @llvm.minnum.f32(float %2203, float %27), !dbg !96
  %2326 = tail call float @llvm.minnum.f32(float %2205, float %27), !dbg !96
  %2327 = tail call float @llvm.minnum.f32(float %2207, float %27), !dbg !96
  %2328 = tail call float @llvm.minnum.f32(float %2209, float %27), !dbg !96
  %2329 = tail call float @llvm.minnum.f32(float %2211, float %27), !dbg !96
  %2330 = tail call float @llvm.minnum.f32(float %2213, float %27), !dbg !96
  %2331 = tail call float @llvm.minnum.f32(float %2215, float %27), !dbg !96
  %2332 = tail call float @llvm.minnum.f32(float %2217, float %27), !dbg !96
  %2333 = tail call float @llvm.minnum.f32(float %2219, float %27), !dbg !96
  %2334 = tail call float @llvm.minnum.f32(float %2221, float %27), !dbg !96
  %2335 = tail call float @llvm.minnum.f32(float %2223, float %27), !dbg !96
  %2336 = tail call float @llvm.minnum.f32(float %2225, float %27), !dbg !96
  %2337 = tail call float @llvm.minnum.f32(float %2227, float %27), !dbg !96
  %2338 = tail call float @llvm.minnum.f32(float %2229, float %27), !dbg !96
  %2339 = tail call float @llvm.minnum.f32(float %2231, float %27), !dbg !96
  %2340 = tail call float @llvm.minnum.f32(float %2233, float %27), !dbg !96
  %2341 = tail call float @llvm.minnum.f32(float %2235, float %27), !dbg !96
  %2342 = tail call float @llvm.minnum.f32(float %2237, float %27), !dbg !96
  %2343 = tail call float @llvm.minnum.f32(float %2239, float %27), !dbg !96
  %2344 = tail call float @llvm.minnum.f32(float %2241, float %27), !dbg !96
  %2345 = tail call float @llvm.minnum.f32(float %2243, float %27), !dbg !96
  %2346 = tail call float @llvm.minnum.f32(float %2245, float %27), !dbg !96
  %2347 = tail call float @llvm.minnum.f32(float %2247, float %27), !dbg !96
  %2348 = tail call float @llvm.minnum.f32(float %2249, float %27), !dbg !96
  %2349 = tail call float @llvm.minnum.f32(float %2251, float %27), !dbg !96
  %2350 = tail call float @llvm.minnum.f32(float %2253, float %27), !dbg !96
  %2351 = tail call float @llvm.minnum.f32(float %2255, float %27), !dbg !96
  %2352 = tail call float @llvm.minnum.f32(float %2257, float %27), !dbg !96
  %2353 = tail call float @llvm.minnum.f32(float %2259, float %27), !dbg !96
  %2354 = tail call float @llvm.minnum.f32(float %2261, float %27), !dbg !96
  %2355 = tail call float @llvm.minnum.f32(float %2263, float %27), !dbg !96
  %2356 = tail call float @llvm.minnum.f32(float %2265, float %27), !dbg !96
  %2357 = tail call float @llvm.minnum.f32(float %2267, float %27), !dbg !96
  %2358 = tail call float @llvm.minnum.f32(float %2269, float %27), !dbg !96
  %2359 = tail call float @llvm.minnum.f32(float %2271, float %27), !dbg !96
  %2360 = tail call float @llvm.minnum.f32(float %2273, float %27), !dbg !96
  %2361 = tail call float @llvm.minnum.f32(float %2275, float %27), !dbg !96
  %2362 = tail call float @llvm.minnum.f32(float %2277, float %27), !dbg !96
  %2363 = tail call float @llvm.minnum.f32(float %2279, float %27), !dbg !96
  %2364 = tail call float @llvm.minnum.f32(float %2281, float %27), !dbg !96
  %2365 = tail call float @llvm.minnum.f32(float %2283, float %27), !dbg !96
  %2366 = tail call float @llvm.minnum.f32(float %2285, float %27), !dbg !96
  %2367 = tail call float @llvm.minnum.f32(float %2287, float %27), !dbg !96
  %2368 = tail call float @llvm.minnum.f32(float %2289, float %27), !dbg !96
  %2369 = tail call float @llvm.minnum.f32(float %2291, float %27), !dbg !96
  %2370 = tail call float @llvm.minnum.f32(float %2293, float %27), !dbg !96
  %2371 = tail call float @llvm.minnum.f32(float %2295, float %27), !dbg !96
  %2372 = tail call float @llvm.minnum.f32(float %2297, float %27), !dbg !96
  %2373 = tail call float @llvm.minnum.f32(float %2299, float %27), !dbg !96
  %2374 = tail call float @llvm.minnum.f32(float %2301, float %27), !dbg !96
  %2375 = tail call float @llvm.minnum.f32(float %2303, float %27), !dbg !96
  %2376 = tail call float @llvm.minnum.f32(float %2305, float %27), !dbg !96
  %2377 = tail call float @llvm.minnum.f32(float %2307, float %27), !dbg !96
  %2378 = tail call float @llvm.minnum.f32(float %2309, float %27), !dbg !96
  %2379 = tail call float @llvm.minnum.f32(float %2311, float %27), !dbg !96
  %2380 = tail call float @llvm.minnum.f32(float %2313, float %27), !dbg !96
  %2381 = tail call float @llvm.minnum.f32(float %2315, float %27), !dbg !96
  %2382 = tail call float @llvm.minnum.f32(float %2317, float %27), !dbg !96
  %2383 = tail call float @llvm.minnum.f32(float %2192, float %27), !dbg !96
  %2384 = tail call float @llvm.minnum.f32(float %2194, float %27), !dbg !96
  %2385 = tail call float @llvm.minnum.f32(float %2196, float %27), !dbg !96
  %2386 = tail call float @llvm.minnum.f32(float %2198, float %27), !dbg !96
  %2387 = tail call float @llvm.minnum.f32(float %2200, float %27), !dbg !96
  %2388 = tail call float @llvm.minnum.f32(float %2202, float %27), !dbg !96
  %2389 = tail call float @llvm.minnum.f32(float %2204, float %27), !dbg !96
  %2390 = tail call float @llvm.minnum.f32(float %2206, float %27), !dbg !96
  %2391 = tail call float @llvm.minnum.f32(float %2208, float %27), !dbg !96
  %2392 = tail call float @llvm.minnum.f32(float %2210, float %27), !dbg !96
  %2393 = tail call float @llvm.minnum.f32(float %2212, float %27), !dbg !96
  %2394 = tail call float @llvm.minnum.f32(float %2214, float %27), !dbg !96
  %2395 = tail call float @llvm.minnum.f32(float %2216, float %27), !dbg !96
  %2396 = tail call float @llvm.minnum.f32(float %2218, float %27), !dbg !96
  %2397 = tail call float @llvm.minnum.f32(float %2220, float %27), !dbg !96
  %2398 = tail call float @llvm.minnum.f32(float %2222, float %27), !dbg !96
  %2399 = tail call float @llvm.minnum.f32(float %2224, float %27), !dbg !96
  %2400 = tail call float @llvm.minnum.f32(float %2226, float %27), !dbg !96
  %2401 = tail call float @llvm.minnum.f32(float %2228, float %27), !dbg !96
  %2402 = tail call float @llvm.minnum.f32(float %2230, float %27), !dbg !96
  %2403 = tail call float @llvm.minnum.f32(float %2232, float %27), !dbg !96
  %2404 = tail call float @llvm.minnum.f32(float %2234, float %27), !dbg !96
  %2405 = tail call float @llvm.minnum.f32(float %2236, float %27), !dbg !96
  %2406 = tail call float @llvm.minnum.f32(float %2238, float %27), !dbg !96
  %2407 = tail call float @llvm.minnum.f32(float %2240, float %27), !dbg !96
  %2408 = tail call float @llvm.minnum.f32(float %2242, float %27), !dbg !96
  %2409 = tail call float @llvm.minnum.f32(float %2244, float %27), !dbg !96
  %2410 = tail call float @llvm.minnum.f32(float %2246, float %27), !dbg !96
  %2411 = tail call float @llvm.minnum.f32(float %2248, float %27), !dbg !96
  %2412 = tail call float @llvm.minnum.f32(float %2250, float %27), !dbg !96
  %2413 = tail call float @llvm.minnum.f32(float %2252, float %27), !dbg !96
  %2414 = tail call float @llvm.minnum.f32(float %2254, float %27), !dbg !96
  %2415 = tail call float @llvm.minnum.f32(float %2256, float %27), !dbg !96
  %2416 = tail call float @llvm.minnum.f32(float %2258, float %27), !dbg !96
  %2417 = tail call float @llvm.minnum.f32(float %2260, float %27), !dbg !96
  %2418 = tail call float @llvm.minnum.f32(float %2262, float %27), !dbg !96
  %2419 = tail call float @llvm.minnum.f32(float %2264, float %27), !dbg !96
  %2420 = tail call float @llvm.minnum.f32(float %2266, float %27), !dbg !96
  %2421 = tail call float @llvm.minnum.f32(float %2268, float %27), !dbg !96
  %2422 = tail call float @llvm.minnum.f32(float %2270, float %27), !dbg !96
  %2423 = tail call float @llvm.minnum.f32(float %2272, float %27), !dbg !96
  %2424 = tail call float @llvm.minnum.f32(float %2274, float %27), !dbg !96
  %2425 = tail call float @llvm.minnum.f32(float %2276, float %27), !dbg !96
  %2426 = tail call float @llvm.minnum.f32(float %2278, float %27), !dbg !96
  %2427 = tail call float @llvm.minnum.f32(float %2280, float %27), !dbg !96
  %2428 = tail call float @llvm.minnum.f32(float %2282, float %27), !dbg !96
  %2429 = tail call float @llvm.minnum.f32(float %2284, float %27), !dbg !96
  %2430 = tail call float @llvm.minnum.f32(float %2286, float %27), !dbg !96
  %2431 = tail call float @llvm.minnum.f32(float %2288, float %27), !dbg !96
  %2432 = tail call float @llvm.minnum.f32(float %2290, float %27), !dbg !96
  %2433 = tail call float @llvm.minnum.f32(float %2292, float %27), !dbg !96
  %2434 = tail call float @llvm.minnum.f32(float %2294, float %27), !dbg !96
  %2435 = tail call float @llvm.minnum.f32(float %2296, float %27), !dbg !96
  %2436 = tail call float @llvm.minnum.f32(float %2298, float %27), !dbg !96
  %2437 = tail call float @llvm.minnum.f32(float %2300, float %27), !dbg !96
  %2438 = tail call float @llvm.minnum.f32(float %2302, float %27), !dbg !96
  %2439 = tail call float @llvm.minnum.f32(float %2304, float %27), !dbg !96
  %2440 = tail call float @llvm.minnum.f32(float %2306, float %27), !dbg !96
  %2441 = tail call float @llvm.minnum.f32(float %2308, float %27), !dbg !96
  %2442 = tail call float @llvm.minnum.f32(float %2310, float %27), !dbg !96
  %2443 = tail call float @llvm.minnum.f32(float %2312, float %27), !dbg !96
  %2444 = tail call float @llvm.minnum.f32(float %2314, float %27), !dbg !96
  %2445 = tail call float @llvm.minnum.f32(float %2316, float %27), !dbg !96
  %2446 = tail call float @llvm.minnum.f32(float %2318, float %27), !dbg !96
  %2447 = fsub float 0.000000e+00, %27, !dbg !100
  %2448 = tail call float @llvm.maxnum.f32(float %2447, float %2383), !dbg !101
  %2449 = tail call float @llvm.maxnum.f32(float %2447, float %2384), !dbg !101
  %2450 = tail call float @llvm.maxnum.f32(float %2447, float %2385), !dbg !101
  %2451 = tail call float @llvm.maxnum.f32(float %2447, float %2386), !dbg !101
  %2452 = tail call float @llvm.maxnum.f32(float %2447, float %2387), !dbg !101
  %2453 = tail call float @llvm.maxnum.f32(float %2447, float %2388), !dbg !101
  %2454 = tail call float @llvm.maxnum.f32(float %2447, float %2389), !dbg !101
  %2455 = tail call float @llvm.maxnum.f32(float %2447, float %2390), !dbg !101
  %2456 = tail call float @llvm.maxnum.f32(float %2447, float %2391), !dbg !101
  %2457 = tail call float @llvm.maxnum.f32(float %2447, float %2392), !dbg !101
  %2458 = tail call float @llvm.maxnum.f32(float %2447, float %2393), !dbg !101
  %2459 = tail call float @llvm.maxnum.f32(float %2447, float %2394), !dbg !101
  %2460 = tail call float @llvm.maxnum.f32(float %2447, float %2395), !dbg !101
  %2461 = tail call float @llvm.maxnum.f32(float %2447, float %2396), !dbg !101
  %2462 = tail call float @llvm.maxnum.f32(float %2447, float %2397), !dbg !101
  %2463 = tail call float @llvm.maxnum.f32(float %2447, float %2398), !dbg !101
  %2464 = tail call float @llvm.maxnum.f32(float %2447, float %2399), !dbg !101
  %2465 = tail call float @llvm.maxnum.f32(float %2447, float %2400), !dbg !101
  %2466 = tail call float @llvm.maxnum.f32(float %2447, float %2401), !dbg !101
  %2467 = tail call float @llvm.maxnum.f32(float %2447, float %2402), !dbg !101
  %2468 = tail call float @llvm.maxnum.f32(float %2447, float %2403), !dbg !101
  %2469 = tail call float @llvm.maxnum.f32(float %2447, float %2404), !dbg !101
  %2470 = tail call float @llvm.maxnum.f32(float %2447, float %2405), !dbg !101
  %2471 = tail call float @llvm.maxnum.f32(float %2447, float %2406), !dbg !101
  %2472 = tail call float @llvm.maxnum.f32(float %2447, float %2407), !dbg !101
  %2473 = tail call float @llvm.maxnum.f32(float %2447, float %2408), !dbg !101
  %2474 = tail call float @llvm.maxnum.f32(float %2447, float %2409), !dbg !101
  %2475 = tail call float @llvm.maxnum.f32(float %2447, float %2410), !dbg !101
  %2476 = tail call float @llvm.maxnum.f32(float %2447, float %2411), !dbg !101
  %2477 = tail call float @llvm.maxnum.f32(float %2447, float %2412), !dbg !101
  %2478 = tail call float @llvm.maxnum.f32(float %2447, float %2413), !dbg !101
  %2479 = tail call float @llvm.maxnum.f32(float %2447, float %2414), !dbg !101
  %2480 = tail call float @llvm.maxnum.f32(float %2447, float %2415), !dbg !101
  %2481 = tail call float @llvm.maxnum.f32(float %2447, float %2416), !dbg !101
  %2482 = tail call float @llvm.maxnum.f32(float %2447, float %2417), !dbg !101
  %2483 = tail call float @llvm.maxnum.f32(float %2447, float %2418), !dbg !101
  %2484 = tail call float @llvm.maxnum.f32(float %2447, float %2419), !dbg !101
  %2485 = tail call float @llvm.maxnum.f32(float %2447, float %2420), !dbg !101
  %2486 = tail call float @llvm.maxnum.f32(float %2447, float %2421), !dbg !101
  %2487 = tail call float @llvm.maxnum.f32(float %2447, float %2422), !dbg !101
  %2488 = tail call float @llvm.maxnum.f32(float %2447, float %2423), !dbg !101
  %2489 = tail call float @llvm.maxnum.f32(float %2447, float %2424), !dbg !101
  %2490 = tail call float @llvm.maxnum.f32(float %2447, float %2425), !dbg !101
  %2491 = tail call float @llvm.maxnum.f32(float %2447, float %2426), !dbg !101
  %2492 = tail call float @llvm.maxnum.f32(float %2447, float %2427), !dbg !101
  %2493 = tail call float @llvm.maxnum.f32(float %2447, float %2428), !dbg !101
  %2494 = tail call float @llvm.maxnum.f32(float %2447, float %2429), !dbg !101
  %2495 = tail call float @llvm.maxnum.f32(float %2447, float %2430), !dbg !101
  %2496 = tail call float @llvm.maxnum.f32(float %2447, float %2431), !dbg !101
  %2497 = tail call float @llvm.maxnum.f32(float %2447, float %2432), !dbg !101
  %2498 = tail call float @llvm.maxnum.f32(float %2447, float %2433), !dbg !101
  %2499 = tail call float @llvm.maxnum.f32(float %2447, float %2434), !dbg !101
  %2500 = tail call float @llvm.maxnum.f32(float %2447, float %2435), !dbg !101
  %2501 = tail call float @llvm.maxnum.f32(float %2447, float %2436), !dbg !101
  %2502 = tail call float @llvm.maxnum.f32(float %2447, float %2437), !dbg !101
  %2503 = tail call float @llvm.maxnum.f32(float %2447, float %2438), !dbg !101
  %2504 = tail call float @llvm.maxnum.f32(float %2447, float %2439), !dbg !101
  %2505 = tail call float @llvm.maxnum.f32(float %2447, float %2440), !dbg !101
  %2506 = tail call float @llvm.maxnum.f32(float %2447, float %2441), !dbg !101
  %2507 = tail call float @llvm.maxnum.f32(float %2447, float %2442), !dbg !101
  %2508 = tail call float @llvm.maxnum.f32(float %2447, float %2443), !dbg !101
  %2509 = tail call float @llvm.maxnum.f32(float %2447, float %2444), !dbg !101
  %2510 = tail call float @llvm.maxnum.f32(float %2447, float %2445), !dbg !101
  %2511 = tail call float @llvm.maxnum.f32(float %2447, float %2446), !dbg !101
  %2512 = fsub float 0.000000e+00, %26, !dbg !102
  %2513 = fmul float %2512, %2319, !dbg !103
  %2514 = fmul float %2512, %2320, !dbg !103
  %2515 = fmul float %2512, %2321, !dbg !103
  %2516 = fmul float %2512, %2322, !dbg !103
  %2517 = fmul float %2512, %2323, !dbg !103
  %2518 = fmul float %2512, %2324, !dbg !103
  %2519 = fmul float %2512, %2325, !dbg !103
  %2520 = fmul float %2512, %2326, !dbg !103
  %2521 = fmul float %2512, %2327, !dbg !103
  %2522 = fmul float %2512, %2328, !dbg !103
  %2523 = fmul float %2512, %2329, !dbg !103
  %2524 = fmul float %2512, %2330, !dbg !103
  %2525 = fmul float %2512, %2331, !dbg !103
  %2526 = fmul float %2512, %2332, !dbg !103
  %2527 = fmul float %2512, %2333, !dbg !103
  %2528 = fmul float %2512, %2334, !dbg !103
  %2529 = fmul float %2512, %2335, !dbg !103
  %2530 = fmul float %2512, %2336, !dbg !103
  %2531 = fmul float %2512, %2337, !dbg !103
  %2532 = fmul float %2512, %2338, !dbg !103
  %2533 = fmul float %2512, %2339, !dbg !103
  %2534 = fmul float %2512, %2340, !dbg !103
  %2535 = fmul float %2512, %2341, !dbg !103
  %2536 = fmul float %2512, %2342, !dbg !103
  %2537 = fmul float %2512, %2343, !dbg !103
  %2538 = fmul float %2512, %2344, !dbg !103
  %2539 = fmul float %2512, %2345, !dbg !103
  %2540 = fmul float %2512, %2346, !dbg !103
  %2541 = fmul float %2512, %2347, !dbg !103
  %2542 = fmul float %2512, %2348, !dbg !103
  %2543 = fmul float %2512, %2349, !dbg !103
  %2544 = fmul float %2512, %2350, !dbg !103
  %2545 = fmul float %2512, %2351, !dbg !103
  %2546 = fmul float %2512, %2352, !dbg !103
  %2547 = fmul float %2512, %2353, !dbg !103
  %2548 = fmul float %2512, %2354, !dbg !103
  %2549 = fmul float %2512, %2355, !dbg !103
  %2550 = fmul float %2512, %2356, !dbg !103
  %2551 = fmul float %2512, %2357, !dbg !103
  %2552 = fmul float %2512, %2358, !dbg !103
  %2553 = fmul float %2512, %2359, !dbg !103
  %2554 = fmul float %2512, %2360, !dbg !103
  %2555 = fmul float %2512, %2361, !dbg !103
  %2556 = fmul float %2512, %2362, !dbg !103
  %2557 = fmul float %2512, %2363, !dbg !103
  %2558 = fmul float %2512, %2364, !dbg !103
  %2559 = fmul float %2512, %2365, !dbg !103
  %2560 = fmul float %2512, %2366, !dbg !103
  %2561 = fmul float %2512, %2367, !dbg !103
  %2562 = fmul float %2512, %2368, !dbg !103
  %2563 = fmul float %2512, %2369, !dbg !103
  %2564 = fmul float %2512, %2370, !dbg !103
  %2565 = fmul float %2512, %2371, !dbg !103
  %2566 = fmul float %2512, %2372, !dbg !103
  %2567 = fmul float %2512, %2373, !dbg !103
  %2568 = fmul float %2512, %2374, !dbg !103
  %2569 = fmul float %2512, %2375, !dbg !103
  %2570 = fmul float %2512, %2376, !dbg !103
  %2571 = fmul float %2512, %2377, !dbg !103
  %2572 = fmul float %2512, %2378, !dbg !103
  %2573 = fmul float %2512, %2379, !dbg !103
  %2574 = fmul float %2512, %2380, !dbg !103
  %2575 = fmul float %2512, %2381, !dbg !103
  %2576 = fmul float %2512, %2382, !dbg !103
  %2577 = fmul float %2513, 0x3FF7154760000000, !dbg !104
  %2578 = tail call float @llvm.exp2.f32(float %2577), !dbg !104
  %2579 = fmul float %2514, 0x3FF7154760000000, !dbg !104
  %2580 = tail call float @llvm.exp2.f32(float %2579), !dbg !104
  %2581 = fmul float %2515, 0x3FF7154760000000, !dbg !104
  %2582 = tail call float @llvm.exp2.f32(float %2581), !dbg !104
  %2583 = fmul float %2516, 0x3FF7154760000000, !dbg !104
  %2584 = tail call float @llvm.exp2.f32(float %2583), !dbg !104
  %2585 = fmul float %2517, 0x3FF7154760000000, !dbg !104
  %2586 = tail call float @llvm.exp2.f32(float %2585), !dbg !104
  %2587 = fmul float %2518, 0x3FF7154760000000, !dbg !104
  %2588 = tail call float @llvm.exp2.f32(float %2587), !dbg !104
  %2589 = fmul float %2519, 0x3FF7154760000000, !dbg !104
  %2590 = tail call float @llvm.exp2.f32(float %2589), !dbg !104
  %2591 = fmul float %2520, 0x3FF7154760000000, !dbg !104
  %2592 = tail call float @llvm.exp2.f32(float %2591), !dbg !104
  %2593 = fmul float %2521, 0x3FF7154760000000, !dbg !104
  %2594 = tail call float @llvm.exp2.f32(float %2593), !dbg !104
  %2595 = fmul float %2522, 0x3FF7154760000000, !dbg !104
  %2596 = tail call float @llvm.exp2.f32(float %2595), !dbg !104
  %2597 = fmul float %2523, 0x3FF7154760000000, !dbg !104
  %2598 = tail call float @llvm.exp2.f32(float %2597), !dbg !104
  %2599 = fmul float %2524, 0x3FF7154760000000, !dbg !104
  %2600 = tail call float @llvm.exp2.f32(float %2599), !dbg !104
  %2601 = fmul float %2525, 0x3FF7154760000000, !dbg !104
  %2602 = tail call float @llvm.exp2.f32(float %2601), !dbg !104
  %2603 = fmul float %2526, 0x3FF7154760000000, !dbg !104
  %2604 = tail call float @llvm.exp2.f32(float %2603), !dbg !104
  %2605 = fmul float %2527, 0x3FF7154760000000, !dbg !104
  %2606 = tail call float @llvm.exp2.f32(float %2605), !dbg !104
  %2607 = fmul float %2528, 0x3FF7154760000000, !dbg !104
  %2608 = tail call float @llvm.exp2.f32(float %2607), !dbg !104
  %2609 = fmul float %2529, 0x3FF7154760000000, !dbg !104
  %2610 = tail call float @llvm.exp2.f32(float %2609), !dbg !104
  %2611 = fmul float %2530, 0x3FF7154760000000, !dbg !104
  %2612 = tail call float @llvm.exp2.f32(float %2611), !dbg !104
  %2613 = fmul float %2531, 0x3FF7154760000000, !dbg !104
  %2614 = tail call float @llvm.exp2.f32(float %2613), !dbg !104
  %2615 = fmul float %2532, 0x3FF7154760000000, !dbg !104
  %2616 = tail call float @llvm.exp2.f32(float %2615), !dbg !104
  %2617 = fmul float %2533, 0x3FF7154760000000, !dbg !104
  %2618 = tail call float @llvm.exp2.f32(float %2617), !dbg !104
  %2619 = fmul float %2534, 0x3FF7154760000000, !dbg !104
  %2620 = tail call float @llvm.exp2.f32(float %2619), !dbg !104
  %2621 = fmul float %2535, 0x3FF7154760000000, !dbg !104
  %2622 = tail call float @llvm.exp2.f32(float %2621), !dbg !104
  %2623 = fmul float %2536, 0x3FF7154760000000, !dbg !104
  %2624 = tail call float @llvm.exp2.f32(float %2623), !dbg !104
  %2625 = fmul float %2537, 0x3FF7154760000000, !dbg !104
  %2626 = tail call float @llvm.exp2.f32(float %2625), !dbg !104
  %2627 = fmul float %2538, 0x3FF7154760000000, !dbg !104
  %2628 = tail call float @llvm.exp2.f32(float %2627), !dbg !104
  %2629 = fmul float %2539, 0x3FF7154760000000, !dbg !104
  %2630 = tail call float @llvm.exp2.f32(float %2629), !dbg !104
  %2631 = fmul float %2540, 0x3FF7154760000000, !dbg !104
  %2632 = tail call float @llvm.exp2.f32(float %2631), !dbg !104
  %2633 = fmul float %2541, 0x3FF7154760000000, !dbg !104
  %2634 = tail call float @llvm.exp2.f32(float %2633), !dbg !104
  %2635 = fmul float %2542, 0x3FF7154760000000, !dbg !104
  %2636 = tail call float @llvm.exp2.f32(float %2635), !dbg !104
  %2637 = fmul float %2543, 0x3FF7154760000000, !dbg !104
  %2638 = tail call float @llvm.exp2.f32(float %2637), !dbg !104
  %2639 = fmul float %2544, 0x3FF7154760000000, !dbg !104
  %2640 = tail call float @llvm.exp2.f32(float %2639), !dbg !104
  %2641 = fmul float %2545, 0x3FF7154760000000, !dbg !104
  %2642 = tail call float @llvm.exp2.f32(float %2641), !dbg !104
  %2643 = fmul float %2546, 0x3FF7154760000000, !dbg !104
  %2644 = tail call float @llvm.exp2.f32(float %2643), !dbg !104
  %2645 = fmul float %2547, 0x3FF7154760000000, !dbg !104
  %2646 = tail call float @llvm.exp2.f32(float %2645), !dbg !104
  %2647 = fmul float %2548, 0x3FF7154760000000, !dbg !104
  %2648 = tail call float @llvm.exp2.f32(float %2647), !dbg !104
  %2649 = fmul float %2549, 0x3FF7154760000000, !dbg !104
  %2650 = tail call float @llvm.exp2.f32(float %2649), !dbg !104
  %2651 = fmul float %2550, 0x3FF7154760000000, !dbg !104
  %2652 = tail call float @llvm.exp2.f32(float %2651), !dbg !104
  %2653 = fmul float %2551, 0x3FF7154760000000, !dbg !104
  %2654 = tail call float @llvm.exp2.f32(float %2653), !dbg !104
  %2655 = fmul float %2552, 0x3FF7154760000000, !dbg !104
  %2656 = tail call float @llvm.exp2.f32(float %2655), !dbg !104
  %2657 = fmul float %2553, 0x3FF7154760000000, !dbg !104
  %2658 = tail call float @llvm.exp2.f32(float %2657), !dbg !104
  %2659 = fmul float %2554, 0x3FF7154760000000, !dbg !104
  %2660 = tail call float @llvm.exp2.f32(float %2659), !dbg !104
  %2661 = fmul float %2555, 0x3FF7154760000000, !dbg !104
  %2662 = tail call float @llvm.exp2.f32(float %2661), !dbg !104
  %2663 = fmul float %2556, 0x3FF7154760000000, !dbg !104
  %2664 = tail call float @llvm.exp2.f32(float %2663), !dbg !104
  %2665 = fmul float %2557, 0x3FF7154760000000, !dbg !104
  %2666 = tail call float @llvm.exp2.f32(float %2665), !dbg !104
  %2667 = fmul float %2558, 0x3FF7154760000000, !dbg !104
  %2668 = tail call float @llvm.exp2.f32(float %2667), !dbg !104
  %2669 = fmul float %2559, 0x3FF7154760000000, !dbg !104
  %2670 = tail call float @llvm.exp2.f32(float %2669), !dbg !104
  %2671 = fmul float %2560, 0x3FF7154760000000, !dbg !104
  %2672 = tail call float @llvm.exp2.f32(float %2671), !dbg !104
  %2673 = fmul float %2561, 0x3FF7154760000000, !dbg !104
  %2674 = tail call float @llvm.exp2.f32(float %2673), !dbg !104
  %2675 = fmul float %2562, 0x3FF7154760000000, !dbg !104
  %2676 = tail call float @llvm.exp2.f32(float %2675), !dbg !104
  %2677 = fmul float %2563, 0x3FF7154760000000, !dbg !104
  %2678 = tail call float @llvm.exp2.f32(float %2677), !dbg !104
  %2679 = fmul float %2564, 0x3FF7154760000000, !dbg !104
  %2680 = tail call float @llvm.exp2.f32(float %2679), !dbg !104
  %2681 = fmul float %2565, 0x3FF7154760000000, !dbg !104
  %2682 = tail call float @llvm.exp2.f32(float %2681), !dbg !104
  %2683 = fmul float %2566, 0x3FF7154760000000, !dbg !104
  %2684 = tail call float @llvm.exp2.f32(float %2683), !dbg !104
  %2685 = fmul float %2567, 0x3FF7154760000000, !dbg !104
  %2686 = tail call float @llvm.exp2.f32(float %2685), !dbg !104
  %2687 = fmul float %2568, 0x3FF7154760000000, !dbg !104
  %2688 = tail call float @llvm.exp2.f32(float %2687), !dbg !104
  %2689 = fmul float %2569, 0x3FF7154760000000, !dbg !104
  %2690 = tail call float @llvm.exp2.f32(float %2689), !dbg !104
  %2691 = fmul float %2570, 0x3FF7154760000000, !dbg !104
  %2692 = tail call float @llvm.exp2.f32(float %2691), !dbg !104
  %2693 = fmul float %2571, 0x3FF7154760000000, !dbg !104
  %2694 = tail call float @llvm.exp2.f32(float %2693), !dbg !104
  %2695 = fmul float %2572, 0x3FF7154760000000, !dbg !104
  %2696 = tail call float @llvm.exp2.f32(float %2695), !dbg !104
  %2697 = fmul float %2573, 0x3FF7154760000000, !dbg !104
  %2698 = tail call float @llvm.exp2.f32(float %2697), !dbg !104
  %2699 = fmul float %2574, 0x3FF7154760000000, !dbg !104
  %2700 = tail call float @llvm.exp2.f32(float %2699), !dbg !104
  %2701 = fmul float %2575, 0x3FF7154760000000, !dbg !104
  %2702 = tail call float @llvm.exp2.f32(float %2701), !dbg !104
  %2703 = fmul float %2576, 0x3FF7154760000000, !dbg !104
  %2704 = tail call float @llvm.exp2.f32(float %2703), !dbg !104
  %2705 = fadd float %2578, 1.000000e+00, !dbg !105
  %2706 = fadd float %2580, 1.000000e+00, !dbg !105
  %2707 = fadd float %2582, 1.000000e+00, !dbg !105
  %2708 = fadd float %2584, 1.000000e+00, !dbg !105
  %2709 = fadd float %2586, 1.000000e+00, !dbg !105
  %2710 = fadd float %2588, 1.000000e+00, !dbg !105
  %2711 = fadd float %2590, 1.000000e+00, !dbg !105
  %2712 = fadd float %2592, 1.000000e+00, !dbg !105
  %2713 = fadd float %2594, 1.000000e+00, !dbg !105
  %2714 = fadd float %2596, 1.000000e+00, !dbg !105
  %2715 = fadd float %2598, 1.000000e+00, !dbg !105
  %2716 = fadd float %2600, 1.000000e+00, !dbg !105
  %2717 = fadd float %2602, 1.000000e+00, !dbg !105
  %2718 = fadd float %2604, 1.000000e+00, !dbg !105
  %2719 = fadd float %2606, 1.000000e+00, !dbg !105
  %2720 = fadd float %2608, 1.000000e+00, !dbg !105
  %2721 = fadd float %2610, 1.000000e+00, !dbg !105
  %2722 = fadd float %2612, 1.000000e+00, !dbg !105
  %2723 = fadd float %2614, 1.000000e+00, !dbg !105
  %2724 = fadd float %2616, 1.000000e+00, !dbg !105
  %2725 = fadd float %2618, 1.000000e+00, !dbg !105
  %2726 = fadd float %2620, 1.000000e+00, !dbg !105
  %2727 = fadd float %2622, 1.000000e+00, !dbg !105
  %2728 = fadd float %2624, 1.000000e+00, !dbg !105
  %2729 = fadd float %2626, 1.000000e+00, !dbg !105
  %2730 = fadd float %2628, 1.000000e+00, !dbg !105
  %2731 = fadd float %2630, 1.000000e+00, !dbg !105
  %2732 = fadd float %2632, 1.000000e+00, !dbg !105
  %2733 = fadd float %2634, 1.000000e+00, !dbg !105
  %2734 = fadd float %2636, 1.000000e+00, !dbg !105
  %2735 = fadd float %2638, 1.000000e+00, !dbg !105
  %2736 = fadd float %2640, 1.000000e+00, !dbg !105
  %2737 = fadd float %2642, 1.000000e+00, !dbg !105
  %2738 = fadd float %2644, 1.000000e+00, !dbg !105
  %2739 = fadd float %2646, 1.000000e+00, !dbg !105
  %2740 = fadd float %2648, 1.000000e+00, !dbg !105
  %2741 = fadd float %2650, 1.000000e+00, !dbg !105
  %2742 = fadd float %2652, 1.000000e+00, !dbg !105
  %2743 = fadd float %2654, 1.000000e+00, !dbg !105
  %2744 = fadd float %2656, 1.000000e+00, !dbg !105
  %2745 = fadd float %2658, 1.000000e+00, !dbg !105
  %2746 = fadd float %2660, 1.000000e+00, !dbg !105
  %2747 = fadd float %2662, 1.000000e+00, !dbg !105
  %2748 = fadd float %2664, 1.000000e+00, !dbg !105
  %2749 = fadd float %2666, 1.000000e+00, !dbg !105
  %2750 = fadd float %2668, 1.000000e+00, !dbg !105
  %2751 = fadd float %2670, 1.000000e+00, !dbg !105
  %2752 = fadd float %2672, 1.000000e+00, !dbg !105
  %2753 = fadd float %2674, 1.000000e+00, !dbg !105
  %2754 = fadd float %2676, 1.000000e+00, !dbg !105
  %2755 = fadd float %2678, 1.000000e+00, !dbg !105
  %2756 = fadd float %2680, 1.000000e+00, !dbg !105
  %2757 = fadd float %2682, 1.000000e+00, !dbg !105
  %2758 = fadd float %2684, 1.000000e+00, !dbg !105
  %2759 = fadd float %2686, 1.000000e+00, !dbg !105
  %2760 = fadd float %2688, 1.000000e+00, !dbg !105
  %2761 = fadd float %2690, 1.000000e+00, !dbg !105
  %2762 = fadd float %2692, 1.000000e+00, !dbg !105
  %2763 = fadd float %2694, 1.000000e+00, !dbg !105
  %2764 = fadd float %2696, 1.000000e+00, !dbg !105
  %2765 = fadd float %2698, 1.000000e+00, !dbg !105
  %2766 = fadd float %2700, 1.000000e+00, !dbg !105
  %2767 = fadd float %2702, 1.000000e+00, !dbg !105
  %2768 = fadd float %2704, 1.000000e+00, !dbg !105
  %2769 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2319, float %2705, i1 false), !dbg !106
  %2770 = extractvalue { float, i1 } %2769, 0, !dbg !106
  %2771 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2319, float %2705, i1 true), !dbg !106
  %2772 = extractvalue { float, i1 } %2771, 0, !dbg !106
  %2773 = extractvalue { float, i1 } %2771, 1, !dbg !106
  %2774 = tail call float @llvm.amdgcn.rcp.f32(float %2770), !dbg !106
  %2775 = fmul float %2772, %2774, !dbg !106
  %2776 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2775, i1 %2773), !dbg !106
  %2777 = tail call float @llvm.amdgcn.div.fixup.f32(float %2776, float %2705, float %2319), !dbg !106
  %2778 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2320, float %2706, i1 false), !dbg !106
  %2779 = extractvalue { float, i1 } %2778, 0, !dbg !106
  %2780 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2320, float %2706, i1 true), !dbg !106
  %2781 = extractvalue { float, i1 } %2780, 0, !dbg !106
  %2782 = extractvalue { float, i1 } %2780, 1, !dbg !106
  %2783 = tail call float @llvm.amdgcn.rcp.f32(float %2779), !dbg !106
  %2784 = fmul float %2781, %2783, !dbg !106
  %2785 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2784, i1 %2782), !dbg !106
  %2786 = tail call float @llvm.amdgcn.div.fixup.f32(float %2785, float %2706, float %2320), !dbg !106
  %2787 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2321, float %2707, i1 false), !dbg !106
  %2788 = extractvalue { float, i1 } %2787, 0, !dbg !106
  %2789 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2321, float %2707, i1 true), !dbg !106
  %2790 = extractvalue { float, i1 } %2789, 0, !dbg !106
  %2791 = extractvalue { float, i1 } %2789, 1, !dbg !106
  %2792 = tail call float @llvm.amdgcn.rcp.f32(float %2788), !dbg !106
  %2793 = fmul float %2790, %2792, !dbg !106
  %2794 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2793, i1 %2791), !dbg !106
  %2795 = tail call float @llvm.amdgcn.div.fixup.f32(float %2794, float %2707, float %2321), !dbg !106
  %2796 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2322, float %2708, i1 false), !dbg !106
  %2797 = extractvalue { float, i1 } %2796, 0, !dbg !106
  %2798 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2322, float %2708, i1 true), !dbg !106
  %2799 = extractvalue { float, i1 } %2798, 0, !dbg !106
  %2800 = extractvalue { float, i1 } %2798, 1, !dbg !106
  %2801 = tail call float @llvm.amdgcn.rcp.f32(float %2797), !dbg !106
  %2802 = fmul float %2799, %2801, !dbg !106
  %2803 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2802, i1 %2800), !dbg !106
  %2804 = tail call float @llvm.amdgcn.div.fixup.f32(float %2803, float %2708, float %2322), !dbg !106
  %2805 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2323, float %2709, i1 false), !dbg !106
  %2806 = extractvalue { float, i1 } %2805, 0, !dbg !106
  %2807 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2323, float %2709, i1 true), !dbg !106
  %2808 = extractvalue { float, i1 } %2807, 0, !dbg !106
  %2809 = extractvalue { float, i1 } %2807, 1, !dbg !106
  %2810 = tail call float @llvm.amdgcn.rcp.f32(float %2806), !dbg !106
  %2811 = fmul float %2808, %2810, !dbg !106
  %2812 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2811, i1 %2809), !dbg !106
  %2813 = tail call float @llvm.amdgcn.div.fixup.f32(float %2812, float %2709, float %2323), !dbg !106
  %2814 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2324, float %2710, i1 false), !dbg !106
  %2815 = extractvalue { float, i1 } %2814, 0, !dbg !106
  %2816 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2324, float %2710, i1 true), !dbg !106
  %2817 = extractvalue { float, i1 } %2816, 0, !dbg !106
  %2818 = extractvalue { float, i1 } %2816, 1, !dbg !106
  %2819 = tail call float @llvm.amdgcn.rcp.f32(float %2815), !dbg !106
  %2820 = fmul float %2817, %2819, !dbg !106
  %2821 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2820, i1 %2818), !dbg !106
  %2822 = tail call float @llvm.amdgcn.div.fixup.f32(float %2821, float %2710, float %2324), !dbg !106
  %2823 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2325, float %2711, i1 false), !dbg !106
  %2824 = extractvalue { float, i1 } %2823, 0, !dbg !106
  %2825 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2325, float %2711, i1 true), !dbg !106
  %2826 = extractvalue { float, i1 } %2825, 0, !dbg !106
  %2827 = extractvalue { float, i1 } %2825, 1, !dbg !106
  %2828 = tail call float @llvm.amdgcn.rcp.f32(float %2824), !dbg !106
  %2829 = fmul float %2826, %2828, !dbg !106
  %2830 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2829, i1 %2827), !dbg !106
  %2831 = tail call float @llvm.amdgcn.div.fixup.f32(float %2830, float %2711, float %2325), !dbg !106
  %2832 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2326, float %2712, i1 false), !dbg !106
  %2833 = extractvalue { float, i1 } %2832, 0, !dbg !106
  %2834 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2326, float %2712, i1 true), !dbg !106
  %2835 = extractvalue { float, i1 } %2834, 0, !dbg !106
  %2836 = extractvalue { float, i1 } %2834, 1, !dbg !106
  %2837 = tail call float @llvm.amdgcn.rcp.f32(float %2833), !dbg !106
  %2838 = fmul float %2835, %2837, !dbg !106
  %2839 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2838, i1 %2836), !dbg !106
  %2840 = tail call float @llvm.amdgcn.div.fixup.f32(float %2839, float %2712, float %2326), !dbg !106
  %2841 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2327, float %2713, i1 false), !dbg !106
  %2842 = extractvalue { float, i1 } %2841, 0, !dbg !106
  %2843 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2327, float %2713, i1 true), !dbg !106
  %2844 = extractvalue { float, i1 } %2843, 0, !dbg !106
  %2845 = extractvalue { float, i1 } %2843, 1, !dbg !106
  %2846 = tail call float @llvm.amdgcn.rcp.f32(float %2842), !dbg !106
  %2847 = fmul float %2844, %2846, !dbg !106
  %2848 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2847, i1 %2845), !dbg !106
  %2849 = tail call float @llvm.amdgcn.div.fixup.f32(float %2848, float %2713, float %2327), !dbg !106
  %2850 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2328, float %2714, i1 false), !dbg !106
  %2851 = extractvalue { float, i1 } %2850, 0, !dbg !106
  %2852 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2328, float %2714, i1 true), !dbg !106
  %2853 = extractvalue { float, i1 } %2852, 0, !dbg !106
  %2854 = extractvalue { float, i1 } %2852, 1, !dbg !106
  %2855 = tail call float @llvm.amdgcn.rcp.f32(float %2851), !dbg !106
  %2856 = fmul float %2853, %2855, !dbg !106
  %2857 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2856, i1 %2854), !dbg !106
  %2858 = tail call float @llvm.amdgcn.div.fixup.f32(float %2857, float %2714, float %2328), !dbg !106
  %2859 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2329, float %2715, i1 false), !dbg !106
  %2860 = extractvalue { float, i1 } %2859, 0, !dbg !106
  %2861 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2329, float %2715, i1 true), !dbg !106
  %2862 = extractvalue { float, i1 } %2861, 0, !dbg !106
  %2863 = extractvalue { float, i1 } %2861, 1, !dbg !106
  %2864 = tail call float @llvm.amdgcn.rcp.f32(float %2860), !dbg !106
  %2865 = fmul float %2862, %2864, !dbg !106
  %2866 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2865, i1 %2863), !dbg !106
  %2867 = tail call float @llvm.amdgcn.div.fixup.f32(float %2866, float %2715, float %2329), !dbg !106
  %2868 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2330, float %2716, i1 false), !dbg !106
  %2869 = extractvalue { float, i1 } %2868, 0, !dbg !106
  %2870 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2330, float %2716, i1 true), !dbg !106
  %2871 = extractvalue { float, i1 } %2870, 0, !dbg !106
  %2872 = extractvalue { float, i1 } %2870, 1, !dbg !106
  %2873 = tail call float @llvm.amdgcn.rcp.f32(float %2869), !dbg !106
  %2874 = fmul float %2871, %2873, !dbg !106
  %2875 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2874, i1 %2872), !dbg !106
  %2876 = tail call float @llvm.amdgcn.div.fixup.f32(float %2875, float %2716, float %2330), !dbg !106
  %2877 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2331, float %2717, i1 false), !dbg !106
  %2878 = extractvalue { float, i1 } %2877, 0, !dbg !106
  %2879 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2331, float %2717, i1 true), !dbg !106
  %2880 = extractvalue { float, i1 } %2879, 0, !dbg !106
  %2881 = extractvalue { float, i1 } %2879, 1, !dbg !106
  %2882 = tail call float @llvm.amdgcn.rcp.f32(float %2878), !dbg !106
  %2883 = fmul float %2880, %2882, !dbg !106
  %2884 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2883, i1 %2881), !dbg !106
  %2885 = tail call float @llvm.amdgcn.div.fixup.f32(float %2884, float %2717, float %2331), !dbg !106
  %2886 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2332, float %2718, i1 false), !dbg !106
  %2887 = extractvalue { float, i1 } %2886, 0, !dbg !106
  %2888 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2332, float %2718, i1 true), !dbg !106
  %2889 = extractvalue { float, i1 } %2888, 0, !dbg !106
  %2890 = extractvalue { float, i1 } %2888, 1, !dbg !106
  %2891 = tail call float @llvm.amdgcn.rcp.f32(float %2887), !dbg !106
  %2892 = fmul float %2889, %2891, !dbg !106
  %2893 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2892, i1 %2890), !dbg !106
  %2894 = tail call float @llvm.amdgcn.div.fixup.f32(float %2893, float %2718, float %2332), !dbg !106
  %2895 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2333, float %2719, i1 false), !dbg !106
  %2896 = extractvalue { float, i1 } %2895, 0, !dbg !106
  %2897 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2333, float %2719, i1 true), !dbg !106
  %2898 = extractvalue { float, i1 } %2897, 0, !dbg !106
  %2899 = extractvalue { float, i1 } %2897, 1, !dbg !106
  %2900 = tail call float @llvm.amdgcn.rcp.f32(float %2896), !dbg !106
  %2901 = fmul float %2898, %2900, !dbg !106
  %2902 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2901, i1 %2899), !dbg !106
  %2903 = tail call float @llvm.amdgcn.div.fixup.f32(float %2902, float %2719, float %2333), !dbg !106
  %2904 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2334, float %2720, i1 false), !dbg !106
  %2905 = extractvalue { float, i1 } %2904, 0, !dbg !106
  %2906 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2334, float %2720, i1 true), !dbg !106
  %2907 = extractvalue { float, i1 } %2906, 0, !dbg !106
  %2908 = extractvalue { float, i1 } %2906, 1, !dbg !106
  %2909 = tail call float @llvm.amdgcn.rcp.f32(float %2905), !dbg !106
  %2910 = fmul float %2907, %2909, !dbg !106
  %2911 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2910, i1 %2908), !dbg !106
  %2912 = tail call float @llvm.amdgcn.div.fixup.f32(float %2911, float %2720, float %2334), !dbg !106
  %2913 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2335, float %2721, i1 false), !dbg !106
  %2914 = extractvalue { float, i1 } %2913, 0, !dbg !106
  %2915 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2335, float %2721, i1 true), !dbg !106
  %2916 = extractvalue { float, i1 } %2915, 0, !dbg !106
  %2917 = extractvalue { float, i1 } %2915, 1, !dbg !106
  %2918 = tail call float @llvm.amdgcn.rcp.f32(float %2914), !dbg !106
  %2919 = fmul float %2916, %2918, !dbg !106
  %2920 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2919, i1 %2917), !dbg !106
  %2921 = tail call float @llvm.amdgcn.div.fixup.f32(float %2920, float %2721, float %2335), !dbg !106
  %2922 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2336, float %2722, i1 false), !dbg !106
  %2923 = extractvalue { float, i1 } %2922, 0, !dbg !106
  %2924 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2336, float %2722, i1 true), !dbg !106
  %2925 = extractvalue { float, i1 } %2924, 0, !dbg !106
  %2926 = extractvalue { float, i1 } %2924, 1, !dbg !106
  %2927 = tail call float @llvm.amdgcn.rcp.f32(float %2923), !dbg !106
  %2928 = fmul float %2925, %2927, !dbg !106
  %2929 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2928, i1 %2926), !dbg !106
  %2930 = tail call float @llvm.amdgcn.div.fixup.f32(float %2929, float %2722, float %2336), !dbg !106
  %2931 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2337, float %2723, i1 false), !dbg !106
  %2932 = extractvalue { float, i1 } %2931, 0, !dbg !106
  %2933 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2337, float %2723, i1 true), !dbg !106
  %2934 = extractvalue { float, i1 } %2933, 0, !dbg !106
  %2935 = extractvalue { float, i1 } %2933, 1, !dbg !106
  %2936 = tail call float @llvm.amdgcn.rcp.f32(float %2932), !dbg !106
  %2937 = fmul float %2934, %2936, !dbg !106
  %2938 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2937, i1 %2935), !dbg !106
  %2939 = tail call float @llvm.amdgcn.div.fixup.f32(float %2938, float %2723, float %2337), !dbg !106
  %2940 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2338, float %2724, i1 false), !dbg !106
  %2941 = extractvalue { float, i1 } %2940, 0, !dbg !106
  %2942 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2338, float %2724, i1 true), !dbg !106
  %2943 = extractvalue { float, i1 } %2942, 0, !dbg !106
  %2944 = extractvalue { float, i1 } %2942, 1, !dbg !106
  %2945 = tail call float @llvm.amdgcn.rcp.f32(float %2941), !dbg !106
  %2946 = fmul float %2943, %2945, !dbg !106
  %2947 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2946, i1 %2944), !dbg !106
  %2948 = tail call float @llvm.amdgcn.div.fixup.f32(float %2947, float %2724, float %2338), !dbg !106
  %2949 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2339, float %2725, i1 false), !dbg !106
  %2950 = extractvalue { float, i1 } %2949, 0, !dbg !106
  %2951 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2339, float %2725, i1 true), !dbg !106
  %2952 = extractvalue { float, i1 } %2951, 0, !dbg !106
  %2953 = extractvalue { float, i1 } %2951, 1, !dbg !106
  %2954 = tail call float @llvm.amdgcn.rcp.f32(float %2950), !dbg !106
  %2955 = fmul float %2952, %2954, !dbg !106
  %2956 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2955, i1 %2953), !dbg !106
  %2957 = tail call float @llvm.amdgcn.div.fixup.f32(float %2956, float %2725, float %2339), !dbg !106
  %2958 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2340, float %2726, i1 false), !dbg !106
  %2959 = extractvalue { float, i1 } %2958, 0, !dbg !106
  %2960 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2340, float %2726, i1 true), !dbg !106
  %2961 = extractvalue { float, i1 } %2960, 0, !dbg !106
  %2962 = extractvalue { float, i1 } %2960, 1, !dbg !106
  %2963 = tail call float @llvm.amdgcn.rcp.f32(float %2959), !dbg !106
  %2964 = fmul float %2961, %2963, !dbg !106
  %2965 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2964, i1 %2962), !dbg !106
  %2966 = tail call float @llvm.amdgcn.div.fixup.f32(float %2965, float %2726, float %2340), !dbg !106
  %2967 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2341, float %2727, i1 false), !dbg !106
  %2968 = extractvalue { float, i1 } %2967, 0, !dbg !106
  %2969 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2341, float %2727, i1 true), !dbg !106
  %2970 = extractvalue { float, i1 } %2969, 0, !dbg !106
  %2971 = extractvalue { float, i1 } %2969, 1, !dbg !106
  %2972 = tail call float @llvm.amdgcn.rcp.f32(float %2968), !dbg !106
  %2973 = fmul float %2970, %2972, !dbg !106
  %2974 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2973, i1 %2971), !dbg !106
  %2975 = tail call float @llvm.amdgcn.div.fixup.f32(float %2974, float %2727, float %2341), !dbg !106
  %2976 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2342, float %2728, i1 false), !dbg !106
  %2977 = extractvalue { float, i1 } %2976, 0, !dbg !106
  %2978 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2342, float %2728, i1 true), !dbg !106
  %2979 = extractvalue { float, i1 } %2978, 0, !dbg !106
  %2980 = extractvalue { float, i1 } %2978, 1, !dbg !106
  %2981 = tail call float @llvm.amdgcn.rcp.f32(float %2977), !dbg !106
  %2982 = fmul float %2979, %2981, !dbg !106
  %2983 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2982, i1 %2980), !dbg !106
  %2984 = tail call float @llvm.amdgcn.div.fixup.f32(float %2983, float %2728, float %2342), !dbg !106
  %2985 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2343, float %2729, i1 false), !dbg !106
  %2986 = extractvalue { float, i1 } %2985, 0, !dbg !106
  %2987 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2343, float %2729, i1 true), !dbg !106
  %2988 = extractvalue { float, i1 } %2987, 0, !dbg !106
  %2989 = extractvalue { float, i1 } %2987, 1, !dbg !106
  %2990 = tail call float @llvm.amdgcn.rcp.f32(float %2986), !dbg !106
  %2991 = fmul float %2988, %2990, !dbg !106
  %2992 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %2991, i1 %2989), !dbg !106
  %2993 = tail call float @llvm.amdgcn.div.fixup.f32(float %2992, float %2729, float %2343), !dbg !106
  %2994 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2344, float %2730, i1 false), !dbg !106
  %2995 = extractvalue { float, i1 } %2994, 0, !dbg !106
  %2996 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2344, float %2730, i1 true), !dbg !106
  %2997 = extractvalue { float, i1 } %2996, 0, !dbg !106
  %2998 = extractvalue { float, i1 } %2996, 1, !dbg !106
  %2999 = tail call float @llvm.amdgcn.rcp.f32(float %2995), !dbg !106
  %3000 = fmul float %2997, %2999, !dbg !106
  %3001 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3000, i1 %2998), !dbg !106
  %3002 = tail call float @llvm.amdgcn.div.fixup.f32(float %3001, float %2730, float %2344), !dbg !106
  %3003 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2345, float %2731, i1 false), !dbg !106
  %3004 = extractvalue { float, i1 } %3003, 0, !dbg !106
  %3005 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2345, float %2731, i1 true), !dbg !106
  %3006 = extractvalue { float, i1 } %3005, 0, !dbg !106
  %3007 = extractvalue { float, i1 } %3005, 1, !dbg !106
  %3008 = tail call float @llvm.amdgcn.rcp.f32(float %3004), !dbg !106
  %3009 = fmul float %3006, %3008, !dbg !106
  %3010 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3009, i1 %3007), !dbg !106
  %3011 = tail call float @llvm.amdgcn.div.fixup.f32(float %3010, float %2731, float %2345), !dbg !106
  %3012 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2346, float %2732, i1 false), !dbg !106
  %3013 = extractvalue { float, i1 } %3012, 0, !dbg !106
  %3014 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2346, float %2732, i1 true), !dbg !106
  %3015 = extractvalue { float, i1 } %3014, 0, !dbg !106
  %3016 = extractvalue { float, i1 } %3014, 1, !dbg !106
  %3017 = tail call float @llvm.amdgcn.rcp.f32(float %3013), !dbg !106
  %3018 = fmul float %3015, %3017, !dbg !106
  %3019 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3018, i1 %3016), !dbg !106
  %3020 = tail call float @llvm.amdgcn.div.fixup.f32(float %3019, float %2732, float %2346), !dbg !106
  %3021 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2347, float %2733, i1 false), !dbg !106
  %3022 = extractvalue { float, i1 } %3021, 0, !dbg !106
  %3023 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2347, float %2733, i1 true), !dbg !106
  %3024 = extractvalue { float, i1 } %3023, 0, !dbg !106
  %3025 = extractvalue { float, i1 } %3023, 1, !dbg !106
  %3026 = tail call float @llvm.amdgcn.rcp.f32(float %3022), !dbg !106
  %3027 = fmul float %3024, %3026, !dbg !106
  %3028 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3027, i1 %3025), !dbg !106
  %3029 = tail call float @llvm.amdgcn.div.fixup.f32(float %3028, float %2733, float %2347), !dbg !106
  %3030 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2348, float %2734, i1 false), !dbg !106
  %3031 = extractvalue { float, i1 } %3030, 0, !dbg !106
  %3032 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2348, float %2734, i1 true), !dbg !106
  %3033 = extractvalue { float, i1 } %3032, 0, !dbg !106
  %3034 = extractvalue { float, i1 } %3032, 1, !dbg !106
  %3035 = tail call float @llvm.amdgcn.rcp.f32(float %3031), !dbg !106
  %3036 = fmul float %3033, %3035, !dbg !106
  %3037 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3036, i1 %3034), !dbg !106
  %3038 = tail call float @llvm.amdgcn.div.fixup.f32(float %3037, float %2734, float %2348), !dbg !106
  %3039 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2349, float %2735, i1 false), !dbg !106
  %3040 = extractvalue { float, i1 } %3039, 0, !dbg !106
  %3041 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2349, float %2735, i1 true), !dbg !106
  %3042 = extractvalue { float, i1 } %3041, 0, !dbg !106
  %3043 = extractvalue { float, i1 } %3041, 1, !dbg !106
  %3044 = tail call float @llvm.amdgcn.rcp.f32(float %3040), !dbg !106
  %3045 = fmul float %3042, %3044, !dbg !106
  %3046 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3045, i1 %3043), !dbg !106
  %3047 = tail call float @llvm.amdgcn.div.fixup.f32(float %3046, float %2735, float %2349), !dbg !106
  %3048 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2350, float %2736, i1 false), !dbg !106
  %3049 = extractvalue { float, i1 } %3048, 0, !dbg !106
  %3050 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2350, float %2736, i1 true), !dbg !106
  %3051 = extractvalue { float, i1 } %3050, 0, !dbg !106
  %3052 = extractvalue { float, i1 } %3050, 1, !dbg !106
  %3053 = tail call float @llvm.amdgcn.rcp.f32(float %3049), !dbg !106
  %3054 = fmul float %3051, %3053, !dbg !106
  %3055 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3054, i1 %3052), !dbg !106
  %3056 = tail call float @llvm.amdgcn.div.fixup.f32(float %3055, float %2736, float %2350), !dbg !106
  %3057 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2351, float %2737, i1 false), !dbg !106
  %3058 = extractvalue { float, i1 } %3057, 0, !dbg !106
  %3059 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2351, float %2737, i1 true), !dbg !106
  %3060 = extractvalue { float, i1 } %3059, 0, !dbg !106
  %3061 = extractvalue { float, i1 } %3059, 1, !dbg !106
  %3062 = tail call float @llvm.amdgcn.rcp.f32(float %3058), !dbg !106
  %3063 = fmul float %3060, %3062, !dbg !106
  %3064 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3063, i1 %3061), !dbg !106
  %3065 = tail call float @llvm.amdgcn.div.fixup.f32(float %3064, float %2737, float %2351), !dbg !106
  %3066 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2352, float %2738, i1 false), !dbg !106
  %3067 = extractvalue { float, i1 } %3066, 0, !dbg !106
  %3068 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2352, float %2738, i1 true), !dbg !106
  %3069 = extractvalue { float, i1 } %3068, 0, !dbg !106
  %3070 = extractvalue { float, i1 } %3068, 1, !dbg !106
  %3071 = tail call float @llvm.amdgcn.rcp.f32(float %3067), !dbg !106
  %3072 = fmul float %3069, %3071, !dbg !106
  %3073 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3072, i1 %3070), !dbg !106
  %3074 = tail call float @llvm.amdgcn.div.fixup.f32(float %3073, float %2738, float %2352), !dbg !106
  %3075 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2353, float %2739, i1 false), !dbg !106
  %3076 = extractvalue { float, i1 } %3075, 0, !dbg !106
  %3077 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2353, float %2739, i1 true), !dbg !106
  %3078 = extractvalue { float, i1 } %3077, 0, !dbg !106
  %3079 = extractvalue { float, i1 } %3077, 1, !dbg !106
  %3080 = tail call float @llvm.amdgcn.rcp.f32(float %3076), !dbg !106
  %3081 = fmul float %3078, %3080, !dbg !106
  %3082 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3081, i1 %3079), !dbg !106
  %3083 = tail call float @llvm.amdgcn.div.fixup.f32(float %3082, float %2739, float %2353), !dbg !106
  %3084 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2354, float %2740, i1 false), !dbg !106
  %3085 = extractvalue { float, i1 } %3084, 0, !dbg !106
  %3086 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2354, float %2740, i1 true), !dbg !106
  %3087 = extractvalue { float, i1 } %3086, 0, !dbg !106
  %3088 = extractvalue { float, i1 } %3086, 1, !dbg !106
  %3089 = tail call float @llvm.amdgcn.rcp.f32(float %3085), !dbg !106
  %3090 = fmul float %3087, %3089, !dbg !106
  %3091 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3090, i1 %3088), !dbg !106
  %3092 = tail call float @llvm.amdgcn.div.fixup.f32(float %3091, float %2740, float %2354), !dbg !106
  %3093 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2355, float %2741, i1 false), !dbg !106
  %3094 = extractvalue { float, i1 } %3093, 0, !dbg !106
  %3095 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2355, float %2741, i1 true), !dbg !106
  %3096 = extractvalue { float, i1 } %3095, 0, !dbg !106
  %3097 = extractvalue { float, i1 } %3095, 1, !dbg !106
  %3098 = tail call float @llvm.amdgcn.rcp.f32(float %3094), !dbg !106
  %3099 = fmul float %3096, %3098, !dbg !106
  %3100 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3099, i1 %3097), !dbg !106
  %3101 = tail call float @llvm.amdgcn.div.fixup.f32(float %3100, float %2741, float %2355), !dbg !106
  %3102 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2356, float %2742, i1 false), !dbg !106
  %3103 = extractvalue { float, i1 } %3102, 0, !dbg !106
  %3104 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2356, float %2742, i1 true), !dbg !106
  %3105 = extractvalue { float, i1 } %3104, 0, !dbg !106
  %3106 = extractvalue { float, i1 } %3104, 1, !dbg !106
  %3107 = tail call float @llvm.amdgcn.rcp.f32(float %3103), !dbg !106
  %3108 = fmul float %3105, %3107, !dbg !106
  %3109 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3108, i1 %3106), !dbg !106
  %3110 = tail call float @llvm.amdgcn.div.fixup.f32(float %3109, float %2742, float %2356), !dbg !106
  %3111 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2357, float %2743, i1 false), !dbg !106
  %3112 = extractvalue { float, i1 } %3111, 0, !dbg !106
  %3113 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2357, float %2743, i1 true), !dbg !106
  %3114 = extractvalue { float, i1 } %3113, 0, !dbg !106
  %3115 = extractvalue { float, i1 } %3113, 1, !dbg !106
  %3116 = tail call float @llvm.amdgcn.rcp.f32(float %3112), !dbg !106
  %3117 = fmul float %3114, %3116, !dbg !106
  %3118 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3117, i1 %3115), !dbg !106
  %3119 = tail call float @llvm.amdgcn.div.fixup.f32(float %3118, float %2743, float %2357), !dbg !106
  %3120 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2358, float %2744, i1 false), !dbg !106
  %3121 = extractvalue { float, i1 } %3120, 0, !dbg !106
  %3122 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2358, float %2744, i1 true), !dbg !106
  %3123 = extractvalue { float, i1 } %3122, 0, !dbg !106
  %3124 = extractvalue { float, i1 } %3122, 1, !dbg !106
  %3125 = tail call float @llvm.amdgcn.rcp.f32(float %3121), !dbg !106
  %3126 = fmul float %3123, %3125, !dbg !106
  %3127 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3126, i1 %3124), !dbg !106
  %3128 = tail call float @llvm.amdgcn.div.fixup.f32(float %3127, float %2744, float %2358), !dbg !106
  %3129 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2359, float %2745, i1 false), !dbg !106
  %3130 = extractvalue { float, i1 } %3129, 0, !dbg !106
  %3131 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2359, float %2745, i1 true), !dbg !106
  %3132 = extractvalue { float, i1 } %3131, 0, !dbg !106
  %3133 = extractvalue { float, i1 } %3131, 1, !dbg !106
  %3134 = tail call float @llvm.amdgcn.rcp.f32(float %3130), !dbg !106
  %3135 = fmul float %3132, %3134, !dbg !106
  %3136 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3135, i1 %3133), !dbg !106
  %3137 = tail call float @llvm.amdgcn.div.fixup.f32(float %3136, float %2745, float %2359), !dbg !106
  %3138 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2360, float %2746, i1 false), !dbg !106
  %3139 = extractvalue { float, i1 } %3138, 0, !dbg !106
  %3140 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2360, float %2746, i1 true), !dbg !106
  %3141 = extractvalue { float, i1 } %3140, 0, !dbg !106
  %3142 = extractvalue { float, i1 } %3140, 1, !dbg !106
  %3143 = tail call float @llvm.amdgcn.rcp.f32(float %3139), !dbg !106
  %3144 = fmul float %3141, %3143, !dbg !106
  %3145 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3144, i1 %3142), !dbg !106
  %3146 = tail call float @llvm.amdgcn.div.fixup.f32(float %3145, float %2746, float %2360), !dbg !106
  %3147 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2361, float %2747, i1 false), !dbg !106
  %3148 = extractvalue { float, i1 } %3147, 0, !dbg !106
  %3149 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2361, float %2747, i1 true), !dbg !106
  %3150 = extractvalue { float, i1 } %3149, 0, !dbg !106
  %3151 = extractvalue { float, i1 } %3149, 1, !dbg !106
  %3152 = tail call float @llvm.amdgcn.rcp.f32(float %3148), !dbg !106
  %3153 = fmul float %3150, %3152, !dbg !106
  %3154 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3153, i1 %3151), !dbg !106
  %3155 = tail call float @llvm.amdgcn.div.fixup.f32(float %3154, float %2747, float %2361), !dbg !106
  %3156 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2362, float %2748, i1 false), !dbg !106
  %3157 = extractvalue { float, i1 } %3156, 0, !dbg !106
  %3158 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2362, float %2748, i1 true), !dbg !106
  %3159 = extractvalue { float, i1 } %3158, 0, !dbg !106
  %3160 = extractvalue { float, i1 } %3158, 1, !dbg !106
  %3161 = tail call float @llvm.amdgcn.rcp.f32(float %3157), !dbg !106
  %3162 = fmul float %3159, %3161, !dbg !106
  %3163 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3162, i1 %3160), !dbg !106
  %3164 = tail call float @llvm.amdgcn.div.fixup.f32(float %3163, float %2748, float %2362), !dbg !106
  %3165 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2363, float %2749, i1 false), !dbg !106
  %3166 = extractvalue { float, i1 } %3165, 0, !dbg !106
  %3167 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2363, float %2749, i1 true), !dbg !106
  %3168 = extractvalue { float, i1 } %3167, 0, !dbg !106
  %3169 = extractvalue { float, i1 } %3167, 1, !dbg !106
  %3170 = tail call float @llvm.amdgcn.rcp.f32(float %3166), !dbg !106
  %3171 = fmul float %3168, %3170, !dbg !106
  %3172 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3171, i1 %3169), !dbg !106
  %3173 = tail call float @llvm.amdgcn.div.fixup.f32(float %3172, float %2749, float %2363), !dbg !106
  %3174 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2364, float %2750, i1 false), !dbg !106
  %3175 = extractvalue { float, i1 } %3174, 0, !dbg !106
  %3176 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2364, float %2750, i1 true), !dbg !106
  %3177 = extractvalue { float, i1 } %3176, 0, !dbg !106
  %3178 = extractvalue { float, i1 } %3176, 1, !dbg !106
  %3179 = tail call float @llvm.amdgcn.rcp.f32(float %3175), !dbg !106
  %3180 = fmul float %3177, %3179, !dbg !106
  %3181 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3180, i1 %3178), !dbg !106
  %3182 = tail call float @llvm.amdgcn.div.fixup.f32(float %3181, float %2750, float %2364), !dbg !106
  %3183 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2365, float %2751, i1 false), !dbg !106
  %3184 = extractvalue { float, i1 } %3183, 0, !dbg !106
  %3185 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2365, float %2751, i1 true), !dbg !106
  %3186 = extractvalue { float, i1 } %3185, 0, !dbg !106
  %3187 = extractvalue { float, i1 } %3185, 1, !dbg !106
  %3188 = tail call float @llvm.amdgcn.rcp.f32(float %3184), !dbg !106
  %3189 = fmul float %3186, %3188, !dbg !106
  %3190 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3189, i1 %3187), !dbg !106
  %3191 = tail call float @llvm.amdgcn.div.fixup.f32(float %3190, float %2751, float %2365), !dbg !106
  %3192 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2366, float %2752, i1 false), !dbg !106
  %3193 = extractvalue { float, i1 } %3192, 0, !dbg !106
  %3194 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2366, float %2752, i1 true), !dbg !106
  %3195 = extractvalue { float, i1 } %3194, 0, !dbg !106
  %3196 = extractvalue { float, i1 } %3194, 1, !dbg !106
  %3197 = tail call float @llvm.amdgcn.rcp.f32(float %3193), !dbg !106
  %3198 = fmul float %3195, %3197, !dbg !106
  %3199 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3198, i1 %3196), !dbg !106
  %3200 = tail call float @llvm.amdgcn.div.fixup.f32(float %3199, float %2752, float %2366), !dbg !106
  %3201 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2367, float %2753, i1 false), !dbg !106
  %3202 = extractvalue { float, i1 } %3201, 0, !dbg !106
  %3203 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2367, float %2753, i1 true), !dbg !106
  %3204 = extractvalue { float, i1 } %3203, 0, !dbg !106
  %3205 = extractvalue { float, i1 } %3203, 1, !dbg !106
  %3206 = tail call float @llvm.amdgcn.rcp.f32(float %3202), !dbg !106
  %3207 = fmul float %3204, %3206, !dbg !106
  %3208 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3207, i1 %3205), !dbg !106
  %3209 = tail call float @llvm.amdgcn.div.fixup.f32(float %3208, float %2753, float %2367), !dbg !106
  %3210 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2368, float %2754, i1 false), !dbg !106
  %3211 = extractvalue { float, i1 } %3210, 0, !dbg !106
  %3212 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2368, float %2754, i1 true), !dbg !106
  %3213 = extractvalue { float, i1 } %3212, 0, !dbg !106
  %3214 = extractvalue { float, i1 } %3212, 1, !dbg !106
  %3215 = tail call float @llvm.amdgcn.rcp.f32(float %3211), !dbg !106
  %3216 = fmul float %3213, %3215, !dbg !106
  %3217 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3216, i1 %3214), !dbg !106
  %3218 = tail call float @llvm.amdgcn.div.fixup.f32(float %3217, float %2754, float %2368), !dbg !106
  %3219 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2369, float %2755, i1 false), !dbg !106
  %3220 = extractvalue { float, i1 } %3219, 0, !dbg !106
  %3221 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2369, float %2755, i1 true), !dbg !106
  %3222 = extractvalue { float, i1 } %3221, 0, !dbg !106
  %3223 = extractvalue { float, i1 } %3221, 1, !dbg !106
  %3224 = tail call float @llvm.amdgcn.rcp.f32(float %3220), !dbg !106
  %3225 = fmul float %3222, %3224, !dbg !106
  %3226 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3225, i1 %3223), !dbg !106
  %3227 = tail call float @llvm.amdgcn.div.fixup.f32(float %3226, float %2755, float %2369), !dbg !106
  %3228 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2370, float %2756, i1 false), !dbg !106
  %3229 = extractvalue { float, i1 } %3228, 0, !dbg !106
  %3230 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2370, float %2756, i1 true), !dbg !106
  %3231 = extractvalue { float, i1 } %3230, 0, !dbg !106
  %3232 = extractvalue { float, i1 } %3230, 1, !dbg !106
  %3233 = tail call float @llvm.amdgcn.rcp.f32(float %3229), !dbg !106
  %3234 = fmul float %3231, %3233, !dbg !106
  %3235 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3234, i1 %3232), !dbg !106
  %3236 = tail call float @llvm.amdgcn.div.fixup.f32(float %3235, float %2756, float %2370), !dbg !106
  %3237 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2371, float %2757, i1 false), !dbg !106
  %3238 = extractvalue { float, i1 } %3237, 0, !dbg !106
  %3239 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2371, float %2757, i1 true), !dbg !106
  %3240 = extractvalue { float, i1 } %3239, 0, !dbg !106
  %3241 = extractvalue { float, i1 } %3239, 1, !dbg !106
  %3242 = tail call float @llvm.amdgcn.rcp.f32(float %3238), !dbg !106
  %3243 = fmul float %3240, %3242, !dbg !106
  %3244 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3243, i1 %3241), !dbg !106
  %3245 = tail call float @llvm.amdgcn.div.fixup.f32(float %3244, float %2757, float %2371), !dbg !106
  %3246 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2372, float %2758, i1 false), !dbg !106
  %3247 = extractvalue { float, i1 } %3246, 0, !dbg !106
  %3248 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2372, float %2758, i1 true), !dbg !106
  %3249 = extractvalue { float, i1 } %3248, 0, !dbg !106
  %3250 = extractvalue { float, i1 } %3248, 1, !dbg !106
  %3251 = tail call float @llvm.amdgcn.rcp.f32(float %3247), !dbg !106
  %3252 = fmul float %3249, %3251, !dbg !106
  %3253 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3252, i1 %3250), !dbg !106
  %3254 = tail call float @llvm.amdgcn.div.fixup.f32(float %3253, float %2758, float %2372), !dbg !106
  %3255 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2373, float %2759, i1 false), !dbg !106
  %3256 = extractvalue { float, i1 } %3255, 0, !dbg !106
  %3257 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2373, float %2759, i1 true), !dbg !106
  %3258 = extractvalue { float, i1 } %3257, 0, !dbg !106
  %3259 = extractvalue { float, i1 } %3257, 1, !dbg !106
  %3260 = tail call float @llvm.amdgcn.rcp.f32(float %3256), !dbg !106
  %3261 = fmul float %3258, %3260, !dbg !106
  %3262 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3261, i1 %3259), !dbg !106
  %3263 = tail call float @llvm.amdgcn.div.fixup.f32(float %3262, float %2759, float %2373), !dbg !106
  %3264 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2374, float %2760, i1 false), !dbg !106
  %3265 = extractvalue { float, i1 } %3264, 0, !dbg !106
  %3266 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2374, float %2760, i1 true), !dbg !106
  %3267 = extractvalue { float, i1 } %3266, 0, !dbg !106
  %3268 = extractvalue { float, i1 } %3266, 1, !dbg !106
  %3269 = tail call float @llvm.amdgcn.rcp.f32(float %3265), !dbg !106
  %3270 = fmul float %3267, %3269, !dbg !106
  %3271 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3270, i1 %3268), !dbg !106
  %3272 = tail call float @llvm.amdgcn.div.fixup.f32(float %3271, float %2760, float %2374), !dbg !106
  %3273 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2375, float %2761, i1 false), !dbg !106
  %3274 = extractvalue { float, i1 } %3273, 0, !dbg !106
  %3275 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2375, float %2761, i1 true), !dbg !106
  %3276 = extractvalue { float, i1 } %3275, 0, !dbg !106
  %3277 = extractvalue { float, i1 } %3275, 1, !dbg !106
  %3278 = tail call float @llvm.amdgcn.rcp.f32(float %3274), !dbg !106
  %3279 = fmul float %3276, %3278, !dbg !106
  %3280 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3279, i1 %3277), !dbg !106
  %3281 = tail call float @llvm.amdgcn.div.fixup.f32(float %3280, float %2761, float %2375), !dbg !106
  %3282 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2376, float %2762, i1 false), !dbg !106
  %3283 = extractvalue { float, i1 } %3282, 0, !dbg !106
  %3284 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2376, float %2762, i1 true), !dbg !106
  %3285 = extractvalue { float, i1 } %3284, 0, !dbg !106
  %3286 = extractvalue { float, i1 } %3284, 1, !dbg !106
  %3287 = tail call float @llvm.amdgcn.rcp.f32(float %3283), !dbg !106
  %3288 = fmul float %3285, %3287, !dbg !106
  %3289 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3288, i1 %3286), !dbg !106
  %3290 = tail call float @llvm.amdgcn.div.fixup.f32(float %3289, float %2762, float %2376), !dbg !106
  %3291 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2377, float %2763, i1 false), !dbg !106
  %3292 = extractvalue { float, i1 } %3291, 0, !dbg !106
  %3293 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2377, float %2763, i1 true), !dbg !106
  %3294 = extractvalue { float, i1 } %3293, 0, !dbg !106
  %3295 = extractvalue { float, i1 } %3293, 1, !dbg !106
  %3296 = tail call float @llvm.amdgcn.rcp.f32(float %3292), !dbg !106
  %3297 = fmul float %3294, %3296, !dbg !106
  %3298 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3297, i1 %3295), !dbg !106
  %3299 = tail call float @llvm.amdgcn.div.fixup.f32(float %3298, float %2763, float %2377), !dbg !106
  %3300 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2378, float %2764, i1 false), !dbg !106
  %3301 = extractvalue { float, i1 } %3300, 0, !dbg !106
  %3302 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2378, float %2764, i1 true), !dbg !106
  %3303 = extractvalue { float, i1 } %3302, 0, !dbg !106
  %3304 = extractvalue { float, i1 } %3302, 1, !dbg !106
  %3305 = tail call float @llvm.amdgcn.rcp.f32(float %3301), !dbg !106
  %3306 = fmul float %3303, %3305, !dbg !106
  %3307 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3306, i1 %3304), !dbg !106
  %3308 = tail call float @llvm.amdgcn.div.fixup.f32(float %3307, float %2764, float %2378), !dbg !106
  %3309 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2379, float %2765, i1 false), !dbg !106
  %3310 = extractvalue { float, i1 } %3309, 0, !dbg !106
  %3311 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2379, float %2765, i1 true), !dbg !106
  %3312 = extractvalue { float, i1 } %3311, 0, !dbg !106
  %3313 = extractvalue { float, i1 } %3311, 1, !dbg !106
  %3314 = tail call float @llvm.amdgcn.rcp.f32(float %3310), !dbg !106
  %3315 = fmul float %3312, %3314, !dbg !106
  %3316 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3315, i1 %3313), !dbg !106
  %3317 = tail call float @llvm.amdgcn.div.fixup.f32(float %3316, float %2765, float %2379), !dbg !106
  %3318 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2380, float %2766, i1 false), !dbg !106
  %3319 = extractvalue { float, i1 } %3318, 0, !dbg !106
  %3320 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2380, float %2766, i1 true), !dbg !106
  %3321 = extractvalue { float, i1 } %3320, 0, !dbg !106
  %3322 = extractvalue { float, i1 } %3320, 1, !dbg !106
  %3323 = tail call float @llvm.amdgcn.rcp.f32(float %3319), !dbg !106
  %3324 = fmul float %3321, %3323, !dbg !106
  %3325 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3324, i1 %3322), !dbg !106
  %3326 = tail call float @llvm.amdgcn.div.fixup.f32(float %3325, float %2766, float %2380), !dbg !106
  %3327 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2381, float %2767, i1 false), !dbg !106
  %3328 = extractvalue { float, i1 } %3327, 0, !dbg !106
  %3329 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2381, float %2767, i1 true), !dbg !106
  %3330 = extractvalue { float, i1 } %3329, 0, !dbg !106
  %3331 = extractvalue { float, i1 } %3329, 1, !dbg !106
  %3332 = tail call float @llvm.amdgcn.rcp.f32(float %3328), !dbg !106
  %3333 = fmul float %3330, %3332, !dbg !106
  %3334 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3333, i1 %3331), !dbg !106
  %3335 = tail call float @llvm.amdgcn.div.fixup.f32(float %3334, float %2767, float %2381), !dbg !106
  %3336 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2382, float %2768, i1 false), !dbg !106
  %3337 = extractvalue { float, i1 } %3336, 0, !dbg !106
  %3338 = tail call { float, i1 } @llvm.amdgcn.div.scale.f32(float %2382, float %2768, i1 true), !dbg !106
  %3339 = extractvalue { float, i1 } %3338, 0, !dbg !106
  %3340 = extractvalue { float, i1 } %3338, 1, !dbg !106
  %3341 = tail call float @llvm.amdgcn.rcp.f32(float %3337), !dbg !106
  %3342 = fmul float %3339, %3341, !dbg !106
  %3343 = tail call float @llvm.amdgcn.div.fmas.f32(float 0.000000e+00, float 0.000000e+00, float %3342, i1 %3340), !dbg !106
  %3344 = tail call float @llvm.amdgcn.div.fixup.f32(float %3343, float %2768, float %2382), !dbg !106
  %3345 = tail call float @llvm.fma.f32(float %2777, float %2448, float %2777), !dbg !107
  %3346 = tail call float @llvm.fma.f32(float %2786, float %2449, float %2786), !dbg !107
  %3347 = tail call float @llvm.fma.f32(float %2795, float %2450, float %2795), !dbg !107
  %3348 = tail call float @llvm.fma.f32(float %2804, float %2451, float %2804), !dbg !107
  %3349 = tail call float @llvm.fma.f32(float %2813, float %2452, float %2813), !dbg !107
  %3350 = tail call float @llvm.fma.f32(float %2822, float %2453, float %2822), !dbg !107
  %3351 = tail call float @llvm.fma.f32(float %2831, float %2454, float %2831), !dbg !107
  %3352 = tail call float @llvm.fma.f32(float %2840, float %2455, float %2840), !dbg !107
  %3353 = tail call float @llvm.fma.f32(float %2849, float %2456, float %2849), !dbg !107
  %3354 = tail call float @llvm.fma.f32(float %2858, float %2457, float %2858), !dbg !107
  %3355 = tail call float @llvm.fma.f32(float %2867, float %2458, float %2867), !dbg !107
  %3356 = tail call float @llvm.fma.f32(float %2876, float %2459, float %2876), !dbg !107
  %3357 = tail call float @llvm.fma.f32(float %2885, float %2460, float %2885), !dbg !107
  %3358 = tail call float @llvm.fma.f32(float %2894, float %2461, float %2894), !dbg !107
  %3359 = tail call float @llvm.fma.f32(float %2903, float %2462, float %2903), !dbg !107
  %3360 = tail call float @llvm.fma.f32(float %2912, float %2463, float %2912), !dbg !107
  %3361 = tail call float @llvm.fma.f32(float %2921, float %2464, float %2921), !dbg !107
  %3362 = tail call float @llvm.fma.f32(float %2930, float %2465, float %2930), !dbg !107
  %3363 = tail call float @llvm.fma.f32(float %2939, float %2466, float %2939), !dbg !107
  %3364 = tail call float @llvm.fma.f32(float %2948, float %2467, float %2948), !dbg !107
  %3365 = tail call float @llvm.fma.f32(float %2957, float %2468, float %2957), !dbg !107
  %3366 = tail call float @llvm.fma.f32(float %2966, float %2469, float %2966), !dbg !107
  %3367 = tail call float @llvm.fma.f32(float %2975, float %2470, float %2975), !dbg !107
  %3368 = tail call float @llvm.fma.f32(float %2984, float %2471, float %2984), !dbg !107
  %3369 = tail call float @llvm.fma.f32(float %2993, float %2472, float %2993), !dbg !107
  %3370 = tail call float @llvm.fma.f32(float %3002, float %2473, float %3002), !dbg !107
  %3371 = tail call float @llvm.fma.f32(float %3011, float %2474, float %3011), !dbg !107
  %3372 = tail call float @llvm.fma.f32(float %3020, float %2475, float %3020), !dbg !107
  %3373 = tail call float @llvm.fma.f32(float %3029, float %2476, float %3029), !dbg !107
  %3374 = tail call float @llvm.fma.f32(float %3038, float %2477, float %3038), !dbg !107
  %3375 = tail call float @llvm.fma.f32(float %3047, float %2478, float %3047), !dbg !107
  %3376 = tail call float @llvm.fma.f32(float %3056, float %2479, float %3056), !dbg !107
  %3377 = tail call float @llvm.fma.f32(float %3065, float %2480, float %3065), !dbg !107
  %3378 = tail call float @llvm.fma.f32(float %3074, float %2481, float %3074), !dbg !107
  %3379 = tail call float @llvm.fma.f32(float %3083, float %2482, float %3083), !dbg !107
  %3380 = tail call float @llvm.fma.f32(float %3092, float %2483, float %3092), !dbg !107
  %3381 = tail call float @llvm.fma.f32(float %3101, float %2484, float %3101), !dbg !107
  %3382 = tail call float @llvm.fma.f32(float %3110, float %2485, float %3110), !dbg !107
  %3383 = tail call float @llvm.fma.f32(float %3119, float %2486, float %3119), !dbg !107
  %3384 = tail call float @llvm.fma.f32(float %3128, float %2487, float %3128), !dbg !107
  %3385 = tail call float @llvm.fma.f32(float %3137, float %2488, float %3137), !dbg !107
  %3386 = tail call float @llvm.fma.f32(float %3146, float %2489, float %3146), !dbg !107
  %3387 = tail call float @llvm.fma.f32(float %3155, float %2490, float %3155), !dbg !107
  %3388 = tail call float @llvm.fma.f32(float %3164, float %2491, float %3164), !dbg !107
  %3389 = tail call float @llvm.fma.f32(float %3173, float %2492, float %3173), !dbg !107
  %3390 = tail call float @llvm.fma.f32(float %3182, float %2493, float %3182), !dbg !107
  %3391 = tail call float @llvm.fma.f32(float %3191, float %2494, float %3191), !dbg !107
  %3392 = tail call float @llvm.fma.f32(float %3200, float %2495, float %3200), !dbg !107
  %3393 = tail call float @llvm.fma.f32(float %3209, float %2496, float %3209), !dbg !107
  %3394 = tail call float @llvm.fma.f32(float %3218, float %2497, float %3218), !dbg !107
  %3395 = tail call float @llvm.fma.f32(float %3227, float %2498, float %3227), !dbg !107
  %3396 = tail call float @llvm.fma.f32(float %3236, float %2499, float %3236), !dbg !107
  %3397 = tail call float @llvm.fma.f32(float %3245, float %2500, float %3245), !dbg !107
  %3398 = tail call float @llvm.fma.f32(float %3254, float %2501, float %3254), !dbg !107
  %3399 = tail call float @llvm.fma.f32(float %3263, float %2502, float %3263), !dbg !107
  %3400 = tail call float @llvm.fma.f32(float %3272, float %2503, float %3272), !dbg !107
  %3401 = tail call float @llvm.fma.f32(float %3281, float %2504, float %3281), !dbg !107
  %3402 = tail call float @llvm.fma.f32(float %3290, float %2505, float %3290), !dbg !107
  %3403 = tail call float @llvm.fma.f32(float %3299, float %2506, float %3299), !dbg !107
  %3404 = tail call float @llvm.fma.f32(float %3308, float %2507, float %3308), !dbg !107
  %3405 = tail call float @llvm.fma.f32(float %3317, float %2508, float %3317), !dbg !107
  %3406 = tail call float @llvm.fma.f32(float %3326, float %2509, float %3326), !dbg !107
  %3407 = tail call float @llvm.fma.f32(float %3335, float %2510, float %3335), !dbg !107
  %3408 = tail call float @llvm.fma.f32(float %3344, float %2511, float %3344), !dbg !107
  %3409 = shl nsw i64 %75, 7, !dbg !108
  %3410 = or disjoint i64 %3409, %168, !dbg !109
  %3411 = or disjoint i64 %3409, %169, !dbg !109
  %3412 = sext i32 %30 to i64, !dbg !110
  %3413 = icmp slt i64 %3410, %3412, !dbg !110
  %3414 = icmp slt i64 %3411, %3412, !dbg !110
  %3415 = sext i32 %4 to i64, !dbg !111
  %3416 = mul nsw i64 %74, %3415, !dbg !111
  %3417 = getelementptr i8, ptr addrspace(1) %1, i64 %3416, !dbg !112
  %3418 = mul nsw i64 %76, %3415, !dbg !113
  %3419 = mul i32 %4, %94, !dbg !113
  %3420 = mul i32 %95, %4, !dbg !113
  %3421 = mul i32 %96, %4, !dbg !113
  %3422 = mul i32 %97, %4, !dbg !113
  %3423 = getelementptr i8, ptr addrspace(1) %3417, i64 %3418, !dbg !113
  %3424 = getelementptr i8, ptr addrspace(1) %3423, i64 %3409, !dbg !114
  %3425 = add i32 %3419, %159, !dbg !114
  %3426 = add i32 %3419, %160, !dbg !114
  %3427 = add i32 %3420, %159, !dbg !114
  %3428 = add i32 %3420, %160, !dbg !114
  %3429 = add i32 %3421, %159, !dbg !114
  %3430 = add i32 %3421, %160, !dbg !114
  %3431 = add i32 %3422, %159, !dbg !114
  %3432 = add i32 %3422, %160, !dbg !114
  %3433 = and i1 %2150, %3413, !dbg !115
  %3434 = and i1 %2150, %3414, !dbg !115
  %3435 = and i1 %2151, %3413, !dbg !115
  %3436 = and i1 %2151, %3414, !dbg !115
  %3437 = and i1 %2152, %3413, !dbg !115
  %3438 = and i1 %2152, %3414, !dbg !115
  %3439 = and i1 %2153, %3413, !dbg !115
  %3440 = and i1 %2153, %3414, !dbg !115
  %3441 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3345, float %3346, float 1.000000e+00, i1 false), !dbg !116
  %3442 = bitcast <2 x i16> %3441 to <4 x i8>, !dbg !116
  %3443 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3347, float %3348, float 1.000000e+00, i1 false), !dbg !116
  %3444 = bitcast <2 x i16> %3443 to <4 x i8>, !dbg !116
  %3445 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3349, float %3350, float 1.000000e+00, i1 false), !dbg !116
  %3446 = bitcast <2 x i16> %3445 to <4 x i8>, !dbg !116
  %3447 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3351, float %3352, float 1.000000e+00, i1 false), !dbg !116
  %3448 = bitcast <2 x i16> %3447 to <4 x i8>, !dbg !116
  %3449 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3353, float %3354, float 1.000000e+00, i1 false), !dbg !116
  %3450 = bitcast <2 x i16> %3449 to <4 x i8>, !dbg !116
  %3451 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3355, float %3356, float 1.000000e+00, i1 false), !dbg !116
  %3452 = bitcast <2 x i16> %3451 to <4 x i8>, !dbg !116
  %3453 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3357, float %3358, float 1.000000e+00, i1 false), !dbg !116
  %3454 = bitcast <2 x i16> %3453 to <4 x i8>, !dbg !116
  %3455 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3359, float %3360, float 1.000000e+00, i1 false), !dbg !116
  %3456 = bitcast <2 x i16> %3455 to <4 x i8>, !dbg !116
  %3457 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3361, float %3362, float 1.000000e+00, i1 false), !dbg !116
  %3458 = bitcast <2 x i16> %3457 to <4 x i8>, !dbg !116
  %3459 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3363, float %3364, float 1.000000e+00, i1 false), !dbg !116
  %3460 = bitcast <2 x i16> %3459 to <4 x i8>, !dbg !116
  %3461 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3365, float %3366, float 1.000000e+00, i1 false), !dbg !116
  %3462 = bitcast <2 x i16> %3461 to <4 x i8>, !dbg !116
  %3463 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3367, float %3368, float 1.000000e+00, i1 false), !dbg !116
  %3464 = bitcast <2 x i16> %3463 to <4 x i8>, !dbg !116
  %3465 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3369, float %3370, float 1.000000e+00, i1 false), !dbg !116
  %3466 = bitcast <2 x i16> %3465 to <4 x i8>, !dbg !116
  %3467 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3371, float %3372, float 1.000000e+00, i1 false), !dbg !116
  %3468 = bitcast <2 x i16> %3467 to <4 x i8>, !dbg !116
  %3469 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3373, float %3374, float 1.000000e+00, i1 false), !dbg !116
  %3470 = bitcast <2 x i16> %3469 to <4 x i8>, !dbg !116
  %3471 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3375, float %3376, float 1.000000e+00, i1 false), !dbg !116
  %3472 = bitcast <2 x i16> %3471 to <4 x i8>, !dbg !116
  %3473 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3377, float %3378, float 1.000000e+00, i1 false), !dbg !116
  %3474 = bitcast <2 x i16> %3473 to <4 x i8>, !dbg !116
  %3475 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3379, float %3380, float 1.000000e+00, i1 false), !dbg !116
  %3476 = bitcast <2 x i16> %3475 to <4 x i8>, !dbg !116
  %3477 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3381, float %3382, float 1.000000e+00, i1 false), !dbg !116
  %3478 = bitcast <2 x i16> %3477 to <4 x i8>, !dbg !116
  %3479 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3383, float %3384, float 1.000000e+00, i1 false), !dbg !116
  %3480 = bitcast <2 x i16> %3479 to <4 x i8>, !dbg !116
  %3481 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3385, float %3386, float 1.000000e+00, i1 false), !dbg !116
  %3482 = bitcast <2 x i16> %3481 to <4 x i8>, !dbg !116
  %3483 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3387, float %3388, float 1.000000e+00, i1 false), !dbg !116
  %3484 = bitcast <2 x i16> %3483 to <4 x i8>, !dbg !116
  %3485 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3389, float %3390, float 1.000000e+00, i1 false), !dbg !116
  %3486 = bitcast <2 x i16> %3485 to <4 x i8>, !dbg !116
  %3487 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3391, float %3392, float 1.000000e+00, i1 false), !dbg !116
  %3488 = bitcast <2 x i16> %3487 to <4 x i8>, !dbg !116
  %3489 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3393, float %3394, float 1.000000e+00, i1 false), !dbg !116
  %3490 = bitcast <2 x i16> %3489 to <4 x i8>, !dbg !116
  %3491 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3395, float %3396, float 1.000000e+00, i1 false), !dbg !116
  %3492 = bitcast <2 x i16> %3491 to <4 x i8>, !dbg !116
  %3493 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3397, float %3398, float 1.000000e+00, i1 false), !dbg !116
  %3494 = bitcast <2 x i16> %3493 to <4 x i8>, !dbg !116
  %3495 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3399, float %3400, float 1.000000e+00, i1 false), !dbg !116
  %3496 = bitcast <2 x i16> %3495 to <4 x i8>, !dbg !116
  %3497 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3401, float %3402, float 1.000000e+00, i1 false), !dbg !116
  %3498 = bitcast <2 x i16> %3497 to <4 x i8>, !dbg !116
  %3499 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3403, float %3404, float 1.000000e+00, i1 false), !dbg !116
  %3500 = bitcast <2 x i16> %3499 to <4 x i8>, !dbg !116
  %3501 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3405, float %3406, float 1.000000e+00, i1 false), !dbg !116
  %3502 = bitcast <2 x i16> %3501 to <4 x i8>, !dbg !116
  %3503 = tail call <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16> undef, float %3407, float %3408, float 1.000000e+00, i1 false), !dbg !116
  %3504 = bitcast <2 x i16> %3503 to <4 x i8>, !dbg !116
  %3505 = shl nuw nsw i32 %77, 7, !dbg !116
  %3506 = and i32 %3505, 1920, !dbg !116
  %3507 = or disjoint i32 %3506, %82, !dbg !116
  %3508 = or disjoint i32 %3507, %84, !dbg !116
  %3509 = or disjoint i32 %3508, %101, !dbg !116
  %3510 = or disjoint i32 %3509, %102, !dbg !116
  %3511 = xor i32 %3510, %314, !dbg !116
  %3512 = lshr i32 %3511, 3, !dbg !116
  %3513 = and i32 %3512, 536870896, !dbg !116
  %3514 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %3513, !dbg !116
  %3515 = getelementptr inbounds nuw i8, ptr addrspace(3) %3514, i32 %3511, !dbg !116
  %3516 = shufflevector <4 x i8> %3442, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3516, ptr addrspace(3) %3515, align 2, !dbg !116
  %3517 = xor i32 %3511, 8, !dbg !116
  %3518 = getelementptr inbounds nuw i8, ptr addrspace(3) %3514, i32 %3517, !dbg !116
  %3519 = shufflevector <4 x i8> %3444, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3519, ptr addrspace(3) %3518, align 2, !dbg !116
  %3520 = xor i32 %3511, 2048, !dbg !116
  %3521 = lshr i32 %3520, 3, !dbg !116
  %3522 = and i32 %3521, 536870896, !dbg !116
  %3523 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %3522, !dbg !116
  %3524 = getelementptr inbounds nuw i8, ptr addrspace(3) %3523, i32 %3520, !dbg !116
  %3525 = shufflevector <4 x i8> %3446, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3525, ptr addrspace(3) %3524, align 2, !dbg !116
  %3526 = xor i32 %3511, 2056, !dbg !116
  %3527 = lshr i32 %3526, 3, !dbg !116
  %3528 = and i32 %3527, 536870896, !dbg !116
  %3529 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %3528, !dbg !116
  %3530 = getelementptr inbounds nuw i8, ptr addrspace(3) %3529, i32 %3526, !dbg !116
  %3531 = shufflevector <4 x i8> %3448, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3531, ptr addrspace(3) %3530, align 2, !dbg !116
  %3532 = xor i32 %3511, 64, !dbg !116
  %3533 = getelementptr inbounds nuw i8, ptr addrspace(3) %3514, i32 %3532, !dbg !116
  %3534 = shufflevector <4 x i8> %3450, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3534, ptr addrspace(3) %3533, align 2, !dbg !116
  %3535 = xor i32 %3511, 72, !dbg !116
  %3536 = getelementptr inbounds nuw i8, ptr addrspace(3) %3514, i32 %3535, !dbg !116
  %3537 = shufflevector <4 x i8> %3452, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3537, ptr addrspace(3) %3536, align 2, !dbg !116
  %3538 = xor i32 %3511, 2112, !dbg !116
  %3539 = lshr i32 %3538, 3, !dbg !116
  %3540 = and i32 %3539, 536870896, !dbg !116
  %3541 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %3540, !dbg !116
  %3542 = getelementptr inbounds nuw i8, ptr addrspace(3) %3541, i32 %3538, !dbg !116
  %3543 = shufflevector <4 x i8> %3454, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3543, ptr addrspace(3) %3542, align 2, !dbg !116
  %3544 = xor i32 %3511, 2120, !dbg !116
  %3545 = lshr i32 %3544, 3, !dbg !116
  %3546 = and i32 %3545, 536870896, !dbg !116
  %3547 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %3546, !dbg !116
  %3548 = getelementptr inbounds nuw i8, ptr addrspace(3) %3547, i32 %3544, !dbg !116
  %3549 = shufflevector <4 x i8> %3456, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3549, ptr addrspace(3) %3548, align 2, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3550 = lshr exact i32 %321, 3, !dbg !116
  %3551 = and i32 %3550, 536870896, !dbg !116
  %3552 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %3551, !dbg !116
  %3553 = getelementptr inbounds nuw i8, ptr addrspace(3) %3552, i32 %321, !dbg !116
  %3554 = load <16 x i8>, ptr addrspace(3) %3553, align 16, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3555 = shufflevector <4 x i8> %3458, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3555, ptr addrspace(3) %3515, align 2, !dbg !116
  %3556 = shufflevector <4 x i8> %3460, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3556, ptr addrspace(3) %3518, align 2, !dbg !116
  %3557 = shufflevector <4 x i8> %3462, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3557, ptr addrspace(3) %3524, align 2, !dbg !116
  %3558 = shufflevector <4 x i8> %3464, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3558, ptr addrspace(3) %3530, align 2, !dbg !116
  %3559 = shufflevector <4 x i8> %3466, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3559, ptr addrspace(3) %3533, align 2, !dbg !116
  %3560 = shufflevector <4 x i8> %3468, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3560, ptr addrspace(3) %3536, align 2, !dbg !116
  %3561 = shufflevector <4 x i8> %3470, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3561, ptr addrspace(3) %3542, align 2, !dbg !116
  %3562 = shufflevector <4 x i8> %3472, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3562, ptr addrspace(3) %3548, align 2, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3563 = load <16 x i8>, ptr addrspace(3) %3553, align 16, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3564 = shufflevector <4 x i8> %3474, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3564, ptr addrspace(3) %3515, align 2, !dbg !116
  %3565 = shufflevector <4 x i8> %3476, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3565, ptr addrspace(3) %3518, align 2, !dbg !116
  %3566 = shufflevector <4 x i8> %3478, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3566, ptr addrspace(3) %3524, align 2, !dbg !116
  %3567 = shufflevector <4 x i8> %3480, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3567, ptr addrspace(3) %3530, align 2, !dbg !116
  %3568 = shufflevector <4 x i8> %3482, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3568, ptr addrspace(3) %3533, align 2, !dbg !116
  %3569 = shufflevector <4 x i8> %3484, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3569, ptr addrspace(3) %3536, align 2, !dbg !116
  %3570 = shufflevector <4 x i8> %3486, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3570, ptr addrspace(3) %3542, align 2, !dbg !116
  %3571 = shufflevector <4 x i8> %3488, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3571, ptr addrspace(3) %3548, align 2, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3572 = load <16 x i8>, ptr addrspace(3) %3553, align 16, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3573 = shufflevector <4 x i8> %3490, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3573, ptr addrspace(3) %3515, align 2, !dbg !116
  %3574 = shufflevector <4 x i8> %3492, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3574, ptr addrspace(3) %3518, align 2, !dbg !116
  %3575 = shufflevector <4 x i8> %3494, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3575, ptr addrspace(3) %3524, align 2, !dbg !116
  %3576 = shufflevector <4 x i8> %3496, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3576, ptr addrspace(3) %3530, align 2, !dbg !116
  %3577 = shufflevector <4 x i8> %3498, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3577, ptr addrspace(3) %3533, align 2, !dbg !116
  %3578 = shufflevector <4 x i8> %3500, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3578, ptr addrspace(3) %3536, align 2, !dbg !116
  %3579 = shufflevector <4 x i8> %3502, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3579, ptr addrspace(3) %3542, align 2, !dbg !116
  %3580 = shufflevector <4 x i8> %3504, <4 x i8> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  store <2 x i8> %3580, ptr addrspace(3) %3548, align 2, !dbg !116
  fence syncscope("workgroup") release, !dbg !116
  tail call void @llvm.amdgcn.s.barrier(), !dbg !116
  fence syncscope("workgroup") acquire, !dbg !116
  %3581 = load <16 x i8>, ptr addrspace(3) %3553, align 16, !dbg !116
  %3582 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %3424, i16 0, i32 2147483646, i32 159744), !dbg !116
  %3583 = bitcast <16 x i8> %3554 to <4 x i32>, !dbg !116
  %3584 = shufflevector <4 x i32> %3583, <4 x i32> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  %3585 = select i1 %3433, i32 %3425, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3584, ptr addrspace(8) %3582, i32 %3585, i32 0, i32 0), !dbg !116
  %3586 = bitcast <16 x i8> %3554 to <4 x i32>, !dbg !116
  %3587 = shufflevector <4 x i32> %3586, <4 x i32> poison, <2 x i32> <i32 2, i32 3>, !dbg !116
  %3588 = select i1 %3434, i32 %3426, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3587, ptr addrspace(8) %3582, i32 %3588, i32 0, i32 0), !dbg !116
  %3589 = bitcast <16 x i8> %3563 to <4 x i32>, !dbg !116
  %3590 = shufflevector <4 x i32> %3589, <4 x i32> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  %3591 = select i1 %3435, i32 %3427, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3590, ptr addrspace(8) %3582, i32 %3591, i32 0, i32 0), !dbg !116
  %3592 = bitcast <16 x i8> %3563 to <4 x i32>, !dbg !116
  %3593 = shufflevector <4 x i32> %3592, <4 x i32> poison, <2 x i32> <i32 2, i32 3>, !dbg !116
  %3594 = select i1 %3436, i32 %3428, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3593, ptr addrspace(8) %3582, i32 %3594, i32 0, i32 0), !dbg !116
  %3595 = bitcast <16 x i8> %3572 to <4 x i32>, !dbg !116
  %3596 = shufflevector <4 x i32> %3595, <4 x i32> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  %3597 = select i1 %3437, i32 %3429, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3596, ptr addrspace(8) %3582, i32 %3597, i32 0, i32 0), !dbg !116
  %3598 = bitcast <16 x i8> %3572 to <4 x i32>, !dbg !116
  %3599 = shufflevector <4 x i32> %3598, <4 x i32> poison, <2 x i32> <i32 2, i32 3>, !dbg !116
  %3600 = select i1 %3438, i32 %3430, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3599, ptr addrspace(8) %3582, i32 %3600, i32 0, i32 0), !dbg !116
  %3601 = bitcast <16 x i8> %3581 to <4 x i32>, !dbg !116
  %3602 = shufflevector <4 x i32> %3601, <4 x i32> poison, <2 x i32> <i32 0, i32 1>, !dbg !116
  %3603 = select i1 %3439, i32 %3431, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3602, ptr addrspace(8) %3582, i32 %3603, i32 0, i32 0), !dbg !116
  %3604 = bitcast <16 x i8> %3581 to <4 x i32>, !dbg !116
  %3605 = shufflevector <4 x i32> %3604, <4 x i32> poison, <2 x i32> <i32 2, i32 3>, !dbg !116
  %3606 = select i1 %3440, i32 %3432, i32 -2147483648, !dbg !116
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %3605, ptr addrspace(8) %3582, i32 %3606, i32 0, i32 0), !dbg !116
  br label %common.ret, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i64 @llvm.amdgcn.ballot.i64(i1) #2

; Function Attrs: mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.global.load.lds(ptr addrspace(1) captures(none), ptr addrspace(3) captures(none), i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) readonly captures(none), ptr addrspace(3) writeonly captures(none), i32 immarg, i32, i32, i32 immarg, i32 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #5

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #6

; Function Attrs: mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.waitcnt(i32 immarg) #3

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v8i32(<4 x i32>, <8 x i32>, <4 x float>, i32 immarg, i32 immarg, i32 immarg, i32, i32 immarg, i32) #7

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.minnum.f32(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { float, i1 } @llvm.amdgcn.div.scale.f32(float, float, i1 immarg) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.amdgcn.rcp.f32(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.amdgcn.div.fmas.f32(float, float, float, i1) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.amdgcn.div.fixup.f32(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fma.f32(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <2 x i16> @llvm.amdgcn.cvt.scalef32.pk.fp8.f32(<2 x i16>, float, float, float, i1 immarg) #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32>, ptr addrspace(8) writeonly captures(none), i32, i32, i32 immarg) #9

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.sched.barrier(i32 immarg) #6

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.iglp.opt(i32 immarg) #6

; Function Attrs: convergent nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.readlane.i32(i32, i32) #10

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,512" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2,8" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #3 = { mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #6 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #7 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #8 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #9 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }
attributes #10 = { convergent nocallback nofree nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "specialize.py", directory: "/root/code/triton/python/triton_kernels/triton_kernels")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !1, file: !1, line: 277, type: !5, scopeLine: 277, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "_matmul_ogs_NNT_fp8e4nvxfp8e4nvxmxfp4_256x256x128x1_swiglu", linkageName: "_matmul_ogs_NNT_fp8e4nvxfp8e4nvxmxfp4_256x256x128x1_swiglu", scope: !1, file: !1, line: 15, type: !5, scopeLine: 15, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!8 = !DILocation(line: 55, column: 14, scope: !7)
!9 = !DILocation(line: 57, column: 24, scope: !7)
!10 = !DILocation(line: 61, column: 37, scope: !7)
!11 = !DILocation(line: 61, column: 29, scope: !7)
!12 = !DILocation(line: 71, column: 51, scope: !7)
!13 = !DILocation(line: 72, column: 19, scope: !7)
!14 = !DILocation(line: 72, column: 32, scope: !7)
!15 = !DILocation(line: 72, column: 25, scope: !7)
!16 = !DILocation(line: 0, scope: !7)
!17 = !DILocation(line: 22, column: 36, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!19 = !DIFile(filename: "_common.py", directory: "/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details")
!20 = !DILocation(line: 86, column: 61, scope: !7)
!21 = !DILocation(line: 23, column: 37, scope: !18, inlinedAt: !20)
!22 = !DILocation(line: 27, column: 23, scope: !18, inlinedAt: !20)
!23 = !DILocation(line: 26, column: 18, scope: !18, inlinedAt: !20)
!24 = !DILocation(line: 30, column: 22, scope: !18, inlinedAt: !20)
!25 = !DILocation(line: 30, column: 50, scope: !18, inlinedAt: !20)
!26 = !DILocation(line: 30, column: 39, scope: !18, inlinedAt: !20)
!27 = !DILocation(line: 30, column: 70, scope: !18, inlinedAt: !20)
!28 = !DILocation(line: 88, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 22, scope: !18, inlinedAt: !30)
!30 = !DILocation(line: 91, column: 57, scope: !7)
!31 = !DILocation(line: 37, column: 22, scope: !18, inlinedAt: !30)
!32 = !DILocation(line: 38, column: 41, scope: !18, inlinedAt: !30)
!33 = !DILocation(line: 38, column: 30, scope: !18, inlinedAt: !30)
!34 = !DILocation(line: 38, column: 50, scope: !18, inlinedAt: !30)
!35 = !DILocation(line: 40, column: 40, scope: !18, inlinedAt: !30)
!36 = !DILocation(line: 40, column: 34, scope: !18, inlinedAt: !30)
!37 = !DILocation(line: 104, column: 39, scope: !7)
!38 = !DILocation(line: 104, column: 28, scope: !7)
!39 = !DILocation(line: 105, column: 24, scope: !7)
!40 = !DILocation(line: 41, column: 19, scope: !18, inlinedAt: !30)
!41 = !DILocation(line: 41, column: 30, scope: !18, inlinedAt: !30)
!42 = !DILocation(line: 107, column: 30, scope: !7)
!43 = !DILocation(line: 108, column: 32, scope: !7)
!44 = !DILocation(line: 109, column: 31, scope: !7)
!45 = !DILocation(line: 109, column: 20, scope: !7)
!46 = !DILocation(line: 110, column: 37, scope: !7)
!47 = !DILocation(line: 110, column: 26, scope: !7)
!48 = !DILocation(line: 112, column: 60, scope: !7)
!49 = !DILocation(line: 113, column: 34, scope: !7)
!50 = !DILocation(line: 114, column: 28, scope: !7)
!51 = !DILocation(line: 116, column: 25, scope: !7)
!52 = !DILocation(line: 116, column: 49, scope: !7)
!53 = !DILocation(line: 116, column: 36, scope: !7)
!54 = !DILocation(line: 117, column: 59, scope: !7)
!55 = !DILocation(line: 122, column: 22, scope: !7)
!56 = !DILocation(line: 124, column: 27, scope: !7)
!57 = !DILocation(line: 124, column: 53, scope: !7)
!58 = !DILocation(line: 125, column: 44, scope: !7)
!59 = !DILocation(line: 125, column: 31, scope: !7)
!60 = !DILocation(line: 126, column: 16, scope: !7)
!61 = !DILocation(line: 126, column: 64, scope: !7)
!62 = !DILocation(line: 149, column: 29, scope: !7)
!63 = !DILocation(line: 149, column: 19, scope: !7)
!64 = !DILocation(line: 173, column: 37, scope: !7)
!65 = !DILocation(line: 173, column: 68, scope: !7)
!66 = !DILocation(line: 173, column: 54, scope: !7)
!67 = !DILocation(line: 173, column: 87, scope: !7)
!68 = !DILocation(line: 176, column: 88, scope: !7)
!69 = !DILocation(line: 187, column: 23, scope: !7)
!70 = !DILocation(line: 187, column: 42, scope: !7)
!71 = !DILocation(line: 188, column: 60, scope: !7)
!72 = !DILocation(line: 191, column: 19, scope: !7)
!73 = !DILocation(line: 191, column: 9, scope: !7)
!74 = !DILocation(line: 192, column: 17, scope: !7)
!75 = !DILocation(line: 195, column: 39, scope: !7)
!76 = !DILocation(line: 207, column: 20, scope: !7)
!77 = !{!78}
!78 = !{!"amdgpu.AsyncCopies", !79, !"Scope containing all AsyncCopyGlobalToLocal and BufferLoadToLocal ops"}
!79 = !{!"amdgpu.AsyncOps", !"Domain to hold alias scopes to specify aliasing information between AsyncCopyGlobalToLocal, BufferLoadToLocal and LocalLoad ops"}
!80 = !DILocation(line: 208, column: 20, scope: !7)
!81 = !DILocation(line: 225, column: 46, scope: !7)
!82 = !DILocation(line: 235, column: 68, scope: !7)
!83 = !DILocation(line: 239, column: 31, scope: !7)
!84 = !DILocation(line: 242, column: 17, scope: !7)
!85 = !DILocation(line: 243, column: 17, scope: !7)
!86 = !{!87}
!87 = !{!"amdgpu.LocalLoads", !79, !"Scope containing all LocalLoad ops"}
!88 = !DILocation(line: 225, column: 60, scope: !7)
!89 = !DILocation(line: 247, column: 22, scope: !7)
!90 = !DILocation(line: 248, column: 24, scope: !7)
!91 = !DILocation(line: 250, column: 30, scope: !7)
!92 = !DILocation(line: 250, column: 20, scope: !7)
!93 = !DILocation(line: 250, column: 43, scope: !7)
!94 = !DILocation(line: 252, column: 27, scope: !7)
!95 = !DILocation(line: 272, column: 16, scope: !7)
!96 = !DILocation(line: 8, column: 24, scope: !97, inlinedAt: !99)
!97 = distinct !DILexicalBlockFile(scope: !7, file: !98, discriminator: 0)
!98 = !DIFile(filename: "_swiglu.py", directory: "/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details")
!99 = !DILocation(line: 277, column: 33, scope: !7)
!100 = !DILocation(line: 10, column: 26, scope: !97, inlinedAt: !99)
!101 = !DILocation(line: 10, column: 33, scope: !97, inlinedAt: !99)
!102 = !DILocation(line: 45, column: 28, scope: !97, inlinedAt: !99)
!103 = !DILocation(line: 45, column: 36, scope: !97, inlinedAt: !99)
!104 = !DILocation(line: 45, column: 27, scope: !97, inlinedAt: !99)
!105 = !DILocation(line: 45, column: 20, scope: !97, inlinedAt: !99)
!106 = !DILocation(line: 45, column: 16, scope: !97, inlinedAt: !99)
!107 = !DILocation(line: 46, column: 29, scope: !97, inlinedAt: !99)
!108 = !DILocation(line: 279, column: 33, scope: !7)
!109 = !DILocation(line: 279, column: 41, scope: !7)
!110 = !DILocation(line: 280, column: 28, scope: !7)
!111 = !DILocation(line: 292, column: 23, scope: !7)
!112 = !DILocation(line: 292, column: 13, scope: !7)
!113 = !DILocation(line: 295, column: 16, scope: !7)
!114 = !DILocation(line: 295, column: 64, scope: !7)
!115 = !DILocation(line: 296, column: 29, scope: !7)
!116 = !DILocation(line: 300, column: 20, scope: !7)
!117 = !DILocation(line: 300, column: 4, scope: !7)
