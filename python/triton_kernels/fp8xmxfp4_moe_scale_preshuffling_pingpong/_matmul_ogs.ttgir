#blocked = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [4, 16], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 64], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 2], warpsPerCTA = [8, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 8], [16, 0], [0, 64], [64, 0], [128, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 2], [0, 4]], warp = [[0, 16], [0, 32], [32, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 1], [0, 2], [128, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [32, 0]], warp = [[0, 0], [0, 0], [64, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[0, 4], [0, 8], [0, 16], [0, 32], [0, 64], [1, 0]], warp = [[2, 0], [4, 0], [0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [32, 0]], warp = [[64, 0], [128, 0], [0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 8, 0], [16, 0, 0], [0, 64, 0], [64, 0, 0], [128, 0, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 2, 0], [0, 4, 0]], warp = [[0, 16, 0], [0, 32, 0], [32, 0, 0]], block = []}>
#loc = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 4], tilesPerWarp = [2, 2], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 16, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 16, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_matmul_ogs_NNT_fp8e4nvxfp8e4nvxmxfp4_256x256x128x1_swiglu(%arg0: !tt.ptr<f8E4M3FN> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg1: !tt.ptr<f8E4M3FN> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg5: !tt.ptr<f8E4M3FN> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg8: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg11: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg14: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg18: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg19: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg20: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg21: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg22: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg23: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg24: i32 loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg25: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg26: f32 loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0), %arg27: f32 loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":15:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c127_i64 = arith.constant 127 : i64 loc(#loc1)
    %c1_i64 = arith.constant 1 : i64 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<256x128xf32, #linear> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %c8_i64 = arith.constant 8 : i64 loc(#loc1)
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %c256_i64 = arith.constant 256 : i64 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c65535_i32 = arith.constant 65535 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_2 = arith.constant dense<127> : tensor<256x4xi8, #linear1> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    llvm.intr.assume %true : i1 loc(#loc2)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    llvm.intr.assume %true : i1 loc(#loc12)
    llvm.intr.assume %true : i1 loc(#loc13)
    llvm.intr.assume %true : i1 loc(#loc14)
    llvm.intr.assume %true : i1 loc(#loc15)
    llvm.intr.assume %true : i1 loc(#loc16)
    llvm.intr.assume %true : i1 loc(#loc17)
    llvm.intr.assume %true : i1 loc(#loc18)
    %0 = arith.divsi %arg17, %c2_i32 : i32 loc(#loc19)
    %1 = tt.get_program_id x : i32 loc(#loc20)
    %2 = tt.load %arg22 : !tt.ptr<i32> loc(#loc21)
    %3 = arith.subi %arg24, %2 : i32 loc(#loc22)
    %4 = arith.subi %arg24, %3 : i32 loc(#loc23)
    llvm.intr.assume %true : i1 loc(#loc24)
    %5 = arith.muli %4, %arg25 : i32 loc(#loc25)
    %6 = arith.cmpi sgt, %3, %c0_i32 : i32 loc(#loc26)
    %7 = arith.cmpi sge, %1, %5 : i32 loc(#loc27)
    %8 = arith.andi %6, %7 : i1 loc(#loc28)
    cf.cond_br %8, ^bb1, ^bb2 loc(#loc28)
  ^bb1:  // pred: ^bb0
    %9 = arith.subi %1, %5 : i32 loc(#loc29)
    %10 = arith.muli %3, %arg25 : i32 loc(#loc30)
    %11 = arith.cmpi slt, %9, %10 : i32 loc(#loc31)
    scf.if %11 {
      llvm.intr.assume %true : i1 loc(#loc147)
    } loc(#loc32)
    tt.return loc(#loc35)
  ^bb2:  // pred: ^bb0
    %12 = arith.divsi %5, %c8_i32 : i32 loc(#loc148)
    %13 = arith.remsi %5, %c8_i32 : i32 loc(#loc149)
    %14 = arith.remsi %1, %c8_i32 : i32 loc(#loc150)
    %15 = arith.divsi %1, %c8_i32 : i32 loc(#loc151)
    %16 = arith.muli %14, %12 : i32 loc(#loc152)
    %17 = arith.minsi %14, %13 : i32 loc(#loc153)
    %18 = arith.addi %16, %17 : i32 loc(#loc154)
    %19 = arith.addi %18, %15 : i32 loc(#loc155)
    %20 = arith.remsi %19, %5 : i32 loc(#loc45)
    %21 = arith.muli %arg25, %c4_i32 : i32 loc(#loc156)
    %22 = arith.divsi %20, %21 : i32 loc(#loc157)
    %23 = arith.muli %22, %c4_i32 : i32 loc(#loc158)
    %24 = arith.subi %4, %23 : i32 loc(#loc159)
    %25 = arith.minsi %24, %c4_i32 : i32 loc(#loc160)
    llvm.intr.assume %true : i1 loc(#loc161)
    %26 = arith.remsi %20, %25 : i32 loc(#loc162)
    %27 = arith.addi %23, %26 : i32 loc(#loc163)
    %28 = arith.remsi %20, %21 : i32 loc(#loc164)
    %29 = arith.divsi %28, %25 : i32 loc(#loc165)
    %30 = tt.addptr %arg23, %27 : !tt.ptr<i32>, i32 loc(#loc56)
    %31 = tt.load %30 : !tt.ptr<i32> loc(#loc57)
    %32 = arith.cmpi eq, %31, %c-1_i32 : i32 loc(#loc58)
    cf.cond_br %32, ^bb3, ^bb4 loc(#loc58)
  ^bb3:  // pred: ^bb2
    tt.return loc(#loc59)
  ^bb4:  // pred: ^bb2
    %33 = arith.andi %31, %c65535_i32 : i32 loc(#loc60)
    %34 = arith.shrsi %31, %c16_i32 : i32 loc(#loc61)
    %35 = tt.addptr %arg20, %33 : !tt.ptr<i32>, i32 loc(#loc62)
    %36 = tt.load %35 : !tt.ptr<i32> loc(#loc63)
    %37 = tt.addptr %arg21, %33 : !tt.ptr<i32>, i32 loc(#loc64)
    %38 = tt.load %37 : !tt.ptr<i32> loc(#loc65)
    %39 = arith.extsi %33 : i32 to i64 loc(#loc66)
    %40 = arith.extsi %34 : i32 to i64 loc(#loc67)
    %41 = arith.extsi %38 : i32 to i64 loc(#loc68)
    %42 = arith.extsi %29 : i32 to i64 loc(#loc69)
    %43 = arith.muli %40, %c256_i64 : i64 loc(#loc70)
    %44 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc71)
    %45 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc71)
    %46 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc71)
    %47 = arith.extsi %44 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc72)
    %48 = arith.extsi %45 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<256xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc72)
    %49 = arith.extsi %46 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> to tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc72)
    %50 = tt.splat %43 : i64 -> tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc72)
    %51 = arith.addi %50, %47 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc72)
    %52 = arith.extsi %36 : i32 to i64 loc(#loc73)
    %53 = tt.splat %52 : i64 -> tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc73)
    %54 = arith.remsi %51, %53 {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc73)
    %55 = tt.addptr %arg19, %41 : !tt.ptr<i32>, i64 loc(#loc74)
    %56 = arith.trunci %54 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc75)
    %57 = tt.splat %55 : !tt.ptr<i32> -> tensor<256x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc76)
    %58 = tt.addptr %57, %56 : tensor<256x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked}>>, tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc76)
    %59 = tt.load %58 : tensor<256x!tt.ptr<i32>, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc76)
    %60 = arith.divsi %59, %cst_3 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc77)
    %61 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc78)
    %62 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #linear2}>> loc(#loc78)
    %63 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc78)
    %64 = arith.extsi %61 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc79)
    %65 = arith.extsi %62 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #linear2}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #linear2}>> loc(#loc79)
    %66 = arith.extsi %63 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc79)
    %67 = arith.extsi %60 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc80)
    %68 = arith.extsi %arg7 : i32 to i64 loc(#loc81)
    %69 = tt.expand_dims %67 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi64, #blocked> loc(#loc82)
    %70 = tt.splat %68 : i64 -> tensor<256x1xi64, #blocked> loc(#loc82)
    %71 = arith.muli %69, %70 : tensor<256x1xi64, #blocked> loc(#loc82)
    %72 = arith.trunci %71 : tensor<256x1xi64, #blocked> to tensor<256x1xi32, #blocked> loc(#loc82)
    %73 = tt.broadcast %72 : tensor<256x1xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc83)
    %74 = tt.expand_dims %64 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc83)
    %75 = tt.broadcast %74 : tensor<1x128xi64, #blocked> -> tensor<256x128xi64, #blocked> loc(#loc83)
    %76 = arith.trunci %75 : tensor<256x128xi64, #blocked> to tensor<256x128xi32, #blocked> loc(#loc83)
    %77 = arith.addi %76, %73 : tensor<256x128xi32, #blocked> loc(#loc83)
    %78 = arith.extsi %arg12 : i32 to i64 loc(#loc84)
    %79 = arith.muli %39, %78 : i64 loc(#loc84)
    %80 = tt.addptr %arg11, %79 : !tt.ptr<i8>, i64 loc(#loc85)
    %81 = arith.muli %42, %c8_i64 : i64 loc(#loc86)
    %82 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #linear2}>> loc(#loc87)
    %83 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc87)
    %84 = arith.extsi %82 : tensor<8xi32, #ttg.slice<{dim = 1, parent = #linear2}>> to tensor<8xi64, #ttg.slice<{dim = 1, parent = #linear2}>> loc(#loc88)
    %85 = arith.extsi %83 : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc88)
    %86 = tt.splat %81 : i64 -> tensor<8xi64, #ttg.slice<{dim = 1, parent = #linear2}>> loc(#loc88)
    %87 = tt.splat %81 : i64 -> tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc88)
    %88 = arith.addi %86, %84 : tensor<8xi64, #ttg.slice<{dim = 1, parent = #linear2}>> loc(#loc88)
    %89 = arith.addi %87, %85 : tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc88)
    %90 = arith.extsi %arg17 : i32 to i64 loc(#loc89)
    %91 = tt.splat %90 : i64 -> tensor<8xi64, #ttg.slice<{dim = 1, parent = #linear2}>> loc(#loc89)
    %92 = tt.splat %90 : i64 -> tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc89)
    %93 = arith.remsi %88, %91 : tensor<8xi64, #ttg.slice<{dim = 1, parent = #linear2}>> loc(#loc89)
    %94 = arith.remsi %89, %92 : tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc89)
    %95 = tt.expand_dims %65 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #linear2}>> -> tensor<1x128xi64, #linear2> loc(#loc90)
    %96 = tt.expand_dims %66 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x128xi64, #blocked2> loc(#loc90)
    %97 = arith.trunci %95 : tensor<1x128xi64, #linear2> to tensor<1x128xi32, #linear2> loc(#loc90)
    %98 = arith.trunci %96 : tensor<1x128xi64, #blocked2> to tensor<1x128xi32, #blocked2> loc(#loc90)
    %99 = arith.extsi %arg13 : i32 to i64 loc(#loc91)
    %100 = tt.broadcast %97 : tensor<1x128xi32, #linear2> -> tensor<8x128xi32, #linear2> loc(#loc92)
    %101 = tt.broadcast %98 : tensor<1x128xi32, #blocked2> -> tensor<8x128xi32, #blocked2> loc(#loc92)
    %102 = tt.expand_dims %93 {axis = 1 : i32} : tensor<8xi64, #ttg.slice<{dim = 1, parent = #linear2}>> -> tensor<8x1xi64, #linear2> loc(#loc92)
    %103 = tt.expand_dims %94 {axis = 1 : i32} : tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<8x1xi64, #blocked2> loc(#loc92)
    %104 = tt.splat %99 : i64 -> tensor<8x1xi64, #linear2> loc(#loc92)
    %105 = tt.splat %99 : i64 -> tensor<8x1xi64, #blocked2> loc(#loc92)
    %106 = arith.muli %102, %104 : tensor<8x1xi64, #linear2> loc(#loc92)
    %107 = arith.muli %103, %105 : tensor<8x1xi64, #blocked2> loc(#loc92)
    %108 = tt.broadcast %106 : tensor<8x1xi64, #linear2> -> tensor<8x128xi64, #linear2> loc(#loc92)
    %109 = tt.broadcast %107 : tensor<8x1xi64, #blocked2> -> tensor<8x128xi64, #blocked2> loc(#loc92)
    %110 = arith.trunci %108 : tensor<8x128xi64, #linear2> to tensor<8x128xi32, #linear2> loc(#loc92)
    %111 = arith.trunci %109 : tensor<8x128xi64, #blocked2> to tensor<8x128xi32, #blocked2> loc(#loc92)
    %112 = arith.addi %110, %100 : tensor<8x128xi32, #linear2> loc(#loc92)
    %113 = arith.addi %111, %101 : tensor<8x128xi32, #blocked2> loc(#loc92)
    %114 = arith.muli %42, %c256_i64 : i64 loc(#loc93)
    %115 = tt.splat %114 : i64 -> tensor<256xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc94)
    %116 = tt.splat %114 : i64 -> tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc94)
    %117 = arith.addi %115, %48 : tensor<256xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc94)
    %118 = arith.addi %116, %49 : tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc94)
    %119 = tt.splat %90 : i64 -> tensor<256xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc95)
    %120 = tt.splat %90 : i64 -> tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc95)
    %121 = arith.remsi %117, %119 {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc95)
    %122 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc96)
    %123 = arith.extsi %122 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc97)
    %124 = arith.extsi %arg9 : i32 to i64 loc(#loc98)
    %125 = arith.muli %39, %124 : i64 loc(#loc98)
    %126 = tt.addptr %arg8, %125 : !tt.ptr<i8>, i64 loc(#loc99)
    %127 = arith.extsi %arg10 : i32 to i64 loc(#loc100)
    %128 = tt.expand_dims %123 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc101)
    %129 = tt.broadcast %128 : tensor<64x1xi64, #blocked1> -> tensor<64x256xi64, #blocked1> loc(#loc101)
    %130 = tt.expand_dims %121 {axis = 0 : i32} : tensor<256xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi64, #blocked1> loc(#loc101)
    %131 = tt.splat %127 : i64 -> tensor<1x256xi64, #blocked1> loc(#loc101)
    %132 = arith.muli %130, %131 : tensor<1x256xi64, #blocked1> loc(#loc101)
    %133 = tt.broadcast %132 : tensor<1x256xi64, #blocked1> -> tensor<64x256xi64, #blocked1> loc(#loc101)
    %134 = arith.addi %129, %133 : tensor<64x256xi64, #blocked1> loc(#loc101)
    %135 = arith.trunci %134 : tensor<64x256xi64, #blocked1> to tensor<64x256xi32, #blocked1> loc(#loc101)
    %136 = arith.extsi %arg18 : i32 to i64 loc(#loc102)
    %137 = ttg.local_alloc : () -> !ttg.memdesc<2x256x128xf8E4M3FN, #shared, #smem, mutable> loc(#loc103)
    %138 = ttg.local_alloc : () -> !ttg.memdesc<2x64x256xi8, #shared1, #smem, mutable> loc(#loc104)
    %139 = arith.cmpi sgt, %136, %c0_i64 : i64 loc(#loc102)
    %140 = ttg.memdesc_subview %137[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xf8E4M3FN, #shared, #smem, mutable> -> !ttg.memdesc<256x128xf8E4M3FN, #shared, #smem, mutable> loc(#loc103)
    %141 = tt.splat %139 : i1 -> tensor<256x128xi1, #blocked> loc(#loc102)
    %142 = tt.splat %arg5 : !tt.ptr<f8E4M3FN> -> tensor<256x128x!tt.ptr<f8E4M3FN>, #blocked> loc(#loc103)
    %143 = tt.addptr %142, %77 : tensor<256x128x!tt.ptr<f8E4M3FN>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc103)
    %144 = ttg.async_copy_global_to_local %143, %140 mask %141 : tensor<256x128x!tt.ptr<f8E4M3FN>, #blocked> -> <256x128xf8E4M3FN, #shared, #smem, mutable> loc(#loc103)
    %145 = ttg.async_commit_group %144 loc(#loc103)
    %146 = ttg.memdesc_subview %138[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xi8, #shared1, #smem, mutable> loc(#loc104)
    %147 = tt.splat %139 : i1 -> tensor<64x256xi1, #blocked1> loc(#loc102)
    %148 = amdgpu.buffer_load_to_local %126[%135] mask = %147 into %146 : <i8>[tensor<64x256xi32, #blocked1>]  -> <64x256xi8, #shared1, #smem, mutable> loc(#loc104)
    %149 = ttg.async_commit_group %148 loc(#loc104)
    %150 = tt.splat %139 : i1 -> tensor<8x128xi1, #linear2> loc(#loc102)
    %151 = tt.splat %139 : i1 -> tensor<8x128xi1, #blocked2> loc(#loc102)
    %152 = amdgpu.buffer_load %80[%112], %150 : tensor<8x128xi8, #linear2> loc(#loc105)
    %153 = amdgpu.buffer_load %80[%113], %151 : tensor<8x128xi8, #blocked2> loc(#loc105)
    %154 = arith.subi %136, %c128_i64 : i64 loc(#loc102)
    gpu.barrier loc(#loc102)
    %155 = rocdl.workitem.id.x : i32 loc(#loc102)
    %156 = arith.divsi %155, %c256_i32 : i32 loc(#loc102)
    %157 = arith.cmpi eq, %156, %c0_i32 : i32 loc(#loc102)
    %158 = arith.cmpi ne, %156, %c0_i32 : i32 loc(#loc102)
    amdgpu.cond_barrier %158 loc(#loc102)
    %159:11 = scf.for %arg28 = %c0_i64 to %154 step %c128_i64 iter_args(%arg29 = %cst_0, %arg30 = %arg5, %arg31 = %126, %arg32 = %80, %arg33 = %c0_i32, %arg34 = %145, %arg35 = %149, %arg36 = %140, %arg37 = %146, %arg38 = %153, %arg39 = %152) -> (tensor<256x256xf32, #mma>, !tt.ptr<f8E4M3FN>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.memdesc<256x128xf8E4M3FN, #shared, #smem, mutable>, !ttg.memdesc<64x256xi8, #shared1, #smem, mutable>, tensor<8x128xi8, #blocked2>, tensor<8x128xi8, #linear2>)  : i64 {
      %219 = ttg.async_wait %arg34, %arg35 {num = 0 : i32} loc(#loc103)
      %220 = tt.addptr %arg32, %c4_i32 : !tt.ptr<i8>, i32 loc(#loc106)
      %221 = tt.addptr %arg30, %c128_i32 : !tt.ptr<f8E4M3FN>, i32 loc(#loc107)
      %222 = tt.addptr %arg31, %c64_i32 : !tt.ptr<i8>, i32 loc(#loc108)
      %223 = arith.addi %arg33, %c1_i32 : i32 loc(#loc102)
      %224 = arith.cmpi slt, %223, %c2_i32 : i32 loc(#loc102)
      %225 = arith.select %224, %223, %c0_i32 : i32 loc(#loc102)
      %226 = ttg.memdesc_subview %137[%225, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xf8E4M3FN, #shared, #smem, mutable> -> !ttg.memdesc<256x128xf8E4M3FN, #shared, #smem, mutable> loc(#loc103)
      %227 = tt.splat %221 : !tt.ptr<f8E4M3FN> -> tensor<256x128x!tt.ptr<f8E4M3FN>, #blocked> loc(#loc103)
      %228 = tt.addptr %227, %77 : tensor<256x128x!tt.ptr<f8E4M3FN>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc103)
      %229 = ttg.async_copy_global_to_local %228, %226 : tensor<256x128x!tt.ptr<f8E4M3FN>, #blocked> -> <256x128xf8E4M3FN, #shared, #smem, mutable> loc(#loc103)
      %230 = ttg.async_commit_group %229 loc(#loc103)
      %231 = ttg.memdesc_subview %138[%225, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xi8, #shared1, #smem, mutable> loc(#loc104)
      %232 = amdgpu.buffer_load_to_local %222[%135] into %231 : <i8>[tensor<64x256xi32, #blocked1>]  -> <64x256xi8, #shared1, #smem, mutable> loc(#loc104)
      %233 = ttg.async_commit_group %232 loc(#loc104)
      %234 = amdgpu.buffer_load %220[%112] : tensor<8x128xi8, #linear2> loc(#loc105)
      %235 = amdgpu.buffer_load %220[%113] : tensor<8x128xi8, #blocked2> loc(#loc105)
      rocdl.sched.barrier 0 loc(#loc109)
      rocdl.s.barrier loc(#loc109)
      rocdl.sched.barrier 0 loc(#loc109)
      %236 = ttg.local_load %arg36 token %219 : !ttg.memdesc<256x128xf8E4M3FN, #shared, #smem, mutable> -> tensor<256x128xf8E4M3FN, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc103)
      %237 = ttg.local_load %arg37 token %219 : !ttg.memdesc<64x256xi8, #shared1, #smem, mutable> -> tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc104)
      %238 = tt.reshape %arg39 : tensor<8x128xi8, #linear2> -> tensor<256x4xi8, #linear3> loc(#loc110)
      %239 = tt.dot_scaled %236 scale %cst_2, %237 scale %238, %arg29 lhs = e4m3 rhs = e2m1 {fastMath = true, pingpong_2step} : tensor<256x128xf8E4M3FN, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear1> * tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear3> -> tensor<256x256xf32, #mma> loc(#loc109)
      amdgpu.instruction_sched_hint {isBufferLoadsAEnabled = false, isBufferLoadsBEnabled = false, numDsReadsA = #amdgpu.InstCounter<0, none>, numDsReadsB = #amdgpu.InstCounter<0, none>, numDsWritesA = #amdgpu.InstCounter<0, none>, numDsWritesB = #amdgpu.InstCounter<0, none>, numGlobalLoadsA = #amdgpu.InstCounter<0, none>, numGlobalLoadsB = #amdgpu.InstCounter<0, none>, numMMAs = #amdgpu.InstCounter<0, none>, variant = #amdgpu.SchedHintVariant<iglp0>} loc(#loc109)
      scf.yield %239, %221, %222, %220, %225, %230, %233, %226, %231, %235, %234 : tensor<256x256xf32, #mma>, !tt.ptr<f8E4M3FN>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.memdesc<256x128xf8E4M3FN, #shared, #smem, mutable>, !ttg.memdesc<64x256xi8, #shared1, #smem, mutable>, tensor<8x128xi8, #blocked2>, tensor<8x128xi8, #linear2> loc(#loc102)
    } loc(#loc102)
    amdgpu.cond_barrier %157 loc(#loc102)
    %160 = arith.addi %136, %c127_i64 : i64 loc(#loc102)
    %161 = arith.divsi %160, %c128_i64 : i64 loc(#loc102)
    %162 = arith.cmpi sge, %161, %c1_i64 : i64 loc(#loc102)
    %163 = ttg.async_wait %159#5, %159#6 {num = 0 : i32} loc(#loc103)
    %164 = ttg.local_load %159#7 token %163 : !ttg.memdesc<256x128xf8E4M3FN, #shared, #smem, mutable> -> tensor<256x128xf8E4M3FN, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc103)
    %165 = ttg.local_load %159#8 token %163 : !ttg.memdesc<64x256xi8, #shared1, #smem, mutable> -> tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc104)
    %166 = tt.reshape %159#9 : tensor<8x128xi8, #blocked2> -> tensor<256x4xi8, #blocked3> loc(#loc110)
    %167 = ttg.convert_layout %166 : tensor<256x4xi8, #blocked3> -> tensor<256x4xi8, #linear3> loc(#loc110)
    %168 = scf.if %162 -> (tensor<256x256xf32, #mma>) {
      %219 = tt.dot_scaled %164 scale %cst_2, %165 scale %167, %159#0 lhs = e4m3 rhs = e2m1 {fastMath = true} : tensor<256x128xf8E4M3FN, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear1> * tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear3> -> tensor<256x256xf32, #mma> loc(#loc109)
      scf.yield %219 : tensor<256x256xf32, #mma> loc(#loc109)
    } else {
      scf.yield %159#0 : tensor<256x256xf32, #mma> loc(#loc109)
    } loc(#loc109)
    %169 = arith.select %162, %168, %159#0 : tensor<256x256xf32, #mma> loc(#loc102)
    ttg.local_dealloc %137 : !ttg.memdesc<2x256x128xf8E4M3FN, #shared, #smem, mutable> loc(#loc102)
    ttg.local_dealloc %138 : !ttg.memdesc<2x64x256xi8, #shared1, #smem, mutable> loc(#loc102)
    %170 = arith.cmpi slt, %51, %53 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc111)
    %171 = arith.cmpi slt, %118, %120 : tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc112)
    %172 = arith.extsi %arg15 : i32 to i64 loc(#loc113)
    %173 = arith.muli %39, %172 : i64 loc(#loc113)
    %174 = tt.addptr %arg14, %173 : !tt.ptr<f32>, i64 loc(#loc114)
    %175 = tt.addptr %174, %114 : !tt.ptr<f32>, i64 loc(#loc115)
    %176 = amdgpu.buffer_load %175[%46], %171 : tensor<256xf32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc116)
    %177 = tt.expand_dims %176 {axis = 0 : i32} : tensor<256xf32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xf32, #mma> loc(#loc117)
    %178 = tt.broadcast %177 : tensor<1x256xf32, #mma> -> tensor<256x256xf32, #mma> loc(#loc118)
    %179 = arith.addf %169, %178 : tensor<256x256xf32, #mma> loc(#loc119)
    %180 = tt.reshape %179 : tensor<256x256xf32, #mma> -> tensor<256x128x2xf32, #linear4> loc(#loc166)
    %outLHS, %outRHS = tt.split %180 : tensor<256x128x2xf32, #linear4> -> tensor<256x128xf32, #linear> loc(#loc167)
    %181 = tt.splat %arg27 : f32 -> tensor<256x128xf32, #linear> loc(#loc177)
    %182 = arith.minnumf %outLHS, %181 : tensor<256x128xf32, #linear> loc(#loc177)
    %183 = arith.minnumf %outRHS, %181 : tensor<256x128xf32, #linear> loc(#loc178)
    %184 = arith.subf %cst_1, %arg27 : f32 loc(#loc179)
    %185 = tt.splat %184 : f32 -> tensor<256x128xf32, #linear> loc(#loc180)
    %186 = arith.maxnumf %185, %183 : tensor<256x128xf32, #linear> loc(#loc180)
    %187 = arith.subf %cst_1, %arg26 : f32 loc(#loc171)
    %188 = tt.splat %187 : f32 -> tensor<256x128xf32, #linear> loc(#loc172)
    %189 = arith.mulf %188, %182 : tensor<256x128xf32, #linear> loc(#loc172)
    %190 = math.exp %189 : tensor<256x128xf32, #linear> loc(#loc173)
    %191 = arith.addf %190, %cst : tensor<256x128xf32, #linear> loc(#loc174)
    %192 = arith.divf %182, %191 : tensor<256x128xf32, #linear> loc(#loc175)
    %193 = math.fma %192, %186, %192 : tensor<256x128xf32, #linear> loc(#loc176)
    %194 = arith.muli %42, %c128_i64 : i64 loc(#loc135)
    %195 = tt.splat %194 : i64 -> tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc136)
    %196 = arith.addi %195, %64 : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc136)
    %197 = arith.extsi %0 : i32 to i64 loc(#loc137)
    %198 = tt.splat %197 : i64 -> tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc137)
    %199 = arith.cmpi slt, %196, %198 : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc137)
    %200 = arith.extsi %arg4 : i32 to i64 loc(#loc138)
    %201 = arith.muli %41, %200 : i64 loc(#loc138)
    %202 = tt.addptr %arg1, %201 : !tt.ptr<f8E4M3FN>, i64 loc(#loc139)
    %203 = tt.expand_dims %47 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi64, #blocked> loc(#loc140)
    %204 = arith.muli %43, %200 : i64 loc(#loc140)
    %205 = tt.splat %200 : i64 -> tensor<256x1xi64, #blocked> loc(#loc140)
    %206 = arith.muli %203, %205 : tensor<256x1xi64, #blocked> loc(#loc140)
    %207 = tt.addptr %202, %204 : !tt.ptr<f8E4M3FN>, i64 loc(#loc140)
    %208 = arith.trunci %206 : tensor<256x1xi64, #blocked> to tensor<256x1xi32, #blocked> loc(#loc140)
    %209 = tt.broadcast %208 : tensor<256x1xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc141)
    %210 = tt.addptr %207, %194 : !tt.ptr<f8E4M3FN>, i64 loc(#loc141)
    %211 = arith.addi %76, %209 : tensor<256x128xi32, #blocked> loc(#loc141)
    %212 = tt.expand_dims %170 {axis = 1 : i32} : tensor<256xi1, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi1, #blocked> loc(#loc142)
    %213 = tt.expand_dims %199 {axis = 0 : i32} : tensor<128xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi1, #blocked> loc(#loc143)
    %214 = tt.broadcast %212 : tensor<256x1xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc144)
    %215 = tt.broadcast %213 : tensor<1x128xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc144)
    %216 = arith.andi %214, %215 : tensor<256x128xi1, #blocked> loc(#loc144)
    %217 = tt.fp_to_fp %193, rounding = rtne : tensor<256x128xf32, #linear> -> tensor<256x128xf8E4M3FN, #linear> loc(#loc145)
    %218 = ttg.convert_layout %217 : tensor<256x128xf8E4M3FN, #linear> -> tensor<256x128xf8E4M3FN, #blocked> loc(#loc145)
    amdgpu.buffer_store %218, %210[%211], %216 : tensor<256x128xf8E4M3FN, #blocked> loc(#loc145)
    tt.return loc(#loc146)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":21:14)
#loc3 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":22:14)
#loc4 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":23:14)
#loc5 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":24:14)
#loc6 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":25:14)
#loc7 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":26:14)
#loc8 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":27:14)
#loc9 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":28:14)
#loc10 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":29:14)
#loc11 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":30:14)
#loc12 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":31:14)
#loc13 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":32:14)
#loc14 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":33:14)
#loc15 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":34:14)
#loc16 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":35:14)
#loc17 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":36:14)
#loc18 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":37:14)
#loc19 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":55:14)
#loc20 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":57:24)
#loc21 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":61:37)
#loc22 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":61:29)
#loc23 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":68:26)
#loc24 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":69:14)
#loc25 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":71:51)
#loc26 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":72:19)
#loc27 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":72:32)
#loc28 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":72:25)
#loc29 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":74:23)
#loc30 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":75:32)
#loc31 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":75:20)
#loc32 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":75:11)
#loc33 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":39:14)
#loc34 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":76:64)
#loc35 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":81:8)
#loc36 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":22:36)
#loc37 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":86:61)
#loc38 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":23:37)
#loc39 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":26:18)
#loc40 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":27:23)
#loc41 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":30:22)
#loc42 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":30:50)
#loc43 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":30:39)
#loc44 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":30:70)
#loc45 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":88:26)
#loc46 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":36:22)
#loc47 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":91:57)
#loc48 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":37:22)
#loc49 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":38:41)
#loc50 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":38:30)
#loc51 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":38:50)
#loc52 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":40:40)
#loc53 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":40:34)
#loc54 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":41:19)
#loc55 = loc("/root/code/triton/python/triton_kernels/triton_kernels/matmul_ogs_details/_common.py":41:30)
#loc56 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":104:39)
#loc57 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":104:28)
#loc58 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":105:24)
#loc59 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":106:12)
#loc60 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":107:30)
#loc61 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":108:32)
#loc62 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":109:31)
#loc63 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":109:20)
#loc64 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":110:37)
#loc65 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":110:26)
#loc66 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":112:35)
#loc67 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":112:60)
#loc68 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":113:34)
#loc69 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":114:28)
#loc70 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":116:25)
#loc71 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":116:49)
#loc72 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":116:36)
#loc73 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":117:59)
#loc74 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":122:22)
#loc75 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":124:40)
#loc76 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":124:27)
#loc77 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":124:53)
#loc78 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":125:44)
#loc79 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":125:31)
#loc80 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":126:28)
#loc81 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":126:51)
#loc82 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":126:16)
#loc83 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":126:64)
#loc84 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":149:29)
#loc85 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":149:19)
#loc86 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":173:37)
#loc87 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":173:68)
#loc88 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":173:54)
#loc89 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":173:87)
#loc90 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":176:32)
#loc91 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":176:127)
#loc92 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":176:88)
#loc93 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":187:23)
#loc94 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":187:42)
#loc95 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":188:60)
#loc96 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":190:55)
#loc97 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":190:42)
#loc98 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":191:19)
#loc99 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":191:9)
#loc100 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":192:100)
#loc101 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":192:17)
#loc102 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":195:39)
#loc103 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":207:20)
#loc104 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":208:20)
#loc105 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":225:46)
#loc106 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":239:31)
#loc107 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":242:17)
#loc108 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":243:17)
#loc109 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":235:68)
#loc110 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":225:60)
#loc111 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":247:22)
#loc112 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":248:24)
#loc113 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":250:30)
#loc114 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":250:20)
#loc115 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":250:43)
#loc116 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":252:27)
#loc117 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":272:21)
#loc118 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":272:32)
#loc119 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":272:16)
#loc120 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":51:46)
#loc121 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":277:33)
#loc122 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":51:28)
#loc123 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":8:24)
#loc124 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":41:26)
#loc125 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":52:52)
#loc126 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":44:30)
#loc127 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":10:26)
#loc128 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":10:33)
#loc129 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":45:28)
#loc130 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":45:36)
#loc131 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":45:27)
#loc132 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":45:20)
#loc133 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":45:16)
#loc134 = loc("/root/code/triton/python/triton_kernels/triton_kernels/swiglu_details/_swiglu.py":46:29)
#loc135 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":279:33)
#loc136 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":279:41)
#loc137 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":280:28)
#loc138 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":292:23)
#loc139 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":292:13)
#loc140 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":295:16)
#loc141 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":295:64)
#loc142 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":296:18)
#loc143 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":296:36)
#loc144 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":296:29)
#loc145 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":300:20)
#loc146 = loc("/root/code/triton/python/triton_kernels/triton_kernels/specialize.py":300:4)
#loc147 = loc(callsite(#loc33 at #loc34))
#loc148 = loc(callsite(#loc36 at #loc37))
#loc149 = loc(callsite(#loc38 at #loc37))
#loc150 = loc(callsite(#loc39 at #loc37))
#loc151 = loc(callsite(#loc40 at #loc37))
#loc152 = loc(callsite(#loc41 at #loc37))
#loc153 = loc(callsite(#loc42 at #loc37))
#loc154 = loc(callsite(#loc43 at #loc37))
#loc155 = loc(callsite(#loc44 at #loc37))
#loc156 = loc(callsite(#loc46 at #loc47))
#loc157 = loc(callsite(#loc48 at #loc47))
#loc158 = loc(callsite(#loc49 at #loc47))
#loc159 = loc(callsite(#loc50 at #loc47))
#loc160 = loc(callsite(#loc51 at #loc47))
#loc161 = loc(callsite(#loc33 at #loc47))
#loc162 = loc(callsite(#loc52 at #loc47))
#loc163 = loc(callsite(#loc53 at #loc47))
#loc164 = loc(callsite(#loc54 at #loc47))
#loc165 = loc(callsite(#loc55 at #loc47))
#loc166 = loc(callsite(#loc120 at #loc121))
#loc167 = loc(callsite(#loc122 at #loc121))
#loc168 = loc(callsite(#loc125 at #loc121))
#loc169 = loc(callsite(#loc124 at #loc168))
#loc170 = loc(callsite(#loc126 at #loc168))
#loc171 = loc(callsite(#loc129 at #loc168))
#loc172 = loc(callsite(#loc130 at #loc168))
#loc173 = loc(callsite(#loc131 at #loc168))
#loc174 = loc(callsite(#loc132 at #loc168))
#loc175 = loc(callsite(#loc133 at #loc168))
#loc176 = loc(callsite(#loc134 at #loc168))
#loc177 = loc(callsite(#loc123 at #loc169))
#loc178 = loc(callsite(#loc123 at #loc170))
#loc179 = loc(callsite(#loc127 at #loc170))
#loc180 = loc(callsite(#loc128 at #loc170))
