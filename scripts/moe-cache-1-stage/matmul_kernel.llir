; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @matmul_kernel(ptr addrspace(1) inreg readonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg writeonly captures(none) %2, i32 inreg %3, i32 inreg %4, i32 inreg %5, i32 inreg %6, i32 inreg %7, ptr addrspace(1) inreg readonly captures(none) %8, i32 inreg %9, ptr addrspace(1) inreg readnone captures(none) %10) local_unnamed_addr #0 !dbg !4 {
  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %13 = add i32 %4, 63, !dbg !8
  %14 = sdiv i32 %13, 64, !dbg !12
  %.frozen = freeze i32 %14, !dbg !13
  %15 = sdiv i32 %12, %.frozen, !dbg !13
  %16 = shl i32 %15, 4, !dbg !14
  %17 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !15
  %18 = lshr i32 %17, 4, !dbg !15
  %19 = and i32 %18, 15, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !16
  %21 = getelementptr i32, ptr addrspace(1) %8, i64 %20, !dbg !16
  %22 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %21, i16 0, i32 2147483646, i32 159744), !dbg !17
  %23 = shl nuw nsw i32 %19, 2, !dbg !17
  %24 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %22, i32 %23, i32 0, i32 0), !dbg !17
  %25 = shl i32 %17, 2, !dbg !17
  %26 = and i32 %25, 60, !dbg !17
  %27 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %22, i32 %26, i32 0, i32 0), !dbg !17
  %28 = mul i32 %15, %.frozen, !dbg !18
  %.decomposed = sub i32 %12, %28, !dbg !18
  %29 = icmp slt i32 %24, %9, !dbg !19
  %30 = shl nsw i32 %.decomposed, 6, !dbg !20
  %31 = or disjoint i32 %19, 16, !dbg !21
  %32 = or disjoint i32 %19, 32, !dbg !21
  %33 = or disjoint i32 %19, 48, !dbg !21
  %34 = lshr i32 %17, 2, !dbg !21
  %35 = and i32 %34, 60, !dbg !21
  %36 = mul i32 %24, %5, !dbg !22
  %37 = shl i32 %17, 3, !dbg !23
  %38 = and i32 %37, 120, !dbg !23
  %39 = mul i32 %30, %6, !dbg !24
  %40 = mul i32 %6, %19, !dbg !24
  %41 = mul i32 %6, %31, !dbg !24
  %42 = mul i32 %6, %32, !dbg !24
  %43 = mul i32 %6, %33, !dbg !24
  %44 = sext i32 %39 to i64, !dbg !24
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %44, !dbg !24
  %46 = add i32 %40, %38, !dbg !24
  %47 = add i32 %41, %38, !dbg !24
  %48 = add i32 %42, %38, !dbg !24
  %49 = add i32 %43, %38, !dbg !24
  %50 = or disjoint i32 %38, 128, !dbg !25
  %51 = or disjoint i32 %38, 256, !dbg !25
  %52 = or disjoint i32 %38, 384, !dbg !25
  %53 = or disjoint i32 %38, 512, !dbg !25
  %54 = or disjoint i32 %38, 640, !dbg !25
  %55 = or disjoint i32 %38, 768, !dbg !25
  %56 = or disjoint i32 %38, 896, !dbg !25
  %57 = add i32 %36, %38, !dbg !26
  %58 = add i32 %50, %36, !dbg !26
  %59 = add i32 %51, %36, !dbg !26
  %60 = add i32 %52, %36, !dbg !26
  %61 = add i32 %53, %36, !dbg !26
  %62 = add i32 %54, %36, !dbg !26
  %63 = add i32 %55, %36, !dbg !26
  %64 = add i32 %56, %36, !dbg !26
  %65 = sext i32 %58 to i64
  %66 = getelementptr half, ptr addrspace(1) %0, i64 %65
  %67 = sext i32 %59 to i64
  %68 = getelementptr half, ptr addrspace(1) %0, i64 %67
  %69 = sext i32 %60 to i64
  %70 = getelementptr half, ptr addrspace(1) %0, i64 %69
  %71 = sext i32 %61 to i64
  %72 = getelementptr half, ptr addrspace(1) %0, i64 %71
  %73 = sext i32 %62 to i64
  %74 = getelementptr half, ptr addrspace(1) %0, i64 %73
  %75 = sext i32 %63 to i64
  %76 = getelementptr half, ptr addrspace(1) %0, i64 %75
  %77 = sext i32 %64 to i64
  %78 = getelementptr half, ptr addrspace(1) %0, i64 %77
  %79 = shl nuw nsw i32 %19, 10
  %80 = or disjoint i32 %79, %38
  %81 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %80
  %82 = or disjoint i32 %80, 128
  %83 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %82
  %84 = or disjoint i32 %80, 256
  %85 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %84
  %86 = or disjoint i32 %80, 384
  %87 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %86
  %88 = or disjoint i32 %80, 512
  %89 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %88
  %90 = or disjoint i32 %80, 640
  %91 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %90
  %92 = or disjoint i32 %80, 768
  %93 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %92
  %94 = or disjoint i32 %80, 896
  %95 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %94
  %96 = sext i32 %46 to i64
  %97 = sext i32 %47 to i64
  %98 = sext i32 %48 to i64
  %99 = sext i32 %49 to i64
  %100 = and i32 %17, 15
  %101 = lshr i32 %17, 1
  %102 = and i32 %101, 24
  %103 = or disjoint i32 %102, 32
  %104 = or disjoint i32 %102, 64
  %105 = or disjoint i32 %102, 96
  %.idx = shl nuw nsw i32 %100, 8
  %106 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %107 = xor i32 %101, %37
  %108 = and i32 %107, 120
  %109 = shl nuw nsw i32 %19, 7
  %110 = or disjoint i32 %108, %109
  %111 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %110
  %112 = or disjoint i32 %110, 2048
  %113 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %112
  %114 = or disjoint i32 %110, 4096
  %115 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %114
  %116 = or disjoint i32 %110, 6144
  %117 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %116
  %118 = and i32 %34, 48
  %119 = or disjoint i32 %118, %100
  %120 = shl nuw nsw i32 %100, 3
  %121 = xor i32 %102, %120
  %122 = shl nuw nsw i32 %119, 7
  %123 = or disjoint i32 %122, %121
  %124 = xor i32 %103, %120
  %125 = or disjoint i32 %124, %122
  %126 = xor i32 %104, %120
  %127 = or disjoint i32 %126, %122
  %128 = xor i32 %105, %120
  %129 = or disjoint i32 %128, %122
  %130 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %123
  %131 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %125
  %132 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %127
  %133 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %129
  %134 = sext i32 %57 to i64
  %135 = getelementptr half, ptr addrspace(1) %0, i64 %134
  %136 = getelementptr half, ptr addrspace(1) %45, i64 %96, !dbg !27
  %137 = getelementptr half, ptr addrspace(1) %45, i64 %97, !dbg !27
  %138 = getelementptr half, ptr addrspace(1) %45, i64 %98, !dbg !27
  %139 = getelementptr half, ptr addrspace(1) %45, i64 %99, !dbg !27
  %140 = getelementptr half, ptr addrspace(3) %106, i32 %102
  %141 = getelementptr half, ptr addrspace(3) %106, i32 %103
  %142 = getelementptr half, ptr addrspace(3) %106, i32 %104
  %143 = getelementptr half, ptr addrspace(3) %106, i32 %105
  %144 = getelementptr i8, ptr addrspace(1) %45, i64 256
  %145 = getelementptr half, ptr addrspace(1) %144, i64 %96
  %146 = getelementptr half, ptr addrspace(1) %144, i64 %97
  %147 = getelementptr half, ptr addrspace(1) %144, i64 %98
  %148 = getelementptr half, ptr addrspace(1) %144, i64 %99
  %149 = or disjoint i32 %102, 128
  %150 = or disjoint i32 %102, 160
  %151 = or disjoint i32 %102, 192
  %152 = or disjoint i32 %102, 224
  %153 = getelementptr half, ptr addrspace(3) %106, i32 %149
  %154 = getelementptr half, ptr addrspace(3) %106, i32 %150
  %155 = getelementptr half, ptr addrspace(3) %106, i32 %151
  %156 = getelementptr half, ptr addrspace(3) %106, i32 %152
  %157 = getelementptr i8, ptr addrspace(1) %45, i64 512
  %158 = getelementptr half, ptr addrspace(1) %157, i64 %96
  %159 = getelementptr half, ptr addrspace(1) %157, i64 %97
  %160 = getelementptr half, ptr addrspace(1) %157, i64 %98
  %161 = getelementptr half, ptr addrspace(1) %157, i64 %99
  %162 = or disjoint i32 %102, 256
  %163 = or disjoint i32 %102, 288
  %164 = or disjoint i32 %102, 320
  %165 = or disjoint i32 %102, 352
  %166 = getelementptr half, ptr addrspace(3) %106, i32 %162
  %167 = getelementptr half, ptr addrspace(3) %106, i32 %163
  %168 = getelementptr half, ptr addrspace(3) %106, i32 %164
  %169 = getelementptr half, ptr addrspace(3) %106, i32 %165
  %170 = getelementptr i8, ptr addrspace(1) %45, i64 768
  %171 = getelementptr half, ptr addrspace(1) %170, i64 %96
  %172 = getelementptr half, ptr addrspace(1) %170, i64 %97
  %173 = getelementptr half, ptr addrspace(1) %170, i64 %98
  %174 = getelementptr half, ptr addrspace(1) %170, i64 %99
  %175 = or disjoint i32 %102, 384
  %176 = or disjoint i32 %102, 416
  %177 = or disjoint i32 %102, 448
  %178 = or disjoint i32 %102, 480
  %179 = getelementptr half, ptr addrspace(3) %106, i32 %175
  %180 = getelementptr half, ptr addrspace(3) %106, i32 %176
  %181 = getelementptr half, ptr addrspace(3) %106, i32 %177
  %182 = getelementptr half, ptr addrspace(3) %106, i32 %178
  %183 = getelementptr i8, ptr addrspace(1) %45, i64 1024
  %184 = getelementptr half, ptr addrspace(1) %183, i64 %96
  %185 = getelementptr half, ptr addrspace(1) %183, i64 %97
  %186 = getelementptr half, ptr addrspace(1) %183, i64 %98
  %187 = getelementptr half, ptr addrspace(1) %183, i64 %99
  %188 = or disjoint i32 %102, 512
  %189 = or disjoint i32 %102, 544
  %190 = or disjoint i32 %102, 576
  %191 = or disjoint i32 %102, 608
  %192 = getelementptr half, ptr addrspace(3) %106, i32 %188
  %193 = getelementptr half, ptr addrspace(3) %106, i32 %189
  %194 = getelementptr half, ptr addrspace(3) %106, i32 %190
  %195 = getelementptr half, ptr addrspace(3) %106, i32 %191
  %196 = getelementptr i8, ptr addrspace(1) %45, i64 1280
  %197 = getelementptr half, ptr addrspace(1) %196, i64 %96
  %198 = getelementptr half, ptr addrspace(1) %196, i64 %97
  %199 = getelementptr half, ptr addrspace(1) %196, i64 %98
  %200 = getelementptr half, ptr addrspace(1) %196, i64 %99
  %201 = or disjoint i32 %102, 640
  %202 = or disjoint i32 %102, 672
  %203 = or disjoint i32 %102, 704
  %204 = or disjoint i32 %102, 736
  %205 = getelementptr half, ptr addrspace(3) %106, i32 %201
  %206 = getelementptr half, ptr addrspace(3) %106, i32 %202
  %207 = getelementptr half, ptr addrspace(3) %106, i32 %203
  %208 = getelementptr half, ptr addrspace(3) %106, i32 %204
  %209 = getelementptr i8, ptr addrspace(1) %45, i64 1536
  %210 = getelementptr half, ptr addrspace(1) %209, i64 %96
  %211 = getelementptr half, ptr addrspace(1) %209, i64 %97
  %212 = getelementptr half, ptr addrspace(1) %209, i64 %98
  %213 = getelementptr half, ptr addrspace(1) %209, i64 %99
  %214 = or disjoint i32 %102, 768
  %215 = or disjoint i32 %102, 800
  %216 = or disjoint i32 %102, 832
  %217 = or disjoint i32 %102, 864
  %218 = getelementptr half, ptr addrspace(3) %106, i32 %214
  %219 = getelementptr half, ptr addrspace(3) %106, i32 %215
  %220 = getelementptr half, ptr addrspace(3) %106, i32 %216
  %221 = getelementptr half, ptr addrspace(3) %106, i32 %217
  %222 = getelementptr i8, ptr addrspace(1) %45, i64 1792
  %223 = getelementptr half, ptr addrspace(1) %222, i64 %96
  %224 = getelementptr half, ptr addrspace(1) %222, i64 %97
  %225 = getelementptr half, ptr addrspace(1) %222, i64 %98
  %226 = getelementptr half, ptr addrspace(1) %222, i64 %99
  %227 = or disjoint i32 %102, 896
  %228 = or disjoint i32 %102, 928
  %229 = or disjoint i32 %102, 960
  %230 = or disjoint i32 %102, 992
  %231 = getelementptr half, ptr addrspace(3) %106, i32 %227
  %232 = getelementptr half, ptr addrspace(3) %106, i32 %228
  %233 = getelementptr half, ptr addrspace(3) %106, i32 %229
  %234 = getelementptr half, ptr addrspace(3) %106, i32 %230
  br label %235, !dbg !28

235:                                              ; preds = %11, %271
  %236 = phi float [ 0.000000e+00, %11 ], [ %405, %271 ]
  %237 = phi float [ 0.000000e+00, %11 ], [ %406, %271 ]
  %238 = phi float [ 0.000000e+00, %11 ], [ %407, %271 ]
  %239 = phi float [ 0.000000e+00, %11 ], [ %408, %271 ]
  %240 = phi i1 [ true, %11 ], [ false, %271 ]
  br i1 %29, label %241, label %243, !dbg !28

241:                                              ; preds = %235
  %242 = load <8 x half>, ptr addrspace(1) %135, align 16, !dbg !28
  br label %243, !dbg !28

243:                                              ; preds = %235, %241
  %244 = phi <8 x half> [ %242, %241 ], [ zeroinitializer, %235 ], !dbg !28
  br i1 %29, label %245, label %247, !dbg !28

245:                                              ; preds = %243
  %246 = load <8 x half>, ptr addrspace(1) %66, align 16, !dbg !28
  br label %247, !dbg !28

247:                                              ; preds = %243, %245
  %248 = phi <8 x half> [ %246, %245 ], [ zeroinitializer, %243 ], !dbg !28
  br i1 %29, label %249, label %251, !dbg !28

249:                                              ; preds = %247
  %250 = load <8 x half>, ptr addrspace(1) %68, align 16, !dbg !28
  br label %251, !dbg !28

251:                                              ; preds = %247, %249
  %252 = phi <8 x half> [ %250, %249 ], [ zeroinitializer, %247 ], !dbg !28
  br i1 %29, label %253, label %255, !dbg !28

253:                                              ; preds = %251
  %254 = load <8 x half>, ptr addrspace(1) %70, align 16, !dbg !28
  br label %255, !dbg !28

255:                                              ; preds = %251, %253
  %256 = phi <8 x half> [ %254, %253 ], [ zeroinitializer, %251 ], !dbg !28
  br i1 %29, label %257, label %259, !dbg !28

257:                                              ; preds = %255
  %258 = load <8 x half>, ptr addrspace(1) %72, align 16, !dbg !28
  br label %259, !dbg !28

259:                                              ; preds = %255, %257
  %260 = phi <8 x half> [ %258, %257 ], [ zeroinitializer, %255 ], !dbg !28
  br i1 %29, label %261, label %263, !dbg !28

261:                                              ; preds = %259
  %262 = load <8 x half>, ptr addrspace(1) %74, align 16, !dbg !28
  br label %263, !dbg !28

263:                                              ; preds = %259, %261
  %264 = phi <8 x half> [ %262, %261 ], [ zeroinitializer, %259 ], !dbg !28
  br i1 %29, label %265, label %267, !dbg !28

265:                                              ; preds = %263
  %266 = load <8 x half>, ptr addrspace(1) %76, align 16, !dbg !28
  br label %267, !dbg !28

267:                                              ; preds = %263, %265
  %268 = phi <8 x half> [ %266, %265 ], [ zeroinitializer, %263 ], !dbg !28
  br i1 %29, label %269, label %271, !dbg !28

269:                                              ; preds = %267
  %270 = load <8 x half>, ptr addrspace(1) %78, align 16, !dbg !28
  br label %271, !dbg !28

271:                                              ; preds = %267, %269
  %272 = phi <8 x half> [ %270, %269 ], [ zeroinitializer, %267 ], !dbg !28
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  store <8 x half> %244, ptr addrspace(3) %81, align 16, !dbg !28
  store <8 x half> %248, ptr addrspace(3) %83, align 16, !dbg !28
  store <8 x half> %252, ptr addrspace(3) %85, align 16, !dbg !28
  store <8 x half> %256, ptr addrspace(3) %87, align 16, !dbg !28
  store <8 x half> %260, ptr addrspace(3) %89, align 16, !dbg !28
  store <8 x half> %264, ptr addrspace(3) %91, align 16, !dbg !28
  store <8 x half> %268, ptr addrspace(3) %93, align 16, !dbg !28
  store <8 x half> %272, ptr addrspace(3) %95, align 16, !dbg !28
  %273 = load <8 x half>, ptr addrspace(1) %136, align 16, !dbg !27
  %274 = load <8 x half>, ptr addrspace(1) %137, align 16, !dbg !27
  %275 = load <8 x half>, ptr addrspace(1) %138, align 16, !dbg !27
  %276 = load <8 x half>, ptr addrspace(1) %139, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %277 = load <8 x half>, ptr addrspace(3) %140, align 16, !dbg !28
  %278 = load <8 x half>, ptr addrspace(3) %141, align 16, !dbg !28
  %279 = load <8 x half>, ptr addrspace(3) %142, align 16, !dbg !28
  %280 = load <8 x half>, ptr addrspace(3) %143, align 16, !dbg !28
  store <8 x half> %273, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %274, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %275, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %276, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %281 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %282 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %283 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %284 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %285 = insertelement <4 x float> poison, float %236, i64 0, !dbg !29
  %286 = insertelement <4 x float> %285, float %237, i64 1, !dbg !29
  %287 = insertelement <4 x float> %286, float %238, i64 2, !dbg !29
  %288 = insertelement <4 x float> %287, float %239, i64 3, !dbg !29
  %289 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %281, <8 x half> %277, <4 x float> %288, i32 0, i32 0, i32 0), !dbg !29
  %290 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %282, <8 x half> %278, <4 x float> %289, i32 0, i32 0, i32 0), !dbg !29
  %291 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %283, <8 x half> %279, <4 x float> %290, i32 0, i32 0, i32 0), !dbg !29
  %292 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %284, <8 x half> %280, <4 x float> %291, i32 0, i32 0, i32 0), !dbg !29
  %293 = load <8 x half>, ptr addrspace(1) %145, align 16, !dbg !27
  %294 = load <8 x half>, ptr addrspace(1) %146, align 16, !dbg !27
  %295 = load <8 x half>, ptr addrspace(1) %147, align 16, !dbg !27
  %296 = load <8 x half>, ptr addrspace(1) %148, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %297 = load <8 x half>, ptr addrspace(3) %153, align 16, !dbg !28
  %298 = load <8 x half>, ptr addrspace(3) %154, align 16, !dbg !28
  %299 = load <8 x half>, ptr addrspace(3) %155, align 16, !dbg !28
  %300 = load <8 x half>, ptr addrspace(3) %156, align 16, !dbg !28
  store <8 x half> %293, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %294, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %295, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %296, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %301 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %302 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %303 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %304 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %305 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %301, <8 x half> %297, <4 x float> %292, i32 0, i32 0, i32 0), !dbg !29
  %306 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %302, <8 x half> %298, <4 x float> %305, i32 0, i32 0, i32 0), !dbg !29
  %307 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %303, <8 x half> %299, <4 x float> %306, i32 0, i32 0, i32 0), !dbg !29
  %308 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %304, <8 x half> %300, <4 x float> %307, i32 0, i32 0, i32 0), !dbg !29
  %309 = load <8 x half>, ptr addrspace(1) %158, align 16, !dbg !27
  %310 = load <8 x half>, ptr addrspace(1) %159, align 16, !dbg !27
  %311 = load <8 x half>, ptr addrspace(1) %160, align 16, !dbg !27
  %312 = load <8 x half>, ptr addrspace(1) %161, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %313 = load <8 x half>, ptr addrspace(3) %166, align 16, !dbg !28
  %314 = load <8 x half>, ptr addrspace(3) %167, align 16, !dbg !28
  %315 = load <8 x half>, ptr addrspace(3) %168, align 16, !dbg !28
  %316 = load <8 x half>, ptr addrspace(3) %169, align 16, !dbg !28
  store <8 x half> %309, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %310, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %311, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %312, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %317 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %318 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %319 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %320 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %321 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %317, <8 x half> %313, <4 x float> %308, i32 0, i32 0, i32 0), !dbg !29
  %322 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %318, <8 x half> %314, <4 x float> %321, i32 0, i32 0, i32 0), !dbg !29
  %323 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %319, <8 x half> %315, <4 x float> %322, i32 0, i32 0, i32 0), !dbg !29
  %324 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %320, <8 x half> %316, <4 x float> %323, i32 0, i32 0, i32 0), !dbg !29
  %325 = load <8 x half>, ptr addrspace(1) %171, align 16, !dbg !27
  %326 = load <8 x half>, ptr addrspace(1) %172, align 16, !dbg !27
  %327 = load <8 x half>, ptr addrspace(1) %173, align 16, !dbg !27
  %328 = load <8 x half>, ptr addrspace(1) %174, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %329 = load <8 x half>, ptr addrspace(3) %179, align 16, !dbg !28
  %330 = load <8 x half>, ptr addrspace(3) %180, align 16, !dbg !28
  %331 = load <8 x half>, ptr addrspace(3) %181, align 16, !dbg !28
  %332 = load <8 x half>, ptr addrspace(3) %182, align 16, !dbg !28
  store <8 x half> %325, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %326, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %327, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %328, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %333 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %334 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %335 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %336 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %337 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %333, <8 x half> %329, <4 x float> %324, i32 0, i32 0, i32 0), !dbg !29
  %338 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %334, <8 x half> %330, <4 x float> %337, i32 0, i32 0, i32 0), !dbg !29
  %339 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %335, <8 x half> %331, <4 x float> %338, i32 0, i32 0, i32 0), !dbg !29
  %340 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %336, <8 x half> %332, <4 x float> %339, i32 0, i32 0, i32 0), !dbg !29
  %341 = load <8 x half>, ptr addrspace(1) %184, align 16, !dbg !27
  %342 = load <8 x half>, ptr addrspace(1) %185, align 16, !dbg !27
  %343 = load <8 x half>, ptr addrspace(1) %186, align 16, !dbg !27
  %344 = load <8 x half>, ptr addrspace(1) %187, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %345 = load <8 x half>, ptr addrspace(3) %192, align 16, !dbg !28
  %346 = load <8 x half>, ptr addrspace(3) %193, align 16, !dbg !28
  %347 = load <8 x half>, ptr addrspace(3) %194, align 16, !dbg !28
  %348 = load <8 x half>, ptr addrspace(3) %195, align 16, !dbg !28
  store <8 x half> %341, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %342, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %343, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %344, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %349 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %350 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %351 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %352 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %353 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %349, <8 x half> %345, <4 x float> %340, i32 0, i32 0, i32 0), !dbg !29
  %354 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %350, <8 x half> %346, <4 x float> %353, i32 0, i32 0, i32 0), !dbg !29
  %355 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %351, <8 x half> %347, <4 x float> %354, i32 0, i32 0, i32 0), !dbg !29
  %356 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %352, <8 x half> %348, <4 x float> %355, i32 0, i32 0, i32 0), !dbg !29
  %357 = load <8 x half>, ptr addrspace(1) %197, align 16, !dbg !27
  %358 = load <8 x half>, ptr addrspace(1) %198, align 16, !dbg !27
  %359 = load <8 x half>, ptr addrspace(1) %199, align 16, !dbg !27
  %360 = load <8 x half>, ptr addrspace(1) %200, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %361 = load <8 x half>, ptr addrspace(3) %205, align 16, !dbg !28
  %362 = load <8 x half>, ptr addrspace(3) %206, align 16, !dbg !28
  %363 = load <8 x half>, ptr addrspace(3) %207, align 16, !dbg !28
  %364 = load <8 x half>, ptr addrspace(3) %208, align 16, !dbg !28
  store <8 x half> %357, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %358, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %359, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %360, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %365 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %366 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %367 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %368 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %369 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %365, <8 x half> %361, <4 x float> %356, i32 0, i32 0, i32 0), !dbg !29
  %370 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %366, <8 x half> %362, <4 x float> %369, i32 0, i32 0, i32 0), !dbg !29
  %371 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %367, <8 x half> %363, <4 x float> %370, i32 0, i32 0, i32 0), !dbg !29
  %372 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %368, <8 x half> %364, <4 x float> %371, i32 0, i32 0, i32 0), !dbg !29
  %373 = load <8 x half>, ptr addrspace(1) %210, align 16, !dbg !27
  %374 = load <8 x half>, ptr addrspace(1) %211, align 16, !dbg !27
  %375 = load <8 x half>, ptr addrspace(1) %212, align 16, !dbg !27
  %376 = load <8 x half>, ptr addrspace(1) %213, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %377 = load <8 x half>, ptr addrspace(3) %218, align 16, !dbg !28
  %378 = load <8 x half>, ptr addrspace(3) %219, align 16, !dbg !28
  %379 = load <8 x half>, ptr addrspace(3) %220, align 16, !dbg !28
  %380 = load <8 x half>, ptr addrspace(3) %221, align 16, !dbg !28
  store <8 x half> %373, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %374, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %375, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %376, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %381 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %382 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %383 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %384 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %385 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %381, <8 x half> %377, <4 x float> %372, i32 0, i32 0, i32 0), !dbg !29
  %386 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %382, <8 x half> %378, <4 x float> %385, i32 0, i32 0, i32 0), !dbg !29
  %387 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %383, <8 x half> %379, <4 x float> %386, i32 0, i32 0, i32 0), !dbg !29
  %388 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %384, <8 x half> %380, <4 x float> %387, i32 0, i32 0, i32 0), !dbg !29
  %389 = load <8 x half>, ptr addrspace(1) %223, align 16, !dbg !27
  %390 = load <8 x half>, ptr addrspace(1) %224, align 16, !dbg !27
  %391 = load <8 x half>, ptr addrspace(1) %225, align 16, !dbg !27
  %392 = load <8 x half>, ptr addrspace(1) %226, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %393 = load <8 x half>, ptr addrspace(3) %231, align 16, !dbg !28
  %394 = load <8 x half>, ptr addrspace(3) %232, align 16, !dbg !28
  %395 = load <8 x half>, ptr addrspace(3) %233, align 16, !dbg !28
  %396 = load <8 x half>, ptr addrspace(3) %234, align 16, !dbg !28
  store <8 x half> %389, ptr addrspace(3) %111, align 16, !dbg !27
  store <8 x half> %390, ptr addrspace(3) %113, align 16, !dbg !27
  store <8 x half> %391, ptr addrspace(3) %115, align 16, !dbg !27
  store <8 x half> %392, ptr addrspace(3) %117, align 16, !dbg !27
  fence syncscope("workgroup") release, !dbg !27
  tail call void @llvm.amdgcn.s.barrier(), !dbg !27
  fence syncscope("workgroup") acquire, !dbg !27
  %397 = load <8 x half>, ptr addrspace(3) %130, align 16, !dbg !27
  %398 = load <8 x half>, ptr addrspace(3) %131, align 16, !dbg !27
  %399 = load <8 x half>, ptr addrspace(3) %132, align 16, !dbg !27
  %400 = load <8 x half>, ptr addrspace(3) %133, align 16, !dbg !27
  %401 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %397, <8 x half> %393, <4 x float> %388, i32 0, i32 0, i32 0), !dbg !29
  %402 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %398, <8 x half> %394, <4 x float> %401, i32 0, i32 0, i32 0), !dbg !29
  %403 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %399, <8 x half> %395, <4 x float> %402, i32 0, i32 0, i32 0), !dbg !29
  %404 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half> %400, <8 x half> %396, <4 x float> %403, i32 0, i32 0, i32 0), !dbg !29
  %405 = extractelement <4 x float> %404, i64 0, !dbg !29
  %406 = extractelement <4 x float> %404, i64 1, !dbg !29
  %407 = extractelement <4 x float> %404, i64 2, !dbg !29
  %408 = extractelement <4 x float> %404, i64 3, !dbg !29
  br i1 %240, label %235, label %409, !dbg !28

409:                                              ; preds = %271
  %410 = icmp slt i32 %27, %9, !dbg !19
  %411 = or disjoint i32 %30, %35, !dbg !30
  %412 = icmp slt i32 %411, %4, !dbg !31
  %413 = and i1 %410, %412, !dbg !32
  br i1 %413, label %414, label %426, !dbg !33

414:                                              ; preds = %409
  %415 = shufflevector <4 x float> %404, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !34
  %416 = fptrunc <2 x float> %415 to <2 x half>, !dbg !34
  %417 = shufflevector <4 x float> %404, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !34
  %418 = fptrunc <2 x float> %417 to <2 x half>, !dbg !34
  %419 = shufflevector <2 x half> %416, <2 x half> %418, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %420 = sext i32 %30 to i64, !dbg !35
  %421 = getelementptr half, ptr addrspace(1) %2, i64 %420, !dbg !35
  %422 = mul i32 %27, %7, !dbg !36
  %423 = add i32 %422, %35, !dbg !35
  %424 = sext i32 %423 to i64, !dbg !33
  %425 = getelementptr half, ptr addrspace(1) %421, i64 %424, !dbg !33
  store <4 x half> %419, ptr addrspace(1) %425, align 8, !dbg !33
  br label %426, !dbg !33

426:                                              ; preds = %414, %409
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.f16(<8 x half>, <8 x half>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #4

attributes #0 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "moe_kernel.py", directory: "/root/code/triton/scripts")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 7, type: !5, scopeLine: 7, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 19, column: 24, scope: !4)
!8 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !11)
!9 = distinct !DILexicalBlockFile(scope: !4, file: !10, discriminator: 0)
!10 = !DIFile(filename: "standard.py", directory: "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language")
!11 = !DILocation(line: 22, column: 27, scope: !4)
!12 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !11)
!13 = !DILocation(line: 24, column: 23, scope: !4)
!14 = !DILocation(line: 38, column: 28, scope: !4)
!15 = !DILocation(line: 38, column: 56, scope: !4)
!16 = !DILocation(line: 39, column: 48, scope: !4)
!17 = !DILocation(line: 39, column: 25, scope: !4)
!18 = !DILocation(line: 25, column: 22, scope: !4)
!19 = !DILocation(line: 40, column: 30, scope: !4)
!20 = !DILocation(line: 42, column: 23, scope: !4)
!21 = !DILocation(line: 42, column: 51, scope: !4)
!22 = !DILocation(line: 44, column: 21, scope: !4)
!23 = !DILocation(line: 45, column: 28, scope: !4)
!24 = !DILocation(line: 45, column: 51, scope: !4)
!25 = !DILocation(line: 44, column: 62, scope: !4)
!26 = !DILocation(line: 44, column: 55, scope: !4)
!27 = !DILocation(line: 53, column: 20, scope: !4)
!28 = !DILocation(line: 50, column: 22, scope: !4)
!29 = !DILocation(line: 54, column: 33, scope: !4)
!30 = !DILocation(line: 42, column: 38, scope: !4)
!31 = !DILocation(line: 62, column: 55, scope: !4)
!32 = !DILocation(line: 62, column: 36, scope: !4)
!33 = !DILocation(line: 64, column: 25, scope: !4)
!34 = !DILocation(line: 58, column: 23, scope: !4)
!35 = !DILocation(line: 61, column: 55, scope: !4)
!36 = !DILocation(line: 61, column: 21, scope: !4)
!37 = !DILocation(line: 63, column: 4, scope: !4)
