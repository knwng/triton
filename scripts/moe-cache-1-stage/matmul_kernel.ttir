#loc = loc("/root/code/triton/scripts/moe_kernel.py":7:0)
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg8: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg9: i32 loc("/root/code/triton/scripts/moe_kernel.py":7:0)) attributes {noinline = false} {
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x128xf16> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<128x64xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<16x128xi32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<16x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg4, %c63_i32 : i32 loc(#loc45)
    %2 = arith.divsi %1, %c64_i32 : i32 loc(#loc46)
    %3 = arith.divsi %0, %2 : i32 loc(#loc6)
    %4 = arith.remsi %0, %2 : i32 loc(#loc7)
    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc8)
    %6 = arith.muli %3, %c16_i32 : i32 loc(#loc9)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc10)
    %8 = tt.splat %6 : i32 -> tensor<16xi32> loc(#loc11)
    %9 = arith.addi %8, %7 : tensor<16xi32> loc(#loc11)
    %10 = tt.splat %arg8 : !tt.ptr<i32> -> tensor<16x!tt.ptr<i32>> loc(#loc12)
    %11 = tt.addptr %10, %9 : tensor<16x!tt.ptr<i32>>, tensor<16xi32> loc(#loc12)
    %12 = tt.load %11 : tensor<16x!tt.ptr<i32>> loc(#loc13)
    %13 = tt.splat %arg9 : i32 -> tensor<16xi32> loc(#loc14)
    %14 = arith.cmpi slt, %12, %13 : tensor<16xi32> loc(#loc14)
    %15 = arith.muli %4, %c64_i32 : i32 loc(#loc15)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc16)
    %17 = tt.splat %15 : i32 -> tensor<64xi32> loc(#loc17)
    %18 = arith.addi %17, %16 : tensor<64xi32> loc(#loc17)
    %19 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc18)
    %20 = tt.splat %arg5 : i32 -> tensor<16x1xi32> loc(#loc19)
    %21 = arith.muli %19, %20 : tensor<16x1xi32> loc(#loc19)
    %22 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x1x!tt.ptr<f16>> loc(#loc20)
    %23 = tt.addptr %22, %21 : tensor<16x1x!tt.ptr<f16>>, tensor<16x1xi32> loc(#loc20)
    %24 = tt.expand_dims %5 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc21)
    %25 = tt.broadcast %23 : tensor<16x1x!tt.ptr<f16>> -> tensor<16x128x!tt.ptr<f16>> loc(#loc22)
    %26 = tt.broadcast %24 : tensor<1x128xi32> -> tensor<16x128xi32> loc(#loc22)
    %27 = tt.addptr %25, %26 : tensor<16x128x!tt.ptr<f16>>, tensor<16x128xi32> loc(#loc22)
    %28 = tt.expand_dims %5 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc23)
    %29 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>> loc(#loc24)
    %30 = tt.addptr %29, %28 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32> loc(#loc24)
    %31 = tt.expand_dims %18 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc25)
    %32 = tt.splat %arg6 : i32 -> tensor<1x64xi32> loc(#loc26)
    %33 = arith.muli %31, %32 : tensor<1x64xi32> loc(#loc26)
    %34 = tt.broadcast %30 : tensor<128x1x!tt.ptr<f16>> -> tensor<128x64x!tt.ptr<f16>> loc(#loc27)
    %35 = tt.broadcast %33 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc27)
    %36 = tt.addptr %34, %35 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32> loc(#loc27)
    %37 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi1> -> tensor<16x1xi1> loc(#loc28)
    %38 = tt.broadcast %37 : tensor<16x1xi1> -> tensor<16x128xi1> loc(#loc29)
    %39:3 = scf.for %arg10 = %c0_i32 to %c16_i32 step %c1_i32 iter_args(%arg11 = %cst_2, %arg12 = %27, %arg13 = %36) -> (tensor<16x64xf32>, tensor<16x128x!tt.ptr<f16>>, tensor<128x64x!tt.ptr<f16>>)  : i32 {
      %54 = tt.load %arg12, %38, %cst : tensor<16x128x!tt.ptr<f16>> loc(#loc29)
      %55 = tt.load %arg13 : tensor<128x64x!tt.ptr<f16>> loc(#loc31)
      %56 = tt.dot %54, %55, %arg11 : tensor<16x128xf16> * tensor<128x64xf16> -> tensor<16x64xf32> loc(#loc32)
      %57 = tt.addptr %arg12, %cst_1 : tensor<16x128x!tt.ptr<f16>>, tensor<16x128xi32> loc(#loc33)
      %58 = tt.addptr %arg13, %cst_0 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32> loc(#loc34)
      scf.yield %56, %57, %58 : tensor<16x64xf32>, tensor<16x128x!tt.ptr<f16>>, tensor<128x64x!tt.ptr<f16>> loc(#loc35)
    } loc(#loc30)
    %40 = arith.truncf %39#0 : tensor<16x64xf32> to tensor<16x64xf16> loc(#loc36)
    %41 = tt.splat %arg7 : i32 -> tensor<16x1xi32> loc(#loc37)
    %42 = arith.muli %41, %19 : tensor<16x1xi32> loc(#loc37)
    %43 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<16x1x!tt.ptr<f16>> loc(#loc38)
    %44 = tt.addptr %43, %42 : tensor<16x1x!tt.ptr<f16>>, tensor<16x1xi32> loc(#loc38)
    %45 = tt.broadcast %44 : tensor<16x1x!tt.ptr<f16>> -> tensor<16x64x!tt.ptr<f16>> loc(#loc39)
    %46 = tt.broadcast %31 : tensor<1x64xi32> -> tensor<16x64xi32> loc(#loc39)
    %47 = tt.addptr %45, %46 : tensor<16x64x!tt.ptr<f16>>, tensor<16x64xi32> loc(#loc39)
    %48 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi1> -> tensor<16x1xi1> loc(#loc40)
    %49 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc41)
    %50 = arith.cmpi slt, %31, %49 : tensor<1x64xi32> loc(#loc41)
    %51 = tt.broadcast %48 : tensor<16x1xi1> -> tensor<16x64xi1> loc(#loc42)
    %52 = tt.broadcast %50 : tensor<1x64xi1> -> tensor<16x64xi1> loc(#loc42)
    %53 = arith.andi %51, %52 : tensor<16x64xi1> loc(#loc42)
    tt.store %47, %40, %53 : tensor<16x64x!tt.ptr<f16>> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/code/triton/scripts/moe_kernel.py":19:24)
#loc3 = loc("/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/root/code/triton/scripts/moe_kernel.py":22:27)
#loc5 = loc("/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/root/code/triton/scripts/moe_kernel.py":24:23)
#loc7 = loc("/root/code/triton/scripts/moe_kernel.py":25:22)
#loc8 = loc("/root/code/triton/scripts/moe_kernel.py":34:30)
#loc9 = loc("/root/code/triton/scripts/moe_kernel.py":38:28)
#loc10 = loc("/root/code/triton/scripts/moe_kernel.py":38:56)
#loc11 = loc("/root/code/triton/scripts/moe_kernel.py":38:43)
#loc12 = loc("/root/code/triton/scripts/moe_kernel.py":39:48)
#loc13 = loc("/root/code/triton/scripts/moe_kernel.py":39:25)
#loc14 = loc("/root/code/triton/scripts/moe_kernel.py":40:30)
#loc15 = loc("/root/code/triton/scripts/moe_kernel.py":42:23)
#loc16 = loc("/root/code/triton/scripts/moe_kernel.py":42:51)
#loc17 = loc("/root/code/triton/scripts/moe_kernel.py":42:38)
#loc18 = loc("/root/code/triton/scripts/moe_kernel.py":44:32)
#loc19 = loc("/root/code/triton/scripts/moe_kernel.py":44:43)
#loc20 = loc("/root/code/triton/scripts/moe_kernel.py":44:21)
#loc21 = loc("/root/code/triton/scripts/moe_kernel.py":44:62)
#loc22 = loc("/root/code/triton/scripts/moe_kernel.py":44:55)
#loc23 = loc("/root/code/triton/scripts/moe_kernel.py":45:28)
#loc24 = loc("/root/code/triton/scripts/moe_kernel.py":45:21)
#loc25 = loc("/root/code/triton/scripts/moe_kernel.py":45:59)
#loc26 = loc("/root/code/triton/scripts/moe_kernel.py":45:70)
#loc27 = loc("/root/code/triton/scripts/moe_kernel.py":45:51)
#loc28 = loc("/root/code/triton/scripts/moe_kernel.py":51:44)
#loc29 = loc("/root/code/triton/scripts/moe_kernel.py":51:20)
#loc30 = loc("/root/code/triton/scripts/moe_kernel.py":50:22)
#loc31 = loc("/root/code/triton/scripts/moe_kernel.py":53:20)
#loc32 = loc("/root/code/triton/scripts/moe_kernel.py":54:33)
#loc33 = loc("/root/code/triton/scripts/moe_kernel.py":55:18)
#loc34 = loc("/root/code/triton/scripts/moe_kernel.py":56:18)
#loc35 = loc("/root/code/triton/scripts/moe_kernel.py":56:8)
#loc36 = loc("/root/code/triton/scripts/moe_kernel.py":58:23)
#loc37 = loc("/root/code/triton/scripts/moe_kernel.py":61:33)
#loc38 = loc("/root/code/triton/scripts/moe_kernel.py":61:21)
#loc39 = loc("/root/code/triton/scripts/moe_kernel.py":61:55)
#loc40 = loc("/root/code/triton/scripts/moe_kernel.py":62:24)
#loc41 = loc("/root/code/triton/scripts/moe_kernel.py":62:55)
#loc42 = loc("/root/code/triton/scripts/moe_kernel.py":62:36)
#loc43 = loc("/root/code/triton/scripts/moe_kernel.py":64:25)
#loc44 = loc("/root/code/triton/scripts/moe_kernel.py":63:4)
#loc45 = loc(callsite(#loc3 at #loc4))
#loc46 = loc(callsite(#loc5 at #loc4))
