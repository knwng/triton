#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/root/code/triton/scripts/moe_kernel.py":7:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [1, 4], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 16, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg8: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/root/code/triton/scripts/moe_kernel.py":7:0), %arg9: i32 loc("/root/code/triton/scripts/moe_kernel.py":7:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x64xf32, #mma> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<16x1024xi1, #blocked> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x1024xf16, #blocked> loc(#loc1)
    %cst_512 = arith.constant dense<512> : tensor<16x1024xi32, #blocked>
    %cst_0_1 = arith.constant dense<0> : tensor<16x1024xi32, #blocked>
    %cst_1024 = arith.constant dense<1024> : tensor<16x1024xi32, #blocked>
    %cst_2048 = arith.constant dense<2048> : tensor<16x1xi32, #blocked>
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c7_i32 = arith.constant 7 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg4, %c63_i32 : i32 loc(#loc38)
    %2 = arith.divsi %1, %c64_i32 : i32 loc(#loc39)
    %3 = arith.divsi %0, %2 : i32 loc(#loc6)
    %4 = arith.muli %3, %c16_i32 : i32 loc(#loc7)
    %5 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %6 = tt.addptr %arg8, %4 : !tt.ptr<i32>, i32 loc(#loc9)
    %7 = amdgpu.buffer_load %6[%5] : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc8)
    %9 = amdgpu.buffer_load %6[%8] : tensor<16xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %10 = arith.remsi %0, %2 : i32 loc(#loc11)
    %11 = tt.splat %arg9 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = tt.splat %arg9 : i32 -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc12)
    %13 = arith.cmpi slt, %7, %11 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %14 = arith.cmpi slt, %9, %12 : tensor<16xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc12)
    %15 = arith.muli %10, %c64_i32 : i32 loc(#loc13)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc14)
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc14)
    %18 = tt.splat %15 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %19 = arith.addi %18, %17 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %20 = tt.expand_dims %7 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc16)
    %21 = tt.splat %arg5 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %22 = arith.muli %20, %21 : tensor<16x1xi32, #blocked> loc(#loc16)
    // %22 = arith.muli %20, %cst_2048 : tensor<16x1xi32, #blocked> loc(#loc16)
    %23 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc17)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc18)
    %25 = tt.expand_dims %19 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc19)
    %26 = tt.broadcast %24 : tensor<128x1xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc20)
    %27 = tt.expand_dims %16 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc20)
    %28 = arith.muli %15, %arg6 : i32 loc(#loc20)
    %29 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc20)
    %30 = arith.muli %27, %29 : tensor<1x64xi32, #blocked1> loc(#loc20)
    %31 = tt.broadcast %30 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc20)
    %32 = tt.addptr %arg1, %28 : !tt.ptr<f16>, i32 loc(#loc20)
    %33 = arith.addi %31, %26 : tensor<128x64xi32, #blocked1> loc(#loc20)
    %34 = tt.expand_dims %13 {axis = 1 : i32} : tensor<16xi1, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi1, #blocked> loc(#loc21)
    %35 = tt.broadcast %34 : tensor<16x1xi1, #blocked> -> tensor<16x1024xi1, #blocked> loc(#loc22)
    %36 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %37 = tt.broadcast %22 : tensor<16x1xi32, #blocked> -> tensor<16x1024xi32, #blocked> loc(#loc24)
    %38 = tt.expand_dims %36 {axis = 0 : i32} : tensor<1024xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x1024xi32, #blocked> loc(#loc24)
    %39 = tt.broadcast %38 : tensor<1x1024xi32, #blocked> -> tensor<16x1024xi32, #blocked> loc(#loc24)
    %40 = arith.addi %39, %37 : tensor<16x1024xi32, #blocked> loc(#loc24)
    // tt.print " A index offset: " {hex = false, isSigned = array<i32: 1>} : %40 : tensor<16x1024xi32, #blocked> loc(#loc14)
    %59 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x1024x!tt.ptr<f16>, #blocked> loc(#loc25)
    %60 = tt.addptr %59, %40 : tensor<16x1024x!tt.ptr<f16>, #blocked>, tensor<16x1024xi32, #blocked> loc(#loc25)
    %41:3 = scf.for %arg10 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg11 = %cst, %arg15 = %60, %arg16 = %32) -> (tensor<16x64xf32, #mma>, tensor<16x1024x!tt.ptr<f16>, #blocked>, !tt.ptr<f16>)  : i32 {
      // %80 = arith.muli %arg10, %c128_i32 : i32 loc(#loc25)
      %80 = arith.muli %arg10, %c1024_i32 : i32 loc(#loc25)
      %81 = tt.splat %80 : i32 -> tensor<16x1024xi32, #blocked> loc(#loc25)
      %82 = arith.addi %40, %81 : tensor<16x1024xi32, #blocked>
      // tt.print " Updated A index offset: " {hex = false, isSigned = array<i32: 1>} : %82 : tensor<16x1024xi32, #blocked> loc(#loc14)
      %83 = tt.addptr %59, %82 : tensor<16x1024x!tt.ptr<f16>, #blocked>, tensor<16x1024xi32, #blocked> loc(#loc25)
      // %82 = tt.addptr %60, %81 : tensor<16x1024x!tt.ptr<f16>, #blocked>, tensor<16x1024xi32, #blocked> loc(#loc25)
      // %61 = tt.load %arg15, %35, %cst_0 : tensor<16x1024x!tt.ptr<f16>, #blocked> loc(#loc25)
      %61 = tt.load %83, %35, %cst_0 : tensor<16x1024x!tt.ptr<f16>, #blocked> loc(#loc25)
      %62 = ttg.local_alloc %61 : (tensor<16x1024xf16, #blocked>) -> !ttg.memdesc<16x1024xf16, #shared, #smem, mutable> loc(#loc25)
      %63:2 = scf.for %arg12 = %c0_i32 to %c8_i32 step %c1_i32 iter_args(%arg13 = %arg11, %arg14 = %arg16) -> (tensor<16x64xf32, #mma>, !tt.ptr<f16>)  : i32 {
        %64 = tt.splat %arg14 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc26)
        %65 = tt.addptr %64, %33 : tensor<128x64x!tt.ptr<f16>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc26)
        %66 = tt.load %65 {OpIdx = #amdgpu.OpIdx<1>} : tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc26)
        %67 = arith.muli %arg12, %c128_i32 : i32 loc(#loc25)
        // %67 = arith.muli %c0_i32, %c128_i32 : i32 loc(#loc25)
        %68 = ttg.memdesc_subview %62[%c0_i32, %67] : !ttg.memdesc<16x1024xf16, #shared, #smem, mutable, 16x1024> -> !ttg.memdesc<16x128xf16, #shared, #smem, mutable, 16x1024> loc(#loc25)
        %69 = ttg.local_load %68 : !ttg.memdesc<16x128xf16, #shared, #smem, mutable, 16x1024> -> tensor<16x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc25)
        %70 = ttg.local_alloc %66 : (tensor<128x64xf16, #blocked1>) -> !ttg.memdesc<128x64xf16, #shared1, #smem> loc(#loc26)
        %71 = ttg.local_load %70 : !ttg.memdesc<128x64xf16, #shared1, #smem> -> tensor<128x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
        %72 = tt.dot %69, %71, %arg13 : tensor<16x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<16x64xf32, #mma> loc(#loc27)
        %73 = tt.addptr %arg14, %c128_i32 : !tt.ptr<f16>, i32 loc(#loc28)
        scf.yield %72, %73 : tensor<16x64xf32, #mma>, !tt.ptr<f16> loc(#loc29)
      } loc(#loc25)
      // %79 = tt.addptr %arg15, %cst_1024 : tensor<16x1024x!tt.ptr<f16>, #blocked>, tensor<16x1024xi32, #blocked>
      %79 = tt.addptr %arg15, %cst_0_1 : tensor<16x1024x!tt.ptr<f16>, #blocked>, tensor<16x1024xi32, #blocked>
      scf.yield %63#0, %79, %63#1 : tensor<16x64xf32, #mma>, tensor<16x1024x!tt.ptr<f16>, #blocked>, !tt.ptr<f16> loc(#loc25)
    } loc(#loc25)
    %42 = arith.truncf %41#0 : tensor<16x64xf32, #mma> to tensor<16x64xf16, #mma> loc(#loc30)
    %43 = tt.expand_dims %9 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<16x1xi32, #mma> loc(#loc31)
    %44 = tt.splat %arg7 : i32 -> tensor<16x1xi32, #mma> loc(#loc31)
    %45 = arith.muli %44, %43 : tensor<16x1xi32, #mma> loc(#loc31)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #mma> -> tensor<16x64xi32, #mma> loc(#loc32)
    %47 = tt.expand_dims %17 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc32)
    %48 = tt.broadcast %47 : tensor<1x64xi32, #mma> -> tensor<16x64xi32, #mma> loc(#loc32)
    %49 = tt.addptr %arg2, %15 : !tt.ptr<f16>, i32 loc(#loc32)
    %50 = arith.addi %48, %46 : tensor<16x64xi32, #mma> loc(#loc32)
    %51 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi1, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<16x1xi1, #mma> loc(#loc33)
    %52 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc34)
    %53 = arith.cmpi slt, %25, %52 : tensor<1x64xi32, #mma> loc(#loc34)
    %54 = tt.broadcast %51 : tensor<16x1xi1, #mma> -> tensor<16x64xi1, #mma> loc(#loc35)
    %55 = tt.broadcast %53 : tensor<1x64xi1, #mma> -> tensor<16x64xi1, #mma> loc(#loc35)
    %56 = arith.andi %54, %55 : tensor<16x64xi1, #mma> loc(#loc35)
    %57 = tt.splat %49 : !tt.ptr<f16> -> tensor<16x64x!tt.ptr<f16>, #mma> loc(#loc36)
    %58 = tt.addptr %57, %50 : tensor<16x64x!tt.ptr<f16>, #mma>, tensor<16x64xi32, #mma> loc(#loc36)
    tt.store %58, %42, %56 : tensor<16x64x!tt.ptr<f16>, #mma> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/code/triton/scripts/moe_kernel.py":19:24)
#loc3 = loc("/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/root/code/triton/scripts/moe_kernel.py":22:27)
#loc5 = loc("/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/root/code/triton/scripts/moe_kernel.py":24:23)
#loc7 = loc("/root/code/triton/scripts/moe_kernel.py":38:28)
#loc8 = loc("/root/code/triton/scripts/moe_kernel.py":38:56)
#loc9 = loc("/root/code/triton/scripts/moe_kernel.py":39:48)
#loc10 = loc("/root/code/triton/scripts/moe_kernel.py":39:25)
#loc11 = loc("/root/code/triton/scripts/moe_kernel.py":25:22)
#loc12 = loc("/root/code/triton/scripts/moe_kernel.py":40:30)
#loc13 = loc("/root/code/triton/scripts/moe_kernel.py":42:23)
#loc14 = loc("/root/code/triton/scripts/moe_kernel.py":42:51)
#loc15 = loc("/root/code/triton/scripts/moe_kernel.py":42:38)
#loc16 = loc("/root/code/triton/scripts/moe_kernel.py":44:21)
#loc17 = loc("/root/code/triton/scripts/moe_kernel.py":45:28)
#loc18 = loc("/root/code/triton/scripts/moe_kernel.py":45:21)
#loc19 = loc("/root/code/triton/scripts/moe_kernel.py":45:59)
#loc20 = loc("/root/code/triton/scripts/moe_kernel.py":45:51)
#loc21 = loc("/root/code/triton/scripts/moe_kernel.py":51:44)
#loc22 = loc("/root/code/triton/scripts/moe_kernel.py":51:20)
#loc23 = loc("/root/code/triton/scripts/moe_kernel.py":44:62)
#loc24 = loc("/root/code/triton/scripts/moe_kernel.py":44:55)
#loc25 = loc("/root/code/triton/scripts/moe_kernel.py":50:22)
#loc26 = loc("/root/code/triton/scripts/moe_kernel.py":53:20)
#loc27 = loc("/root/code/triton/scripts/moe_kernel.py":54:33)
#loc28 = loc("/root/code/triton/scripts/moe_kernel.py":56:18)
#loc29 = loc("/root/code/triton/scripts/moe_kernel.py":56:8)
#loc30 = loc("/root/code/triton/scripts/moe_kernel.py":58:23)
#loc31 = loc("/root/code/triton/scripts/moe_kernel.py":61:21)
#loc32 = loc("/root/code/triton/scripts/moe_kernel.py":61:55)
#loc33 = loc("/root/code/triton/scripts/moe_kernel.py":62:24)
#loc34 = loc("/root/code/triton/scripts/moe_kernel.py":62:55)
#loc35 = loc("/root/code/triton/scripts/moe_kernel.py":62:36)
#loc36 = loc("/root/code/triton/scripts/moe_kernel.py":64:25)
#loc37 = loc("/root/code/triton/scripts/moe_kernel.py":63:4)
#loc38 = loc(callsite(#loc3 at #loc4))
#loc39 = loc(callsite(#loc5 at #loc4))
