#loc = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":50:0)
#loc1 = loc(unknown)
#loc2 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":116:68)
#loc33 = loc("left")
#loc34 = loc("right")
#loc133 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":310:35)
#loc142 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":319:21)
#loc163 = loc("output_ptr"(#loc))
#loc164 = loc("query_ptr"(#loc))
#loc165 = loc("key_cache_ptr"(#loc))
#loc166 = loc("value_cache_ptr"(#loc))
#loc167 = loc("sink_ptr"(#loc))
#loc168 = loc("block_tables_ptr"(#loc))
#loc169 = loc("seq_lens_ptr"(#loc))
#loc170 = loc("scale"(#loc))
#loc171 = loc("k_scale"(#loc))
#loc172 = loc("v_scale"(#loc))
#loc173 = loc("out_scale"(#loc))
#loc174 = loc("softcap"(#loc))
#loc175 = loc("block_table_stride"(#loc))
#loc176 = loc("query_stride_0"(#loc))
#loc177 = loc("query_stride_1"(#loc))
#loc178 = loc("output_stride_0"(#loc))
#loc179 = loc("output_stride_1"(#loc))
#loc180 = loc("qq_bias_stride_0"(#loc))
#loc181 = loc("stride_k_cache_0"(#loc))
#loc182 = loc("stride_k_cache_1"(#loc))
#loc183 = loc("stride_k_cache_2"(#loc))
#loc184 = loc("stride_v_cache_0"(#loc))
#loc185 = loc("stride_v_cache_1"(#loc))
#loc186 = loc("stride_v_cache_2"(#loc))
#loc187 = loc("query_start_len_ptr"(#loc))
#loc188 = loc("num_seqs"(#loc))
#loc189 = loc("seq_idx"(#loc2))
#loc193 = loc("left"(#loc33))
#loc194 = loc("right"(#loc34))
#loc283 = loc("m_j"(#loc133))
#loc290 = loc("l_j"(#loc142))
#loc309 = loc(callsite(#loc193 at #loc189))
#loc310 = loc(callsite(#loc194 at #loc189))
#loc326 = loc(callsite(#loc1 at #loc283))
#loc328 = loc(callsite(#loc1 at #loc290))
module {
  tt.func public @kernel_unified_attention_2d(%output_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("output_ptr"(#loc)), %query_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("query_ptr"(#loc)), %key_cache_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("key_cache_ptr"(#loc)), %value_cache_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("value_cache_ptr"(#loc)), %sink_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("sink_ptr"(#loc)), %block_tables_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("block_tables_ptr"(#loc)), %seq_lens_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("seq_lens_ptr"(#loc)), %scale: f32 loc("scale"(#loc)), %k_scale: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("k_scale"(#loc)), %v_scale: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("v_scale"(#loc)), %out_scale: f32 loc("out_scale"(#loc)), %softcap: i32 {tt.divisibility = 16 : i32} loc("softcap"(#loc)), %block_table_stride: i64 {tt.divisibility = 16 : i32} loc("block_table_stride"(#loc)), %query_stride_0: i64 {tt.divisibility = 16 : i32} loc("query_stride_0"(#loc)), %query_stride_1: i64 {tt.divisibility = 16 : i32} loc("query_stride_1"(#loc)), %output_stride_0: i64 {tt.divisibility = 16 : i32} loc("output_stride_0"(#loc)), %output_stride_1: i64 {tt.divisibility = 16 : i32} loc("output_stride_1"(#loc)), %qq_bias_stride_0: i64 {tt.divisibility = 16 : i32} loc("qq_bias_stride_0"(#loc)), %stride_k_cache_0: i64 {tt.divisibility = 16 : i32} loc("stride_k_cache_0"(#loc)), %stride_k_cache_1: i64 {tt.divisibility = 16 : i32} loc("stride_k_cache_1"(#loc)), %stride_k_cache_2: i64 {tt.divisibility = 16 : i32} loc("stride_k_cache_2"(#loc)), %stride_v_cache_0: i64 {tt.divisibility = 16 : i32} loc("stride_v_cache_0"(#loc)), %stride_v_cache_1: i64 {tt.divisibility = 16 : i32} loc("stride_v_cache_1"(#loc)), %stride_v_cache_2: i64 {tt.divisibility = 16 : i32} loc("stride_v_cache_2"(#loc)), %query_start_len_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("query_start_len_ptr"(#loc)), %num_seqs: i32 loc("num_seqs"(#loc))) attributes {noinline = false} {
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %seq_idx = arith.constant 2 : i32 loc(#loc306)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xbf16> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF80> : tensor<128xbf16> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xbf16> loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<128x1xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_4 = arith.constant dense<0xFF800000> : tensor<128x64xf32> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<128x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_7 = arith.constant dense<0xFF800000> : tensor<128xf32> loc(#loc1)
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<128xi32> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<64xi32> loc(#loc1)
    %cst_11 = arith.constant dense<1> : tensor<64xi32> loc(#loc1)
    %cst_12 = arith.constant dense<64> : tensor<64xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_13 = arith.constant dense<8> : tensor<128xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %kv_head_idx = tt.get_program_id x : i32 loc(#loc190)
    %q_block_global_idx = tt.get_program_id y : i32 loc(#loc191)
    %0 = arith.cmpi sge, %kv_head_idx, %c0_i32 : i32 loc(#loc5)
    llvm.intr.assume %0 : i1 loc(#loc6)
    %1 = arith.cmpi sge, %q_block_global_idx, %c0_i32 : i32 loc(#loc7)
    llvm.intr.assume %1 : i1 loc(#loc8)
    %2 = arith.cmpi sgt, %block_table_stride, %c0_i64 : i64 loc(#loc9)
    llvm.intr.assume %2 : i1 loc(#loc10)
    %3 = arith.cmpi sgt, %query_stride_0, %c0_i64 : i64 loc(#loc11)
    llvm.intr.assume %3 : i1 loc(#loc12)
    %4 = arith.cmpi sgt, %query_stride_1, %c0_i64 : i64 loc(#loc13)
    llvm.intr.assume %4 : i1 loc(#loc14)
    %5 = arith.cmpi sgt, %output_stride_0, %c0_i64 : i64 loc(#loc15)
    llvm.intr.assume %5 : i1 loc(#loc16)
    %6 = arith.cmpi sgt, %output_stride_1, %c0_i64 : i64 loc(#loc17)
    llvm.intr.assume %6 : i1 loc(#loc18)
    %7 = arith.cmpi sgt, %stride_k_cache_0, %c0_i64 : i64 loc(#loc19)
    llvm.intr.assume %7 : i1 loc(#loc20)
    %8 = arith.cmpi sgt, %stride_k_cache_1, %c0_i64 : i64 loc(#loc21)
    llvm.intr.assume %8 : i1 loc(#loc22)
    %9 = arith.cmpi sgt, %stride_k_cache_2, %c0_i64 : i64 loc(#loc23)
    llvm.intr.assume %9 : i1 loc(#loc24)
    %10 = arith.cmpi sgt, %stride_v_cache_0, %c0_i64 : i64 loc(#loc25)
    llvm.intr.assume %10 : i1 loc(#loc26)
    %11 = arith.cmpi sgt, %stride_v_cache_1, %c0_i64 : i64 loc(#loc27)
    llvm.intr.assume %11 : i1 loc(#loc28)
    %12 = arith.cmpi sgt, %stride_v_cache_2, %c0_i64 : i64 loc(#loc29)
    llvm.intr.assume %12 : i1 loc(#loc30)
    %right:2 = scf.while (%left = %c0_i32, %right_86 = %num_seqs) : (i32, i32) -> (i32, i32) {
      %seq_idx_87 = arith.cmpi slt, %left, %right_86 : i32 loc(#loc308)
      scf.condition(%seq_idx_87) %left, %right_86 : i32, i32 loc(#loc308)
    } do {
    ^bb0(%left: i32 loc(callsite(#loc193 at #loc189)), %right_86: i32 loc(callsite(#loc194 at #loc189))):
      %mid = arith.addi %left, %right_86 : i32 loc(#loc311)
      %right_87 = arith.divsi %mid, %seq_idx : i32 loc(#loc330)
      %val = tt.addptr %query_start_len_ptr, %right_87 : !tt.ptr<i32>, i32 loc(#loc313)
      %val_88 = tt.load %val : !tt.ptr<i32> loc(#loc314)
      %mid_val = arith.divsi %val_88, %c16_i32 : i32 loc(#loc315)
      %mid_val_89 = arith.addi %mid_val, %right_87 : i32 loc(#loc316)
      %seq_idx_90 = arith.cmpi sle, %mid_val_89, %q_block_global_idx : i32 loc(#loc317)
      %seq_idx_91 = arith.select %seq_idx_90, %right_86, %right_87 : i32 loc(#loc318)
      %seq_idx_92 = scf.if %seq_idx_90 -> (i32) {
        %left_93 = arith.addi %right_87, %c1_i32 : i32 loc(#loc331)
        scf.yield %left_93 : i32 loc(#loc331)
      } else {
        scf.yield %left : i32 loc(#loc306)
      } loc(#loc318)
      scf.yield %seq_idx_92, %seq_idx_91 : i32, i32 loc(#loc320)
    } loc(#loc329)
    %seq_idx_14 = arith.subi %right#0, %c1_i32 : i32 loc(#loc321)
    %q_block_start_idx = tt.addptr %query_start_len_ptr, %seq_idx_14 : !tt.ptr<i32>, i32 loc(#loc202)
    %q_block_start_idx_15 = tt.load %q_block_start_idx : !tt.ptr<i32> loc(#loc203)
    %q_block_start_idx_16 = arith.divsi %q_block_start_idx_15, %c16_i32 : i32 loc(#loc204)
    %q_block_start_idx_17 = arith.addi %q_block_start_idx_16, %seq_idx_14 : i32 loc(#loc205)
    %q_block_local_idx = arith.subi %q_block_global_idx, %q_block_start_idx_17 : i32 loc(#loc206)
    %cur_batch_in_all_stop_index = tt.addptr %q_block_start_idx, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc207)
    %cur_batch_in_all_stop_index_18 = tt.load %cur_batch_in_all_stop_index : !tt.ptr<i32> loc(#loc208)
    %cur_batch_query_len = arith.subi %cur_batch_in_all_stop_index_18, %q_block_start_idx_15 : i32 loc(#loc209)
    %13 = arith.muli %q_block_local_idx, %c16_i32 : i32 loc(#loc54)
    %14 = arith.cmpi sge, %13, %cur_batch_query_len : i32 loc(#loc55)
    cf.cond_br %14, ^bb1, ^bb2 loc(#loc55)
  ^bb1:  // pred: ^bb0
    tt.return loc(#loc56)
  ^bb2:  // pred: ^bb0
    %offs_m = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc210)
    %offs_d = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc211)
    %query_pos = arith.divsi %offs_m, %cst_13 : tensor<128xi32> loc(#loc212)
    %query_pos_19 = tt.splat %13 : i32 -> tensor<128xi32> loc(#loc213)
    %query_pos_20 = arith.addi %query_pos_19, %query_pos : tensor<128xi32> loc(#loc213)
    %query_offset_0 = tt.splat %q_block_start_idx_15 : i32 -> tensor<128xi32> loc(#loc214)
    %query_offset_0_21 = arith.addi %query_offset_0, %query_pos_20 : tensor<128xi32> loc(#loc214)
    %query_offset_1 = arith.muli %kv_head_idx, %c8_i32 : i32 loc(#loc215)
    %query_offset_1_22 = arith.remsi %offs_m, %cst_13 : tensor<128xi32> loc(#loc216)
    %query_offset_1_23 = tt.splat %query_offset_1 : i32 -> tensor<128xi32> loc(#loc217)
    %query_offset_1_24 = arith.addi %query_offset_1_23, %query_offset_1_22 : tensor<128xi32> loc(#loc217)
    %query_offset = tt.expand_dims %query_offset_0_21 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc218)
    %query_offset_25 = arith.extsi %query_offset : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc219)
    %query_offset_26 = tt.splat %query_stride_0 : i64 -> tensor<128x1xi64> loc(#loc219)
    %query_offset_27 = arith.muli %query_offset_25, %query_offset_26 : tensor<128x1xi64> loc(#loc219)
    %query_offset_28 = tt.expand_dims %query_offset_1_24 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc220)
    %query_offset_29 = arith.extsi %query_offset_28 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc221)
    %query_offset_30 = tt.splat %query_stride_1 : i64 -> tensor<128x1xi64> loc(#loc221)
    %query_offset_31 = arith.muli %query_offset_29, %query_offset_30 : tensor<128x1xi64> loc(#loc221)
    %query_offset_32 = arith.addi %query_offset_27, %query_offset_31 : tensor<128x1xi64> loc(#loc222)
    %query_offset_33 = tt.expand_dims %offs_d {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc223)
    %query_offset_34 = arith.extsi %query_offset_33 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc224)
    %query_offset_35 = tt.broadcast %query_offset_32 : tensor<128x1xi64> -> tensor<128x64xi64> loc(#loc224)
    %query_offset_36 = tt.broadcast %query_offset_34 : tensor<1x64xi64> -> tensor<128x64xi64> loc(#loc224)
    %query_offset_37 = arith.addi %query_offset_35, %query_offset_36 : tensor<128x64xi64> loc(#loc224)
    %dim_mask = arith.cmpi slt, %offs_d, %cst_12 : tensor<64xi32> loc(#loc225)
    %dim_mask_38 = arith.select %dim_mask, %cst_11, %cst_10 : tensor<64xi1>, tensor<64xi32> loc(#loc226)
    %dim_mask_39 = arith.cmpi ne, %dim_mask_38, %cst_10 : tensor<64xi32> loc(#loc227)
    %query_mask_0 = tt.splat %cur_batch_query_len : i32 -> tensor<128xi32> loc(#loc228)
    %query_mask_0_40 = arith.cmpi slt, %query_pos_20, %query_mask_0 : tensor<128xi32> loc(#loc228)
    %query_mask_1 = arith.cmpi slt, %query_offset_1_24, %cst_9 : tensor<128xi32> loc(#loc229)
    %Q = tt.expand_dims %dim_mask_39 {axis = 0 : i32} : tensor<64xi1> -> tensor<1x64xi1> loc(#loc230)
    %Q_41 = tt.expand_dims %query_mask_0_40 {axis = 1 : i32} : tensor<128xi1> -> tensor<128x1xi1> loc(#loc231)
    %Q_42 = tt.broadcast %Q : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc232)
    %Q_43 = tt.broadcast %Q_41 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc232)
    %Q_44 = arith.andi %Q_42, %Q_43 : tensor<128x64xi1> loc(#loc232)
    %Q_45 = tt.expand_dims %query_mask_1 {axis = 1 : i32} : tensor<128xi1> -> tensor<128x1xi1> loc(#loc233)
    %Q_46 = tt.broadcast %Q_45 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc234)
    %Q_47 = arith.andi %Q_44, %Q_46 : tensor<128x64xi1> loc(#loc234)
    %Q_48 = tt.splat %query_ptr : !tt.ptr<bf16> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc235)
    %Q_49 = tt.addptr %Q_48, %query_offset_37 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi64> loc(#loc235)
    %Q_50 = tt.load %Q_49, %Q_47, %cst_1 cacheModifier = cg : tensor<128x64x!tt.ptr<bf16>> loc(#loc236)
    %block_table_offset = arith.extsi %seq_idx_14 : i32 to i64 loc(#loc237)
    %block_table_offset_51 = arith.muli %block_table_offset, %block_table_stride : i64 loc(#loc237)
    %M = tt.splat %sink_ptr : !tt.ptr<bf16> -> tensor<128x!tt.ptr<bf16>> loc(#loc238)
    %M_52 = tt.addptr %M, %query_offset_1_24 : tensor<128x!tt.ptr<bf16>>, tensor<128xi32> loc(#loc238)
    %M_53 = tt.load %M_52, %query_mask_1, %cst_0 : tensor<128x!tt.ptr<bf16>> loc(#loc239)
    %M_54 = arith.extf %M_53 : tensor<128xbf16> to tensor<128xf32> loc(#loc240)
    %seq_len = tt.addptr %seq_lens_ptr, %seq_idx_14 : !tt.ptr<i32>, i32 loc(#loc241)
    %seq_len_55 = tt.load %seq_len : !tt.ptr<i32> loc(#loc242)
    %context_len = arith.subi %seq_len_55, %cur_batch_query_len : i32 loc(#loc243)
    %max_seq_prefix_len = arith.addi %context_len, %13 : i32 loc(#loc244)
    %max_seq_prefix_len_56 = arith.addi %max_seq_prefix_len, %c16_i32 : i32 loc(#loc245)
    %max_seq_prefix_len_57 = arith.minsi %max_seq_prefix_len_56, %seq_len_55 : i32 loc(#loc246)
    %num_blocks = arith.addi %max_seq_prefix_len_57, %c63_i32 : i32 loc(#loc322)
    %num_blocks_58 = arith.divsi %num_blocks, %c64_i32 : i32 loc(#loc323)
    %physical_block_idx = tt.addptr %block_tables_ptr, %block_table_offset_51 : !tt.ptr<i32>, i64 loc(#loc248)
    %v_offset = arith.extsi %kv_head_idx : i32 to i64 loc(#loc249)
    %v_offset_59 = arith.muli %v_offset, %stride_v_cache_2 : i64 loc(#loc249)
    %v_offset_60 = tt.expand_dims %offs_d {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc250)
    %v_offset_61 = arith.extsi %v_offset_60 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc251)
    %v_offset_62 = tt.splat %stride_v_cache_1 : i64 -> tensor<64x1xi64> loc(#loc251)
    %v_offset_63 = arith.muli %v_offset_61, %v_offset_62 : tensor<64x1xi64> loc(#loc251)
    %v_offset_64 = tt.broadcast %v_offset_63 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc252)
    %k_offset = arith.muli %v_offset, %stride_k_cache_2 : i64 loc(#loc253)
    %k_offset_65 = tt.splat %stride_k_cache_1 : i64 -> tensor<1x64xi64> loc(#loc254)
    %k_offset_66 = arith.muli %query_offset_34, %k_offset_65 : tensor<1x64xi64> loc(#loc254)
    %k_offset_67 = tt.broadcast %k_offset_66 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc255)
    %K_load = tt.expand_dims %dim_mask_39 {axis = 1 : i32} : tensor<64xi1> -> tensor<64x1xi1> loc(#loc256)
    %K_load_68 = tt.splat %key_cache_ptr : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc257)
    %K_load_69 = tt.broadcast %K_load : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc258)
    %V_load = tt.splat %value_cache_ptr : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc259)
    %V_load_70 = tt.broadcast %Q : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc260)
    %seq_mask = tt.expand_dims %query_pos_20 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc261)
    %seq_mask_71 = tt.splat %context_len : i32 -> tensor<128x1xi32> loc(#loc262)
    %seq_mask_72 = arith.addi %seq_mask_71, %seq_mask : tensor<128x1xi32> loc(#loc262)
    %seq_mask_73 = arith.addi %seq_mask_72, %cst_5 : tensor<128x1xi32> loc(#loc263)
    %seq_mask_74 = tt.broadcast %seq_mask_73 : tensor<128x1xi32> -> tensor<128x64xi32> loc(#loc264)
    %S = tt.splat %scale : f32 -> tensor<128x64xf32> loc(#loc265)
    %S_75 = arith.andi %Q_45, %Q_41 : tensor<128x1xi1> loc(#loc266)
    %S_76 = tt.broadcast %S_75 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc267)
    %acc:3 = scf.for %j = %c0_i32 to %num_blocks_58 step %c1_i32 iter_args(%M_86 = %M_54, %L = %cst_6, %acc_87 = %cst_8) -> (tensor<128xf32>, tensor<128xf32>, tensor<128x64xf32>)  : i32 {
      %physical_block_idx_88 = tt.addptr %physical_block_idx, %j : !tt.ptr<i32>, i32 loc(#loc269)
      %physical_block_idx_89 = tt.load %physical_block_idx_88 : !tt.ptr<i32> loc(#loc270)
      %v_offset_90 = arith.extsi %physical_block_idx_89 : i32 to i64 loc(#loc271)
      %v_offset_91 = arith.muli %v_offset_90, %stride_v_cache_0 : i64 loc(#loc271)
      %v_offset_92 = arith.addi %v_offset_91, %v_offset_59 : i64 loc(#loc272)
      %v_offset_93 = tt.splat %v_offset_92 : i64 -> tensor<1x64xi64> loc(#loc273)
      %v_offset_94 = arith.addi %v_offset_93, %query_offset_34 : tensor<1x64xi64> loc(#loc273)
      %v_offset_95 = tt.broadcast %v_offset_94 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc252)
      %v_offset_96 = arith.addi %v_offset_95, %v_offset_64 : tensor<64x64xi64> loc(#loc252)
      %k_offset_97 = arith.muli %v_offset_90, %stride_k_cache_0 : i64 loc(#loc274)
      %k_offset_98 = arith.addi %k_offset_97, %k_offset : i64 loc(#loc275)
      %k_offset_99 = tt.splat %k_offset_98 : i64 -> tensor<64x1xi64> loc(#loc276)
      %k_offset_100 = arith.addi %k_offset_99, %v_offset_61 : tensor<64x1xi64> loc(#loc276)
      %k_offset_101 = tt.broadcast %k_offset_100 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc255)
      %k_offset_102 = arith.addi %k_offset_101, %k_offset_67 : tensor<64x64xi64> loc(#loc255)
      %K_load_103 = tt.addptr %K_load_68, %k_offset_102 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc257)
      %K_load_104 = tt.load %K_load_103, %K_load_69, %cst : tensor<64x64x!tt.ptr<bf16>> loc(#loc258)
      %V_load_105 = tt.addptr %V_load, %v_offset_96 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc259)
      %V_load_106 = tt.load %V_load_105, %V_load_70, %cst : tensor<64x64x!tt.ptr<bf16>> loc(#loc260)
      %seq_offset = arith.muli %j, %c64_i32 : i32 loc(#loc277)
      %seq_offset_107 = tt.splat %seq_offset : i32 -> tensor<64xi32> loc(#loc278)
      %seq_offset_108 = arith.addi %seq_offset_107, %offs_d : tensor<64xi32> loc(#loc278)
      %seq_mask_109 = tt.expand_dims %seq_offset_108 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc279)
      %seq_mask_110 = tt.broadcast %seq_mask_109 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc264)
      %seq_mask_111 = arith.cmpi slt, %seq_mask_110, %seq_mask_74 : tensor<128x64xi32> loc(#loc264)
      %S_112 = tt.dot %Q_50, %K_load_104, %cst_8 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc280)
      %S_113 = arith.mulf %S, %S_112 : tensor<128x64xf32> loc(#loc265)
      %S_114 = arith.addf %S_113, %cst_8 : tensor<128x64xf32> loc(#loc281)
      %S_115 = arith.andi %S_76, %seq_mask_111 : tensor<128x64xi1> loc(#loc267)
      %S_116 = arith.select %S_115, %S_114, %cst_4 : tensor<128x64xi1>, tensor<128x64xf32> loc(#loc282)
      %m_j = "tt.reduce"(%S_116) <{axis = 1 : i32}> ({
      ^bb0(%m_j_131: f32 loc(callsite(#loc1 at #loc283)), %m_j_132: f32 loc(callsite(#loc1 at #loc283))):
        %m_j_133 = arith.maxnumf %m_j_131, %m_j_132 : f32 loc(#loc333)
        tt.reduce.return %m_j_133 : f32 loc(#loc325)
      }) : (tensor<128x64xf32>) -> tensor<128xf32> loc(#loc325)
      %m_j_117 = arith.maxnumf %M_86, %m_j : tensor<128xf32> loc(#loc284)
      %m_j_118 = arith.cmpf ogt, %m_j_117, %cst_7 : tensor<128xf32> loc(#loc285)
      %m_j_119 = arith.select %m_j_118, %m_j_117, %cst_3 : tensor<128xi1>, tensor<128xf32> loc(#loc286)
      %P = tt.expand_dims %m_j_119 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc287)
      %P_120 = tt.broadcast %P : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc288)
      %P_121 = arith.subf %S_116, %P_120 : tensor<128x64xf32> loc(#loc288)
      %P_122 = math.exp %P_121 : tensor<128x64xf32> loc(#loc289)
      %l_j = "tt.reduce"(%P_122) <{axis = 1 : i32}> ({
      ^bb0(%l_j_131: f32 loc(callsite(#loc1 at #loc290)), %l_j_132: f32 loc(callsite(#loc1 at #loc290))):
        %l_j_133 = arith.addf %l_j_131, %l_j_132 : f32 loc(#loc334)
        tt.reduce.return %l_j_133 : f32 loc(#loc327)
      }) : (tensor<128x64xf32>) -> tensor<128xf32> loc(#loc327)
      %alpha = arith.subf %M_86, %m_j_119 : tensor<128xf32> loc(#loc291)
      %alpha_123 = math.exp %alpha : tensor<128xf32> loc(#loc292)
      %acc_124 = tt.expand_dims %alpha_123 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc293)
      %acc_125 = tt.broadcast %acc_124 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc294)
      %acc_126 = arith.mulf %acc_87, %acc_125 : tensor<128x64xf32> loc(#loc294)
      %L_127 = arith.mulf %L, %alpha_123 : tensor<128xf32> loc(#loc295)
      %L_128 = arith.addf %L_127, %l_j : tensor<128xf32> loc(#loc296)
      %acc_129 = arith.truncf %P_122 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc297)
      %acc_130 = tt.dot %acc_129, %V_load_106, %acc_126 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc298)
      scf.yield %m_j_119, %L_128, %acc_130 : tensor<128xf32>, tensor<128xf32>, tensor<128x64xf32> loc(#loc152)
    } loc(#loc332)
    %one_over_L = tt.expand_dims %acc#1 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc299)
    %one_over_L_77 = arith.divf %cst_2, %one_over_L : tensor<128x1xf32> loc(#loc300)
    %acc_78 = tt.broadcast %one_over_L_77 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc301)
    %acc_79 = arith.mulf %acc#2, %acc_78 : tensor<128x64xf32> loc(#loc301)
    %output_offset = tt.splat %output_stride_0 : i64 -> tensor<128x1xi64> loc(#loc302)
    %output_offset_80 = arith.muli %query_offset_25, %output_offset : tensor<128x1xi64> loc(#loc302)
    %output_offset_81 = tt.splat %output_stride_1 : i64 -> tensor<128x1xi64> loc(#loc303)
    %output_offset_82 = arith.muli %query_offset_29, %output_offset_81 : tensor<128x1xi64> loc(#loc303)
    %output_offset_83 = arith.addi %output_offset_80, %output_offset_82 : tensor<128x1xi64> loc(#loc304)
    %output_offset_84 = tt.broadcast %output_offset_83 : tensor<128x1xi64> -> tensor<128x64xi64> loc(#loc305)
    %output_offset_85 = arith.addi %output_offset_84, %query_offset_36 : tensor<128x64xi64> loc(#loc305)
    %15 = tt.splat %output_ptr : !tt.ptr<bf16> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc160)
    %16 = tt.addptr %15, %output_offset_85 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi64> loc(#loc160)
    %17 = arith.truncf %acc_79 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc161)
    tt.store %16, %17, %Q_47 : tensor<128x64x!tt.ptr<bf16>> loc(#loc161)
    tt.return loc(#loc162)
  } loc(#loc)
} loc(#loc)
#loc3 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":98:32)
#loc4 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":99:39)
#loc5 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":101:29)
#loc6 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":101:14)
#loc7 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":102:36)
#loc8 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":102:14)
#loc9 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":103:35)
#loc10 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":103:14)
#loc11 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":104:31)
#loc12 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":104:14)
#loc13 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":105:31)
#loc14 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":105:14)
#loc15 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":106:32)
#loc16 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":106:14)
#loc17 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":107:32)
#loc18 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":107:14)
#loc19 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":108:33)
#loc20 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":108:14)
#loc21 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":109:33)
#loc22 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":109:14)
#loc23 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":110:33)
#loc24 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":110:14)
#loc25 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":111:33)
#loc26 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":111:14)
#loc27 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":112:33)
#loc28 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":112:14)
#loc29 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":113:33)
#loc30 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":113:14)
#loc31 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":36:4)
#loc32 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":36:17)
#loc35 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":37:22)
#loc36 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":37:32)
#loc37 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":38:44)
#loc38 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":38:22)
#loc39 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":39:25)
#loc40 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":39:35)
#loc41 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":41:22)
#loc42 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":41:11)
#loc43 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":42:25)
#loc44 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":41:8)
#loc45 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":46:18)
#loc46 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":119:54)
#loc47 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":119:32)
#loc48 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":119:66)
#loc49 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":119:76)
#loc50 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":121:45)
#loc51 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":124:74)
#loc52 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":124:42)
#loc53 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":126:56)
#loc54 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":128:27)
#loc55 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":128:38)
#loc56 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":129:8)
#loc57 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":131:26)
#loc58 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":132:26)
#loc59 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":133:56)
#loc60 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":133:46)
#loc61 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":135:52)
#loc62 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":136:35)
#loc63 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":136:65)
#loc64 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":136:56)
#loc65 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":138:23)
#loc66 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":138:34)
#loc67 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":139:25)
#loc68 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":139:36)
#loc69 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":139:10)
#loc70 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":140:17)
#loc71 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":140:10)
#loc72 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":143:33)
#loc73 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":143:47)
#loc74 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":143:53)
#loc75 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":144:31)
#loc76 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":145:36)
#loc77 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":155:22)
#loc78 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":155:46)
#loc79 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":155:33)
#loc80 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":155:70)
#loc81 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":155:57)
#loc82 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":154:20)
#loc83 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":154:8)
#loc84 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":160:35)
#loc85 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":166:23)
#loc86 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":166:12)
#loc87 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":169:13)
#loc88 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":175:37)
#loc89 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":175:22)
#loc90 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":178:28)
#loc91 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":196:10)
#loc92 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":198:10)
#loc93 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":203:56)
#loc94 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":15:20)
#loc95 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":208:45)
#loc96 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":15:26)
#loc97 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":220:56)
#loc98 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":226:28)
#loc99 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":228:21)
#loc100 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":228:32)
#loc101 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":228:14)
#loc102 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":233:28)
#loc103 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":235:32)
#loc104 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":235:14)
#loc105 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":241:26)
#loc106 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":240:28)
#loc107 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":240:12)
#loc108 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":256:30)
#loc109 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":256:12)
#loc110 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":272:65)
#loc111 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":272:55)
#loc112 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":272:76)
#loc113 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":272:41)
#loc114 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":277:21)
#loc115 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":283:36)
#loc116 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":283:60)
#loc117 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":218:37)
#loc118 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":220:77)
#loc119 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":220:37)
#loc120 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":225:33)
#loc121 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":226:14)
#loc122 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":227:14)
#loc123 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":232:33)
#loc124 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":233:14)
#loc125 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":234:14)
#loc126 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":270:25)
#loc127 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":270:38)
#loc128 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":272:30)
#loc129 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":277:31)
#loc130 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":277:13)
#loc131 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":283:73)
#loc132 = loc("/app/OAI-triton/python/triton/language/standard.py":189:40)
#loc134 = loc("/app/OAI-triton/python/triton/language/standard.py":168:27)
#loc135 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":310:28)
#loc136 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":313:29)
#loc137 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":313:49)
#loc138 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":316:27)
#loc139 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":316:23)
#loc140 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":316:19)
#loc141 = loc("/app/OAI-triton/python/triton/language/standard.py":291:36)
#loc143 = loc("/app/OAI-triton/python/triton/language/standard.py":261:15)
#loc144 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":322:27)
#loc145 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":322:23)
#loc146 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":325:26)
#loc147 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":325:20)
#loc148 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":328:16)
#loc149 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":328:24)
#loc150 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":332:27)
#loc151 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":332:37)
#loc152 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":332:8)
#loc153 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":335:25)
#loc154 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":335:23)
#loc155 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":336:16)
#loc156 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":342:34)
#loc157 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":343:36)
#loc158 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":343:10)
#loc159 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":344:10)
#loc160 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":348:21)
#loc161 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":349:8)
#loc162 = loc("/app/OAI-triton/unified_attn_ubench/unified_attention_aiter.py":347:4)
#loc190 = loc("kv_head_idx"(#loc3))
#loc191 = loc("q_block_global_idx"(#loc4))
#loc192 = loc("left"(#loc31))
#loc195 = loc("mid"(#loc35))
#loc196 = loc("mid"(#loc36))
#loc197 = loc("val"(#loc37))
#loc198 = loc("val"(#loc38))
#loc199 = loc("mid_val"(#loc39))
#loc200 = loc("mid_val"(#loc40))
#loc201 = loc("left"(#loc43))
#loc202 = loc("q_block_start_idx"(#loc46))
#loc203 = loc("q_block_start_idx"(#loc47))
#loc204 = loc("q_block_start_idx"(#loc48))
#loc205 = loc("q_block_start_idx"(#loc49))
#loc206 = loc("q_block_local_idx"(#loc50))
#loc207 = loc("cur_batch_in_all_stop_index"(#loc51))
#loc208 = loc("cur_batch_in_all_stop_index"(#loc52))
#loc209 = loc("cur_batch_query_len"(#loc53))
#loc210 = loc("offs_m"(#loc57))
#loc211 = loc("offs_d"(#loc58))
#loc212 = loc("query_pos"(#loc59))
#loc213 = loc("query_pos"(#loc60))
#loc214 = loc("query_offset_0"(#loc61))
#loc215 = loc("query_offset_1"(#loc62))
#loc216 = loc("query_offset_1"(#loc63))
#loc217 = loc("query_offset_1"(#loc64))
#loc218 = loc("query_offset"(#loc65))
#loc219 = loc("query_offset"(#loc66))
#loc220 = loc("query_offset"(#loc67))
#loc221 = loc("query_offset"(#loc68))
#loc222 = loc("query_offset"(#loc69))
#loc223 = loc("query_offset"(#loc70))
#loc224 = loc("query_offset"(#loc71))
#loc225 = loc("dim_mask"(#loc72))
#loc226 = loc("dim_mask"(#loc73))
#loc227 = loc("dim_mask"(#loc74))
#loc228 = loc("query_mask_0"(#loc75))
#loc229 = loc("query_mask_1"(#loc76))
#loc230 = loc("Q"(#loc77))
#loc231 = loc("Q"(#loc78))
#loc232 = loc("Q"(#loc79))
#loc233 = loc("Q"(#loc80))
#loc234 = loc("Q"(#loc81))
#loc235 = loc("Q"(#loc82))
#loc236 = loc("Q"(#loc83))
#loc237 = loc("block_table_offset"(#loc84))
#loc238 = loc("M"(#loc85))
#loc239 = loc("M"(#loc86))
#loc240 = loc("M"(#loc87))
#loc241 = loc("seq_len"(#loc88))
#loc242 = loc("seq_len"(#loc89))
#loc243 = loc("context_len"(#loc90))
#loc244 = loc("max_seq_prefix_len"(#loc91))
#loc245 = loc("max_seq_prefix_len"(#loc92))
#loc246 = loc("max_seq_prefix_len"(#loc93))
#loc247 = loc("num_blocks"(#loc95))
#loc248 = loc("physical_block_idx"(#loc97))
#loc249 = loc("v_offset"(#loc98))
#loc250 = loc("v_offset"(#loc99))
#loc251 = loc("v_offset"(#loc100))
#loc252 = loc("v_offset"(#loc101))
#loc253 = loc("k_offset"(#loc102))
#loc254 = loc("k_offset"(#loc103))
#loc255 = loc("k_offset"(#loc104))
#loc256 = loc("K_load"(#loc105))
#loc257 = loc("K_load"(#loc106))
#loc258 = loc("K_load"(#loc107))
#loc259 = loc("V_load"(#loc108))
#loc260 = loc("V_load"(#loc109))
#loc261 = loc("seq_mask"(#loc110))
#loc262 = loc("seq_mask"(#loc111))
#loc263 = loc("seq_mask"(#loc112))
#loc264 = loc("seq_mask"(#loc113))
#loc265 = loc("S"(#loc114))
#loc266 = loc("S"(#loc115))
#loc267 = loc("S"(#loc116))
#loc268 = loc("M"(#loc117))
#loc269 = loc("physical_block_idx"(#loc118))
#loc270 = loc("physical_block_idx"(#loc119))
#loc271 = loc("v_offset"(#loc120))
#loc272 = loc("v_offset"(#loc121))
#loc273 = loc("v_offset"(#loc122))
#loc274 = loc("k_offset"(#loc123))
#loc275 = loc("k_offset"(#loc124))
#loc276 = loc("k_offset"(#loc125))
#loc277 = loc("seq_offset"(#loc126))
#loc278 = loc("seq_offset"(#loc127))
#loc279 = loc("seq_mask"(#loc128))
#loc280 = loc("S"(#loc129))
#loc281 = loc("S"(#loc130))
#loc282 = loc("S"(#loc131))
#loc284 = loc("m_j"(#loc135))
#loc285 = loc("m_j"(#loc136))
#loc286 = loc("m_j"(#loc137))
#loc287 = loc("P"(#loc138))
#loc288 = loc("P"(#loc139))
#loc289 = loc("P"(#loc140))
#loc291 = loc("alpha"(#loc144))
#loc292 = loc("alpha"(#loc145))
#loc293 = loc("acc"(#loc146))
#loc294 = loc("acc"(#loc147))
#loc295 = loc("L"(#loc148))
#loc296 = loc("L"(#loc149))
#loc297 = loc("acc"(#loc150))
#loc298 = loc("acc"(#loc151))
#loc299 = loc("one_over_L"(#loc153))
#loc300 = loc("one_over_L"(#loc154))
#loc301 = loc("acc"(#loc155))
#loc302 = loc("output_offset"(#loc156))
#loc303 = loc("output_offset"(#loc157))
#loc304 = loc("output_offset"(#loc158))
#loc305 = loc("output_offset"(#loc159))
#loc306 = loc(callsite(#loc1 at #loc189))
#loc307 = loc("right"(#loc192))
#loc308 = loc(callsite(#loc32 at #loc189))
#loc311 = loc(callsite(#loc195 at #loc189))
#loc312 = loc("right"(#loc196))
#loc313 = loc(callsite(#loc197 at #loc189))
#loc314 = loc(callsite(#loc198 at #loc189))
#loc315 = loc(callsite(#loc199 at #loc189))
#loc316 = loc(callsite(#loc200 at #loc189))
#loc317 = loc(callsite(#loc41 at #loc189))
#loc318 = loc(callsite(#loc42 at #loc189))
#loc319 = loc("left"(#loc201))
#loc320 = loc(callsite(#loc44 at #loc189))
#loc321 = loc(callsite(#loc45 at #loc189))
#loc322 = loc(callsite(#loc94 at #loc247))
#loc323 = loc(callsite(#loc96 at #loc247))
#loc324 = loc("L"(#loc268))
#loc325 = loc(callsite(#loc132 at #loc283))
#loc327 = loc(callsite(#loc141 at #loc290))
#loc329 = loc(callsite(#loc307 at #loc189))
#loc330 = loc(callsite(#loc312 at #loc189))
#loc331 = loc(callsite(#loc319 at #loc189))
#loc332 = loc("acc"(#loc324))
#loc333 = loc(callsite(#loc134 at #loc325))
#loc334 = loc(callsite(#loc143 at #loc327))
