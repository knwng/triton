; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @kernel_unified_attention_2d(ptr addrspace(1) inreg writeonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg readonly captures(none) %2, ptr addrspace(1) inreg readonly captures(none) %3, ptr addrspace(1) inreg readonly captures(none) %4, ptr addrspace(1) inreg readonly captures(none) %5, ptr addrspace(1) inreg readonly captures(none) %6, float inreg %7, ptr addrspace(1) inreg readnone captures(none) %8, ptr addrspace(1) inreg readnone captures(none) %9, float inreg %10, i32 inreg %11, i64 inreg %12, i64 inreg %13, i64 inreg %14, i64 inreg %15, i64 inreg %16, i64 inreg %17, i64 inreg %18, i64 inreg %19, i64 inreg %20, i64 inreg %21, i64 inreg %22, i64 inreg %23, ptr addrspace(1) inreg readonly captures(none) %24, i32 inreg %25, ptr addrspace(1) inreg readnone captures(none) %26, ptr addrspace(1) inreg readnone captures(none) %27) local_unnamed_addr #1 !dbg !7 {
  %29 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !8
  %30 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !9
  %31 = icmp sgt i32 %25, 0, !dbg !10
  br i1 %31, label %.lr.ph, label %._crit_edge, !dbg !10

.lr.ph:                                           ; preds = %28, %.lr.ph
  %32 = phi i32 [ %42, %.lr.ph ], [ %25, %28 ]
  %33 = phi i32 [ %44, %.lr.ph ], [ 0, %28 ]
  %34 = add i32 %32, %33, !dbg !13
  %35 = sdiv i32 %34, 2, !dbg !14
  %36 = sext i32 %35 to i64, !dbg !15
  %37 = getelementptr i32, ptr addrspace(1) %24, i64 %36, !dbg !15
  %38 = load <1 x i32>, ptr addrspace(1) %37, align 4, !dbg !16
  %39 = extractelement <1 x i32> %38, i64 0, !dbg !16
  %40 = sdiv i32 %39, 16, !dbg !17
  %41 = add nsw i32 %40, %35, !dbg !18
  %.not6 = icmp sgt i32 %41, %30, !dbg !19
  %42 = select i1 %.not6, i32 %35, i32 %32, !dbg !20
  %43 = add nsw i32 %35, 1, !dbg !20
  %44 = select i1 %.not6, i32 %33, i32 %43, !dbg !20
  %45 = icmp slt i32 %44, %42, !dbg !10
  br i1 %45, label %.lr.ph, label %._crit_edge, !dbg !10

._crit_edge:                                      ; preds = %.lr.ph, %28
  %.lcssa14 = phi i32 [ 0, %28 ], [ %44, %.lr.ph ], !dbg !12
  %46 = add nsw i32 %.lcssa14, -1, !dbg !21
  %47 = sext i32 %46 to i64, !dbg !22
  %48 = getelementptr i32, ptr addrspace(1) %24, i64 %47, !dbg !22
  %49 = load <1 x i32>, ptr addrspace(1) %48, align 4, !dbg !23
  %50 = extractelement <1 x i32> %49, i64 0, !dbg !23
  %.neg23 = sdiv i32 %50, -16, !dbg !24
  %reass.sub = sub i32 %30, %.lcssa14, !dbg !25
  %.neg12 = add i32 %reass.sub, 1, !dbg !25
  %51 = add i32 %.neg12, %.neg23, !dbg !26
  %52 = getelementptr i8, ptr addrspace(1) %48, i64 4, !dbg !27
  %53 = load <1 x i32>, ptr addrspace(1) %52, align 4, !dbg !28
  %foldExtExtBinop = sub <1 x i32> %53, %49, !dbg !29
  %54 = extractelement <1 x i32> %foldExtExtBinop, i64 0, !dbg !29
  %55 = shl i32 %51, 4, !dbg !30
  %.not = icmp slt i32 %55, %54, !dbg !31
  br i1 %.not, label %56, label %.critedge10, !dbg !31

.critedge10:                                      ; preds = %._crit_edge20, %.critedge, %._crit_edge
  ret void, !dbg !32

56:                                               ; preds = %._crit_edge
  %57 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !33
  %58 = and i32 %57, 31, !dbg !33
  %59 = and i32 %57, 192, !dbg !33
  %60 = lshr i32 %57, 3, !dbg !33
  %61 = and i32 %60, 31, !dbg !33
  %62 = or disjoint i32 %61, 32, !dbg !33
  %63 = and i32 %57, 32, !dbg !34
  %64 = icmp eq i32 %63, 0, !dbg !34
  %65 = lshr exact i32 %63, 2, !dbg !34
  %66 = or disjoint i32 %65, 16, !dbg !34
  %67 = or disjoint i32 %65, 32, !dbg !34
  %68 = or disjoint i32 %65, 48, !dbg !34
  %69 = shl nuw nsw i32 %57, 3, !dbg !34
  %70 = and i32 %69, 56, !dbg !34
  %71 = lshr exact i32 %63, 3, !dbg !34
  %72 = lshr exact i32 %59, 4, !dbg !35
  %73 = lshr i32 %58, 3, !dbg !35
  %74 = or disjoint i32 %72, %73, !dbg !35
  %75 = lshr i32 %61, 3, !dbg !35
  %76 = lshr i32 %62, 3, !dbg !35
  %77 = lshr i32 %57, 6, !dbg !35
  %78 = or disjoint i32 %74, %55, !dbg !36
  %79 = or disjoint i32 %55, %75, !dbg !36
  %80 = or disjoint i32 %55, %76, !dbg !36
  %81 = or disjoint i32 %79, 8, !dbg !36
  %82 = or disjoint i32 %77, %55, !dbg !36
  %83 = or i32 %82, 12, !dbg !36
  %84 = add i32 %78, %50, !dbg !37
  %85 = add i32 %80, %50, !dbg !37
  %86 = add i32 %81, %50, !dbg !37
  %87 = add i32 %83, %50, !dbg !37
  %88 = shl i32 %29, 3, !dbg !38
  %89 = and i32 %57, 7, !dbg !39
  %90 = and i32 %60, 7, !dbg !39
  %91 = or disjoint i32 %88, %89, !dbg !40
  %92 = or disjoint i32 %90, %88, !dbg !40
  %93 = zext i32 %84 to i64, !dbg !41
  %94 = zext i32 %85 to i64, !dbg !41
  %95 = zext i32 %86 to i64, !dbg !41
  %96 = zext i32 %87 to i64, !dbg !41
  %97 = zext i32 %91 to i64, !dbg !42
  %98 = zext i32 %92 to i64, !dbg !42
  %99 = icmp slt i32 %78, %54, !dbg !43
  %100 = icmp slt i32 %79, %54, !dbg !43
  %101 = icmp slt i32 %80, %54, !dbg !43
  %102 = icmp slt i32 %81, %54, !dbg !43
  %103 = icmp slt i32 %83, %54, !dbg !43
  %104 = icmp slt i32 %91, 64, !dbg !44
  %105 = icmp slt i32 %92, 64, !dbg !44
  %106 = and i1 %104, %99, !dbg !45
  %107 = and i1 %105, %100, !dbg !45
  %108 = and i1 %105, %101, !dbg !45
  %109 = and i1 %105, %102, !dbg !45
  %110 = and i1 %105, %103, !dbg !45
  %111 = mul i64 %13, %94, !dbg !46
  %112 = mul i64 %13, %95, !dbg !46
  %113 = mul i64 %13, %96, !dbg !46
  %114 = mul i64 %14, %98, !dbg !46
  %115 = add i64 %111, %114, !dbg !46
  %116 = add i64 %112, %114, !dbg !46
  %117 = add i64 %113, %114, !dbg !46
  %118 = trunc i64 %115 to i32, !dbg !46
  %119 = add i32 %70, %118, !dbg !46
  %120 = trunc i64 %116 to i32, !dbg !46
  %121 = add i32 %70, %120, !dbg !46
  %122 = trunc i64 %117 to i32, !dbg !46
  %123 = add i32 %70, %122, !dbg !46
  %124 = sext i32 %119 to i64, !dbg !47
  %125 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !47
  %126 = sext i32 %121 to i64, !dbg !47
  %127 = getelementptr bfloat, ptr addrspace(1) %1, i64 %126, !dbg !47
  %128 = sext i32 %123 to i64, !dbg !47
  %129 = getelementptr bfloat, ptr addrspace(1) %1, i64 %128, !dbg !47
  br i1 %107, label %130, label %140, !dbg !47

130:                                              ; preds = %56
  %131 = add i32 %79, %50, !dbg !37
  %132 = zext i32 %131 to i64, !dbg !41
  %133 = mul i64 %13, %132, !dbg !46
  %134 = add i64 %133, %114, !dbg !46
  %135 = trunc i64 %134 to i32, !dbg !46
  %136 = add i32 %70, %135, !dbg !46
  %137 = sext i32 %136 to i64, !dbg !47
  %138 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !47
  %139 = load <8 x bfloat>, ptr addrspace(1) %138, align 16, !dbg !47, !nontemporal !48
  br label %140, !dbg !47

140:                                              ; preds = %56, %130
  %141 = phi <8 x bfloat> [ %139, %130 ], [ zeroinitializer, %56 ], !dbg !47
  br i1 %108, label %142, label %144, !dbg !47

142:                                              ; preds = %140
  %143 = load <8 x bfloat>, ptr addrspace(1) %125, align 16, !dbg !47, !nontemporal !48
  br label %144, !dbg !47

144:                                              ; preds = %140, %142
  %145 = phi <8 x bfloat> [ %143, %142 ], [ zeroinitializer, %140 ], !dbg !47
  br i1 %109, label %146, label %148, !dbg !47

146:                                              ; preds = %144
  %147 = load <8 x bfloat>, ptr addrspace(1) %127, align 16, !dbg !47, !nontemporal !48
  br label %148, !dbg !47

148:                                              ; preds = %144, %146
  %149 = phi <8 x bfloat> [ %147, %146 ], [ zeroinitializer, %144 ], !dbg !47
  br i1 %110, label %150, label %152, !dbg !47

150:                                              ; preds = %148
  %151 = load <8 x bfloat>, ptr addrspace(1) %129, align 16, !dbg !47, !nontemporal !48
  br label %152, !dbg !47

152:                                              ; preds = %148, %150
  %153 = phi <8 x bfloat> [ %151, %150 ], [ zeroinitializer, %148 ], !dbg !47
  %154 = shl nuw nsw i32 %57, 4, !dbg !47
  %155 = and i32 %154, 4080, !dbg !47
  %156 = and i32 %57, 112, !dbg !47
  %157 = xor i32 %155, %156, !dbg !47
  %158 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %157, !dbg !47
  store <8 x bfloat> %141, ptr addrspace(3) %158, align 16, !dbg !47
  %159 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 4096, !dbg !47
  store <8 x bfloat> %145, ptr addrspace(3) %159, align 16, !dbg !47
  %160 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 8192, !dbg !47
  store <8 x bfloat> %149, ptr addrspace(3) %160, align 16, !dbg !47
  %161 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 12288, !dbg !47
  store <8 x bfloat> %153, ptr addrspace(3) %161, align 16, !dbg !47
  fence syncscope("workgroup") release, !dbg !47
  tail call void @llvm.amdgcn.s.barrier(), !dbg !47
  fence syncscope("workgroup") acquire, !dbg !47
  %162 = shl nuw nsw i32 %58, 7, !dbg !47
  %163 = shl nuw nsw i32 %59, 6, !dbg !47
  %164 = and i32 %69, 112, !dbg !47
  %165 = lshr exact i32 %63, 1, !dbg !47
  %166 = xor i32 %164, %165, !dbg !47
  %167 = or disjoint i32 %166, %163, !dbg !47
  %168 = or disjoint i32 %167, %162, !dbg !47
  %169 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %168, !dbg !47
  %170 = load <8 x bfloat>, ptr addrspace(3) %169, align 16, !dbg !47
  %171 = xor i32 %168, 32, !dbg !47
  %172 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %171, !dbg !47
  %173 = load <8 x bfloat>, ptr addrspace(3) %172, align 16, !dbg !47
  %174 = xor i32 %168, 64, !dbg !47
  %175 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %174, !dbg !47
  %176 = load <8 x bfloat>, ptr addrspace(3) %175, align 16, !dbg !47
  %177 = xor i32 %168, 96, !dbg !47
  %178 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %177, !dbg !47
  %179 = load <8 x bfloat>, ptr addrspace(3) %178, align 16, !dbg !47
  %180 = mul i64 %12, %47, !dbg !49
  %181 = getelementptr i32, ptr addrspace(1) %6, i64 %47, !dbg !50
  %182 = load <1 x i32>, ptr addrspace(1) %181, align 4, !dbg !51
  %183 = extractelement <1 x i32> %182, i64 0, !dbg !51
  %foldExtExtBinop64 = sub <1 x i32> %182, %foldExtExtBinop, !dbg !52
  %184 = extractelement <1 x i32> %foldExtExtBinop64, i64 0, !dbg !52
  %185 = add i32 %55, 16, !dbg !53
  %186 = add i32 %185, %184, !dbg !54
  %187 = tail call i32 @llvm.smin.i32(i32 %186, i32 %183), !dbg !55
  %188 = add i32 %187, 63, !dbg !56
  %189 = sdiv i32 %188, 64, !dbg !58
  %190 = getelementptr i32, ptr addrspace(1) %5, i64 %180, !dbg !59
  %191 = sext i32 %29 to i64, !dbg !60
  %192 = mul i64 %23, %191, !dbg !60
  %193 = mul i64 %20, %191, !dbg !61
  %194 = add i32 %78, 1, !dbg !62
  %195 = add i32 %194, %184, !dbg !63
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %2, i64 %193, !dbg !64
  %invariant.gep15 = getelementptr bfloat, ptr addrspace(1) %3, i64 %192, !dbg !64
  %196 = icmp sgt i32 %188, 63, !dbg !64
  br i1 %196, label %.lr.ph19, label %._crit_edge20, !dbg !64

.lr.ph19:                                         ; preds = %152
  %197 = sext i32 %88 to i64, !dbg !65
  %198 = getelementptr bfloat, ptr addrspace(1) %4, i64 %197, !dbg !65
  %199 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %198, i16 0, i32 2147483646, i32 159744), !dbg !66
  %200 = shl nuw nsw i32 %89, 1, !dbg !66
  %201 = select i1 %104, i32 %200, i32 -2147483648, !dbg !66
  %202 = tail call i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) %199, i32 %201, i32 0, i32 0), !dbg !66
  %203 = zext i16 %202 to i32, !dbg !67
  %204 = shl nuw i32 %203, 16, !dbg !67
  %205 = select i1 %104, i32 %204, i32 -8388608, !dbg !66
  %206 = bitcast i32 %205 to float, !dbg !67
  %207 = trunc i64 %19 to i32
  %208 = mul i32 %61, %207
  %209 = add i32 %208, %70
  %210 = mul i32 %62, %207
  %211 = add i32 %210, %70
  %212 = shl i32 %209, 1
  %213 = shl i32 %211, 1
  %214 = trunc i64 %22 to i32
  %215 = mul i32 %61, %214
  %216 = add i32 %215, %70
  %217 = mul i32 %62, %214
  %218 = add i32 %217, %70
  %219 = shl i32 %216, 1
  %220 = shl i32 %218, 1
  %221 = or disjoint i32 %162, %164
  %222 = xor i32 %221, %165
  %223 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %222
  %224 = getelementptr inbounds nuw i8, ptr addrspace(3) %223, i32 4096
  %225 = xor i32 %222, 32
  %226 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %225
  %227 = getelementptr inbounds nuw i8, ptr addrspace(3) %226, i32 4096
  %228 = xor i32 %222, 64
  %229 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %228
  %230 = getelementptr inbounds nuw i8, ptr addrspace(3) %229, i32 4096
  %231 = xor i32 %222, 96
  %232 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %231
  %233 = getelementptr inbounds nuw i8, ptr addrspace(3) %232, i32 4096
  %234 = lshr exact i32 %156, 1
  %235 = xor i32 %155, %234
  %236 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %235
  %237 = getelementptr inbounds nuw i8, ptr addrspace(3) %236, i32 4096
  %238 = xor i32 %235, 8
  %239 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %238
  %240 = getelementptr inbounds nuw i8, ptr addrspace(3) %239, i32 4096
  %241 = shl nuw nsw i32 %57, 2
  %242 = and i32 %241, 12
  %243 = and i32 %154, 64
  %244 = and i32 %57, 8
  %245 = icmp eq i32 %244, 0
  %246 = select i1 %245, i32 0, i32 132
  %247 = and i32 %57, 16
  %248 = select i1 %64, i32 0, i32 264
  %249 = or disjoint i32 %243, %247
  %250 = xor i32 %246, %242
  %251 = xor i32 %250, %248
  %252 = or disjoint i32 %249, %251
  %253 = xor i32 %252, 528
  %254 = xor i32 %252, 1552
  %255 = xor i32 %252, 2576
  %256 = xor i32 %252, 3600
  %257 = xor i32 %252, 560
  %258 = xor i32 %252, 1584
  %259 = xor i32 %252, 2608
  %260 = xor i32 %252, 3632
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %252
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %253
  %263 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 2048
  %264 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %254
  %265 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 4096
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %255
  %267 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 6144
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %256
  %269 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 64
  %270 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %257
  %271 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 2112
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %258
  %273 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 4160
  %274 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %259
  %275 = getelementptr inbounds nuw i8, ptr addrspace(3) %261, i32 6208
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %260
  br label %277, !dbg !64

277:                                              ; preds = %.lr.ph19, %277
  %278 = phi float [ 1.000000e+00, %.lr.ph19 ], [ %732, %277 ]
  %.pn517 = phi float [ %206, %.lr.ph19 ], [ %592, %277 ]
  %279 = phi i32 [ 0, %.lr.ph19 ], [ %855, %277 ]
  %280 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %863, %277 ]
  %281 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %862, %277 ]
  %282 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %861, %277 ]
  %283 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %860, %277 ]
  %284 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %859, %277 ]
  %285 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %858, %277 ]
  %286 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %857, %277 ]
  %287 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %856, %277 ]
  %288 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %871, %277 ]
  %289 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %870, %277 ]
  %290 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %869, %277 ]
  %291 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %868, %277 ]
  %292 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %867, %277 ]
  %293 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %866, %277 ]
  %294 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %865, %277 ]
  %295 = phi <2 x float> [ zeroinitializer, %.lr.ph19 ], [ %864, %277 ]
  %296 = zext nneg i32 %279 to i64, !dbg !68
  %297 = getelementptr i32, ptr addrspace(1) %190, i64 %296, !dbg !68
  %298 = load <1 x i32>, ptr addrspace(1) %297, align 4, !dbg !69
  %299 = extractelement <1 x i32> %298, i64 0, !dbg !69
  %300 = sext i32 %299 to i64, !dbg !70
  %301 = mul i64 %21, %300, !dbg !70
  %302 = mul i64 %18, %300, !dbg !71
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %302, !dbg !72
  %303 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %gep, i16 0, i32 2147483646, i32 159744), !dbg !73
  %304 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %303, i32 %212, i32 0, i32 0), !dbg !73
  %305 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %303, i32 %213, i32 0, i32 0), !dbg !73
  %gep16 = getelementptr bfloat, ptr addrspace(1) %invariant.gep15, i64 %301, !dbg !74
  %306 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %gep16, i16 0, i32 2147483646, i32 159744), !dbg !75
  %307 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %306, i32 %219, i32 0, i32 0), !dbg !75
  %308 = bitcast <4 x i32> %307 to <8 x bfloat>, !dbg !75
  %309 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %306, i32 %220, i32 0, i32 0), !dbg !75
  %310 = bitcast <4 x i32> %309 to <8 x bfloat>, !dbg !75
  %311 = shl i32 %279, 6, !dbg !76
  %312 = or disjoint i32 %311, %71, !dbg !77
  %313 = or disjoint i32 %312, 1, !dbg !77
  %314 = or disjoint i32 %312, 2, !dbg !77
  %315 = or disjoint i32 %312, 3, !dbg !77
  %316 = or disjoint i32 %312, 8, !dbg !77
  %317 = or disjoint i32 %312, 9, !dbg !77
  %318 = or disjoint i32 %312, 10, !dbg !77
  %319 = or disjoint i32 %312, 11, !dbg !77
  %320 = or disjoint i32 %312, 16, !dbg !77
  %321 = or disjoint i32 %312, 17, !dbg !77
  %322 = or disjoint i32 %312, 18, !dbg !77
  %323 = or disjoint i32 %312, 19, !dbg !77
  %324 = or disjoint i32 %312, 24, !dbg !77
  %325 = or disjoint i32 %312, 25, !dbg !77
  %326 = or disjoint i32 %312, 26, !dbg !77
  %327 = or disjoint i32 %312, 27, !dbg !77
  %328 = or disjoint i32 %312, 32, !dbg !77
  %329 = or disjoint i32 %312, 33, !dbg !77
  %330 = or disjoint i32 %312, 34, !dbg !77
  %331 = or disjoint i32 %312, 35, !dbg !77
  %332 = or disjoint i32 %312, 40, !dbg !77
  %333 = or disjoint i32 %312, 41, !dbg !77
  %334 = or disjoint i32 %312, 42, !dbg !77
  %335 = or disjoint i32 %312, 43, !dbg !77
  %336 = or disjoint i32 %312, 48, !dbg !77
  %337 = or disjoint i32 %312, 49, !dbg !77
  %338 = or disjoint i32 %312, 50, !dbg !77
  %339 = or disjoint i32 %312, 51, !dbg !77
  %340 = or disjoint i32 %312, 56, !dbg !77
  %341 = or disjoint i32 %312, 57, !dbg !77
  %342 = or disjoint i32 %312, 58, !dbg !77
  %343 = or disjoint i32 %312, 59, !dbg !77
  %344 = icmp slt i32 %312, %195, !dbg !78
  %345 = icmp slt i32 %313, %195, !dbg !78
  %346 = icmp slt i32 %314, %195, !dbg !78
  %347 = icmp slt i32 %315, %195, !dbg !78
  %348 = icmp slt i32 %316, %195, !dbg !78
  %349 = icmp slt i32 %317, %195, !dbg !78
  %350 = icmp slt i32 %318, %195, !dbg !78
  %351 = icmp slt i32 %319, %195, !dbg !78
  %352 = icmp slt i32 %320, %195, !dbg !78
  %353 = icmp slt i32 %321, %195, !dbg !78
  %354 = icmp slt i32 %322, %195, !dbg !78
  %355 = icmp slt i32 %323, %195, !dbg !78
  %356 = icmp slt i32 %324, %195, !dbg !78
  %357 = icmp slt i32 %325, %195, !dbg !78
  %358 = icmp slt i32 %326, %195, !dbg !78
  %359 = icmp slt i32 %327, %195, !dbg !78
  %360 = icmp slt i32 %328, %195, !dbg !78
  %361 = icmp slt i32 %329, %195, !dbg !78
  %362 = icmp slt i32 %330, %195, !dbg !78
  %363 = icmp slt i32 %331, %195, !dbg !78
  %364 = icmp slt i32 %332, %195, !dbg !78
  %365 = icmp slt i32 %333, %195, !dbg !78
  %366 = icmp slt i32 %334, %195, !dbg !78
  %367 = icmp slt i32 %335, %195, !dbg !78
  %368 = icmp slt i32 %336, %195, !dbg !78
  %369 = icmp slt i32 %337, %195, !dbg !78
  %370 = icmp slt i32 %338, %195, !dbg !78
  %371 = icmp slt i32 %339, %195, !dbg !78
  %372 = icmp slt i32 %340, %195, !dbg !78
  %373 = icmp slt i32 %341, %195, !dbg !78
  %374 = icmp slt i32 %342, %195, !dbg !78
  %375 = icmp slt i32 %343, %195, !dbg !78
  fence syncscope("workgroup") release, !dbg !73
  tail call void @llvm.amdgcn.s.barrier(), !dbg !73
  fence syncscope("workgroup") acquire, !dbg !73
  store <4 x i32> %304, ptr addrspace(3) %158, align 16, !dbg !73
  store <4 x i32> %305, ptr addrspace(3) %159, align 16, !dbg !73
  fence syncscope("workgroup") release, !dbg !73
  tail call void @llvm.amdgcn.s.barrier(), !dbg !73
  fence syncscope("workgroup") acquire, !dbg !73
  %376 = load <8 x bfloat>, ptr addrspace(3) %223, align 16, !dbg !73
  %377 = load <8 x bfloat>, ptr addrspace(3) %224, align 16, !dbg !73
  %378 = load <8 x bfloat>, ptr addrspace(3) %226, align 16, !dbg !73
  %379 = load <8 x bfloat>, ptr addrspace(3) %227, align 16, !dbg !73
  %380 = load <8 x bfloat>, ptr addrspace(3) %229, align 16, !dbg !73
  %381 = load <8 x bfloat>, ptr addrspace(3) %230, align 16, !dbg !73
  %382 = load <8 x bfloat>, ptr addrspace(3) %232, align 16, !dbg !73
  %383 = load <8 x bfloat>, ptr addrspace(3) %233, align 16, !dbg !73
  %384 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %376, <8 x bfloat> %170, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !79
  %385 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %378, <8 x bfloat> %173, <16 x float> %384, i32 0, i32 0, i32 0), !dbg !79
  %386 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %380, <8 x bfloat> %176, <16 x float> %385, i32 0, i32 0, i32 0), !dbg !79
  %387 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %382, <8 x bfloat> %179, <16 x float> %386, i32 0, i32 0, i32 0), !dbg !79
  %388 = extractelement <16 x float> %387, i64 0, !dbg !79
  %389 = extractelement <16 x float> %387, i64 1, !dbg !79
  %390 = extractelement <16 x float> %387, i64 2, !dbg !79
  %391 = extractelement <16 x float> %387, i64 3, !dbg !79
  %392 = extractelement <16 x float> %387, i64 4, !dbg !79
  %393 = extractelement <16 x float> %387, i64 5, !dbg !79
  %394 = extractelement <16 x float> %387, i64 6, !dbg !79
  %395 = extractelement <16 x float> %387, i64 7, !dbg !79
  %396 = extractelement <16 x float> %387, i64 8, !dbg !79
  %397 = extractelement <16 x float> %387, i64 9, !dbg !79
  %398 = extractelement <16 x float> %387, i64 10, !dbg !79
  %399 = extractelement <16 x float> %387, i64 11, !dbg !79
  %400 = extractelement <16 x float> %387, i64 12, !dbg !79
  %401 = extractelement <16 x float> %387, i64 13, !dbg !79
  %402 = extractelement <16 x float> %387, i64 14, !dbg !79
  %403 = extractelement <16 x float> %387, i64 15, !dbg !79
  %404 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %377, <8 x bfloat> %170, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !79
  %405 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %379, <8 x bfloat> %173, <16 x float> %404, i32 0, i32 0, i32 0), !dbg !79
  %406 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %381, <8 x bfloat> %176, <16 x float> %405, i32 0, i32 0, i32 0), !dbg !79
  %407 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %383, <8 x bfloat> %179, <16 x float> %406, i32 0, i32 0, i32 0), !dbg !79
  %408 = extractelement <16 x float> %407, i64 0, !dbg !79
  %409 = extractelement <16 x float> %407, i64 1, !dbg !79
  %410 = extractelement <16 x float> %407, i64 2, !dbg !79
  %411 = extractelement <16 x float> %407, i64 3, !dbg !79
  %412 = extractelement <16 x float> %407, i64 4, !dbg !79
  %413 = extractelement <16 x float> %407, i64 5, !dbg !79
  %414 = extractelement <16 x float> %407, i64 6, !dbg !79
  %415 = extractelement <16 x float> %407, i64 7, !dbg !79
  %416 = extractelement <16 x float> %407, i64 8, !dbg !79
  %417 = extractelement <16 x float> %407, i64 9, !dbg !79
  %418 = extractelement <16 x float> %407, i64 10, !dbg !79
  %419 = extractelement <16 x float> %407, i64 11, !dbg !79
  %420 = extractelement <16 x float> %407, i64 12, !dbg !79
  %421 = extractelement <16 x float> %407, i64 13, !dbg !79
  %422 = extractelement <16 x float> %407, i64 14, !dbg !79
  %423 = extractelement <16 x float> %407, i64 15, !dbg !79
  %424 = fmul float %7, %388, !dbg !80
  %425 = fmul float %7, %389, !dbg !80
  %426 = fmul float %7, %390, !dbg !80
  %427 = fmul float %7, %391, !dbg !80
  %428 = fmul float %7, %392, !dbg !80
  %429 = fmul float %7, %393, !dbg !80
  %430 = fmul float %7, %394, !dbg !80
  %431 = fmul float %7, %395, !dbg !80
  %432 = fmul float %7, %396, !dbg !80
  %433 = fmul float %7, %397, !dbg !80
  %434 = fmul float %7, %398, !dbg !80
  %435 = fmul float %7, %399, !dbg !80
  %436 = fmul float %7, %400, !dbg !80
  %437 = fmul float %7, %401, !dbg !80
  %438 = fmul float %7, %402, !dbg !80
  %439 = fmul float %7, %403, !dbg !80
  %440 = fmul float %7, %408, !dbg !80
  %441 = fmul float %7, %409, !dbg !80
  %442 = fmul float %7, %410, !dbg !80
  %443 = fmul float %7, %411, !dbg !80
  %444 = fmul float %7, %412, !dbg !80
  %445 = fmul float %7, %413, !dbg !80
  %446 = fmul float %7, %414, !dbg !80
  %447 = fmul float %7, %415, !dbg !80
  %448 = fmul float %7, %416, !dbg !80
  %449 = fmul float %7, %417, !dbg !80
  %450 = fmul float %7, %418, !dbg !80
  %451 = fmul float %7, %419, !dbg !80
  %452 = fmul float %7, %420, !dbg !80
  %453 = fmul float %7, %421, !dbg !80
  %454 = fmul float %7, %422, !dbg !80
  %455 = fmul float %7, %423, !dbg !80
  %456 = fadd float %424, 0.000000e+00, !dbg !81
  %457 = fadd float %425, 0.000000e+00, !dbg !81
  %458 = fadd float %426, 0.000000e+00, !dbg !81
  %459 = fadd float %427, 0.000000e+00, !dbg !81
  %460 = fadd float %428, 0.000000e+00, !dbg !81
  %461 = fadd float %429, 0.000000e+00, !dbg !81
  %462 = fadd float %430, 0.000000e+00, !dbg !81
  %463 = fadd float %431, 0.000000e+00, !dbg !81
  %464 = fadd float %432, 0.000000e+00, !dbg !81
  %465 = fadd float %433, 0.000000e+00, !dbg !81
  %466 = fadd float %434, 0.000000e+00, !dbg !81
  %467 = fadd float %435, 0.000000e+00, !dbg !81
  %468 = fadd float %436, 0.000000e+00, !dbg !81
  %469 = fadd float %437, 0.000000e+00, !dbg !81
  %470 = fadd float %438, 0.000000e+00, !dbg !81
  %471 = fadd float %439, 0.000000e+00, !dbg !81
  %472 = fadd float %440, 0.000000e+00, !dbg !81
  %473 = fadd float %441, 0.000000e+00, !dbg !81
  %474 = fadd float %442, 0.000000e+00, !dbg !81
  %475 = fadd float %443, 0.000000e+00, !dbg !81
  %476 = fadd float %444, 0.000000e+00, !dbg !81
  %477 = fadd float %445, 0.000000e+00, !dbg !81
  %478 = fadd float %446, 0.000000e+00, !dbg !81
  %479 = fadd float %447, 0.000000e+00, !dbg !81
  %480 = fadd float %448, 0.000000e+00, !dbg !81
  %481 = fadd float %449, 0.000000e+00, !dbg !81
  %482 = fadd float %450, 0.000000e+00, !dbg !81
  %483 = fadd float %451, 0.000000e+00, !dbg !81
  %484 = fadd float %452, 0.000000e+00, !dbg !81
  %485 = fadd float %453, 0.000000e+00, !dbg !81
  %486 = fadd float %454, 0.000000e+00, !dbg !81
  %487 = fadd float %455, 0.000000e+00, !dbg !81
  %488 = and i1 %106, %344, !dbg !82
  %489 = and i1 %106, %345, !dbg !82
  %490 = and i1 %106, %346, !dbg !82
  %491 = and i1 %106, %347, !dbg !82
  %492 = and i1 %106, %348, !dbg !82
  %493 = and i1 %106, %349, !dbg !82
  %494 = and i1 %106, %350, !dbg !82
  %495 = and i1 %106, %351, !dbg !82
  %496 = and i1 %106, %352, !dbg !82
  %497 = and i1 %106, %353, !dbg !82
  %498 = and i1 %106, %354, !dbg !82
  %499 = and i1 %106, %355, !dbg !82
  %500 = and i1 %106, %356, !dbg !82
  %501 = and i1 %106, %357, !dbg !82
  %502 = and i1 %106, %358, !dbg !82
  %503 = and i1 %106, %359, !dbg !82
  %504 = and i1 %106, %360, !dbg !82
  %505 = and i1 %106, %361, !dbg !82
  %506 = and i1 %106, %362, !dbg !82
  %507 = and i1 %106, %363, !dbg !82
  %508 = and i1 %106, %364, !dbg !82
  %509 = and i1 %106, %365, !dbg !82
  %510 = and i1 %106, %366, !dbg !82
  %511 = and i1 %106, %367, !dbg !82
  %512 = and i1 %106, %368, !dbg !82
  %513 = and i1 %106, %369, !dbg !82
  %514 = and i1 %106, %370, !dbg !82
  %515 = and i1 %106, %371, !dbg !82
  %516 = and i1 %106, %372, !dbg !82
  %517 = and i1 %106, %373, !dbg !82
  %518 = and i1 %106, %374, !dbg !82
  %519 = and i1 %106, %375, !dbg !82
  %520 = select i1 %488, float %456, float 0xFFF0000000000000, !dbg !83
  %521 = select i1 %489, float %457, float 0xFFF0000000000000, !dbg !83
  %522 = select i1 %490, float %458, float 0xFFF0000000000000, !dbg !83
  %523 = select i1 %491, float %459, float 0xFFF0000000000000, !dbg !83
  %524 = select i1 %492, float %460, float 0xFFF0000000000000, !dbg !83
  %525 = select i1 %493, float %461, float 0xFFF0000000000000, !dbg !83
  %526 = select i1 %494, float %462, float 0xFFF0000000000000, !dbg !83
  %527 = select i1 %495, float %463, float 0xFFF0000000000000, !dbg !83
  %528 = select i1 %496, float %464, float 0xFFF0000000000000, !dbg !83
  %529 = select i1 %497, float %465, float 0xFFF0000000000000, !dbg !83
  %530 = select i1 %498, float %466, float 0xFFF0000000000000, !dbg !83
  %531 = select i1 %499, float %467, float 0xFFF0000000000000, !dbg !83
  %532 = select i1 %500, float %468, float 0xFFF0000000000000, !dbg !83
  %533 = select i1 %501, float %469, float 0xFFF0000000000000, !dbg !83
  %534 = select i1 %502, float %470, float 0xFFF0000000000000, !dbg !83
  %535 = select i1 %503, float %471, float 0xFFF0000000000000, !dbg !83
  %536 = select i1 %504, float %472, float 0xFFF0000000000000, !dbg !83
  %537 = select i1 %505, float %473, float 0xFFF0000000000000, !dbg !83
  %538 = select i1 %506, float %474, float 0xFFF0000000000000, !dbg !83
  %539 = select i1 %507, float %475, float 0xFFF0000000000000, !dbg !83
  %540 = select i1 %508, float %476, float 0xFFF0000000000000, !dbg !83
  %541 = select i1 %509, float %477, float 0xFFF0000000000000, !dbg !83
  %542 = select i1 %510, float %478, float 0xFFF0000000000000, !dbg !83
  %543 = select i1 %511, float %479, float 0xFFF0000000000000, !dbg !83
  %544 = select i1 %512, float %480, float 0xFFF0000000000000, !dbg !83
  %545 = select i1 %513, float %481, float 0xFFF0000000000000, !dbg !83
  %546 = select i1 %514, float %482, float 0xFFF0000000000000, !dbg !83
  %547 = select i1 %515, float %483, float 0xFFF0000000000000, !dbg !83
  %548 = select i1 %516, float %484, float 0xFFF0000000000000, !dbg !83
  %549 = select i1 %517, float %485, float 0xFFF0000000000000, !dbg !83
  %550 = select i1 %518, float %486, float 0xFFF0000000000000, !dbg !83
  %551 = select i1 %519, float %487, float 0xFFF0000000000000, !dbg !83
  %552 = tail call float @llvm.maxnum.f32(float %520, float %521), !dbg !84
  %553 = tail call float @llvm.maxnum.f32(float %552, float %522), !dbg !84
  %554 = tail call float @llvm.maxnum.f32(float %553, float %523), !dbg !84
  %555 = tail call float @llvm.maxnum.f32(float %554, float %524), !dbg !84
  %556 = tail call float @llvm.maxnum.f32(float %555, float %525), !dbg !84
  %557 = tail call float @llvm.maxnum.f32(float %556, float %526), !dbg !84
  %558 = tail call float @llvm.maxnum.f32(float %557, float %527), !dbg !84
  %559 = tail call float @llvm.maxnum.f32(float %558, float %528), !dbg !84
  %560 = tail call float @llvm.maxnum.f32(float %559, float %529), !dbg !84
  %561 = tail call float @llvm.maxnum.f32(float %560, float %530), !dbg !84
  %562 = tail call float @llvm.maxnum.f32(float %561, float %531), !dbg !84
  %563 = tail call float @llvm.maxnum.f32(float %562, float %532), !dbg !84
  %564 = tail call float @llvm.maxnum.f32(float %563, float %533), !dbg !84
  %565 = tail call float @llvm.maxnum.f32(float %564, float %534), !dbg !84
  %566 = tail call float @llvm.maxnum.f32(float %565, float %535), !dbg !84
  %567 = tail call float @llvm.maxnum.f32(float %566, float %536), !dbg !84
  %568 = tail call float @llvm.maxnum.f32(float %567, float %537), !dbg !84
  %569 = tail call float @llvm.maxnum.f32(float %568, float %538), !dbg !84
  %570 = tail call float @llvm.maxnum.f32(float %569, float %539), !dbg !84
  %571 = tail call float @llvm.maxnum.f32(float %570, float %540), !dbg !84
  %572 = tail call float @llvm.maxnum.f32(float %571, float %541), !dbg !84
  %573 = tail call float @llvm.maxnum.f32(float %572, float %542), !dbg !84
  %574 = tail call float @llvm.maxnum.f32(float %573, float %543), !dbg !84
  %575 = tail call float @llvm.maxnum.f32(float %574, float %544), !dbg !84
  %576 = tail call float @llvm.maxnum.f32(float %575, float %545), !dbg !84
  %577 = tail call float @llvm.maxnum.f32(float %576, float %546), !dbg !84
  %578 = tail call float @llvm.maxnum.f32(float %577, float %547), !dbg !84
  %579 = tail call float @llvm.maxnum.f32(float %578, float %548), !dbg !84
  %580 = tail call float @llvm.maxnum.f32(float %579, float %549), !dbg !84
  %581 = tail call float @llvm.maxnum.f32(float %580, float %550), !dbg !84
  %582 = tail call float @llvm.maxnum.f32(float %581, float %551), !dbg !84
  %583 = bitcast float %582 to i32, !dbg !88
  %584 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %583, i32 %583, i1 false, i1 false), !dbg !88
  %585 = extractvalue { i32, i32 } %584, 0, !dbg !88
  %586 = extractvalue { i32, i32 } %584, 1, !dbg !88
  %587 = bitcast i32 %585 to float, !dbg !88
  %588 = bitcast i32 %586 to float, !dbg !88
  %589 = tail call float @llvm.maxnum.f32(float %587, float %588), !dbg !84
  %590 = tail call float @llvm.maxnum.f32(float %.pn517, float %589), !dbg !89
  %591 = fcmp one float %590, 0xFFF0000000000000, !dbg !90
  %592 = select i1 %591, float %590, float 0.000000e+00, !dbg !91
  %593 = fsub float %520, %592, !dbg !92
  %594 = fsub float %521, %592, !dbg !92
  %595 = fsub float %522, %592, !dbg !92
  %596 = fsub float %523, %592, !dbg !92
  %597 = fsub float %524, %592, !dbg !92
  %598 = fsub float %525, %592, !dbg !92
  %599 = fsub float %526, %592, !dbg !92
  %600 = fsub float %527, %592, !dbg !92
  %601 = fsub float %528, %592, !dbg !92
  %602 = fsub float %529, %592, !dbg !92
  %603 = fsub float %530, %592, !dbg !92
  %604 = fsub float %531, %592, !dbg !92
  %605 = fsub float %532, %592, !dbg !92
  %606 = fsub float %533, %592, !dbg !92
  %607 = fsub float %534, %592, !dbg !92
  %608 = fsub float %535, %592, !dbg !92
  %609 = fsub float %536, %592, !dbg !92
  %610 = fsub float %537, %592, !dbg !92
  %611 = fsub float %538, %592, !dbg !92
  %612 = fsub float %539, %592, !dbg !92
  %613 = fsub float %540, %592, !dbg !92
  %614 = fsub float %541, %592, !dbg !92
  %615 = fsub float %542, %592, !dbg !92
  %616 = fsub float %543, %592, !dbg !92
  %617 = fsub float %544, %592, !dbg !92
  %618 = fsub float %545, %592, !dbg !92
  %619 = fsub float %546, %592, !dbg !92
  %620 = fsub float %547, %592, !dbg !92
  %621 = fsub float %548, %592, !dbg !92
  %622 = fsub float %549, %592, !dbg !92
  %623 = fsub float %550, %592, !dbg !92
  %624 = fsub float %551, %592, !dbg !92
  %625 = fmul float %593, 0x3FF7154760000000, !dbg !93
  %626 = tail call float @llvm.exp2.f32(float %625), !dbg !93
  %627 = fmul float %594, 0x3FF7154760000000, !dbg !93
  %628 = tail call float @llvm.exp2.f32(float %627), !dbg !93
  %629 = fmul float %595, 0x3FF7154760000000, !dbg !93
  %630 = tail call float @llvm.exp2.f32(float %629), !dbg !93
  %631 = fmul float %596, 0x3FF7154760000000, !dbg !93
  %632 = tail call float @llvm.exp2.f32(float %631), !dbg !93
  %633 = fmul float %597, 0x3FF7154760000000, !dbg !93
  %634 = tail call float @llvm.exp2.f32(float %633), !dbg !93
  %635 = fmul float %598, 0x3FF7154760000000, !dbg !93
  %636 = tail call float @llvm.exp2.f32(float %635), !dbg !93
  %637 = fmul float %599, 0x3FF7154760000000, !dbg !93
  %638 = tail call float @llvm.exp2.f32(float %637), !dbg !93
  %639 = fmul float %600, 0x3FF7154760000000, !dbg !93
  %640 = tail call float @llvm.exp2.f32(float %639), !dbg !93
  %641 = fmul float %601, 0x3FF7154760000000, !dbg !93
  %642 = tail call float @llvm.exp2.f32(float %641), !dbg !93
  %643 = fmul float %602, 0x3FF7154760000000, !dbg !93
  %644 = tail call float @llvm.exp2.f32(float %643), !dbg !93
  %645 = fmul float %603, 0x3FF7154760000000, !dbg !93
  %646 = tail call float @llvm.exp2.f32(float %645), !dbg !93
  %647 = fmul float %604, 0x3FF7154760000000, !dbg !93
  %648 = tail call float @llvm.exp2.f32(float %647), !dbg !93
  %649 = fmul float %605, 0x3FF7154760000000, !dbg !93
  %650 = tail call float @llvm.exp2.f32(float %649), !dbg !93
  %651 = fmul float %606, 0x3FF7154760000000, !dbg !93
  %652 = tail call float @llvm.exp2.f32(float %651), !dbg !93
  %653 = fmul float %607, 0x3FF7154760000000, !dbg !93
  %654 = tail call float @llvm.exp2.f32(float %653), !dbg !93
  %655 = fmul float %608, 0x3FF7154760000000, !dbg !93
  %656 = tail call float @llvm.exp2.f32(float %655), !dbg !93
  %657 = fmul float %609, 0x3FF7154760000000, !dbg !93
  %658 = tail call float @llvm.exp2.f32(float %657), !dbg !93
  %659 = fmul float %610, 0x3FF7154760000000, !dbg !93
  %660 = tail call float @llvm.exp2.f32(float %659), !dbg !93
  %661 = fmul float %611, 0x3FF7154760000000, !dbg !93
  %662 = tail call float @llvm.exp2.f32(float %661), !dbg !93
  %663 = fmul float %612, 0x3FF7154760000000, !dbg !93
  %664 = tail call float @llvm.exp2.f32(float %663), !dbg !93
  %665 = fmul float %613, 0x3FF7154760000000, !dbg !93
  %666 = tail call float @llvm.exp2.f32(float %665), !dbg !93
  %667 = fmul float %614, 0x3FF7154760000000, !dbg !93
  %668 = tail call float @llvm.exp2.f32(float %667), !dbg !93
  %669 = fmul float %615, 0x3FF7154760000000, !dbg !93
  %670 = tail call float @llvm.exp2.f32(float %669), !dbg !93
  %671 = fmul float %616, 0x3FF7154760000000, !dbg !93
  %672 = tail call float @llvm.exp2.f32(float %671), !dbg !93
  %673 = fmul float %617, 0x3FF7154760000000, !dbg !93
  %674 = tail call float @llvm.exp2.f32(float %673), !dbg !93
  %675 = fmul float %618, 0x3FF7154760000000, !dbg !93
  %676 = tail call float @llvm.exp2.f32(float %675), !dbg !93
  %677 = fmul float %619, 0x3FF7154760000000, !dbg !93
  %678 = tail call float @llvm.exp2.f32(float %677), !dbg !93
  %679 = fmul float %620, 0x3FF7154760000000, !dbg !93
  %680 = tail call float @llvm.exp2.f32(float %679), !dbg !93
  %681 = fmul float %621, 0x3FF7154760000000, !dbg !93
  %682 = tail call float @llvm.exp2.f32(float %681), !dbg !93
  %683 = fmul float %622, 0x3FF7154760000000, !dbg !93
  %684 = tail call float @llvm.exp2.f32(float %683), !dbg !93
  %685 = fmul float %623, 0x3FF7154760000000, !dbg !93
  %686 = tail call float @llvm.exp2.f32(float %685), !dbg !93
  %687 = fmul float %624, 0x3FF7154760000000, !dbg !93
  %688 = tail call float @llvm.exp2.f32(float %687), !dbg !93
  %689 = fadd float %626, %628, !dbg !94
  %690 = fadd float %630, %689, !dbg !94
  %691 = fadd float %632, %690, !dbg !94
  %692 = fadd float %634, %691, !dbg !94
  %693 = fadd float %636, %692, !dbg !94
  %694 = fadd float %638, %693, !dbg !94
  %695 = fadd float %640, %694, !dbg !94
  %696 = fadd float %642, %695, !dbg !94
  %697 = fadd float %644, %696, !dbg !94
  %698 = fadd float %646, %697, !dbg !94
  %699 = fadd float %648, %698, !dbg !94
  %700 = fadd float %650, %699, !dbg !94
  %701 = fadd float %652, %700, !dbg !94
  %702 = fadd float %654, %701, !dbg !94
  %703 = fadd float %656, %702, !dbg !94
  %704 = fadd float %658, %703, !dbg !94
  %705 = fadd float %660, %704, !dbg !94
  %706 = fadd float %662, %705, !dbg !94
  %707 = fadd float %664, %706, !dbg !94
  %708 = fadd float %666, %707, !dbg !94
  %709 = fadd float %668, %708, !dbg !94
  %710 = fadd float %670, %709, !dbg !94
  %711 = fadd float %672, %710, !dbg !94
  %712 = fadd float %674, %711, !dbg !94
  %713 = fadd float %676, %712, !dbg !94
  %714 = fadd float %678, %713, !dbg !94
  %715 = fadd float %680, %714, !dbg !94
  %716 = fadd float %682, %715, !dbg !94
  %717 = fadd float %684, %716, !dbg !94
  %718 = fadd float %686, %717, !dbg !94
  %719 = fadd float %688, %718, !dbg !94
  %720 = bitcast float %719 to i32, !dbg !96
  %721 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %720, i32 %720, i1 false, i1 false), !dbg !96
  %722 = extractvalue { i32, i32 } %721, 0, !dbg !96
  %723 = extractvalue { i32, i32 } %721, 1, !dbg !96
  %724 = bitcast i32 %722 to float, !dbg !96
  %725 = bitcast i32 %723 to float, !dbg !96
  %726 = fadd float %724, %725, !dbg !94
  %727 = fsub float %.pn517, %592, !dbg !97
  %728 = fmul float %727, 0x3FF7154760000000, !dbg !98
  %729 = tail call float @llvm.exp2.f32(float %728), !dbg !98
  %730 = insertelement <2 x float> poison, float %729, i64 0, !dbg !99
  %731 = fmul float %278, %729, !dbg !100
  %732 = fadd float %726, %731, !dbg !101
  %733 = insertelement <2 x float> poison, float %626, i64 0, !dbg !102
  %734 = insertelement <2 x float> %733, float %628, i64 1, !dbg !102
  %735 = fptrunc <2 x float> %734 to <2 x bfloat>, !dbg !102
  %736 = insertelement <2 x float> poison, float %630, i64 0, !dbg !102
  %737 = insertelement <2 x float> %736, float %632, i64 1, !dbg !102
  %738 = fptrunc <2 x float> %737 to <2 x bfloat>, !dbg !102
  %739 = insertelement <2 x float> poison, float %634, i64 0, !dbg !102
  %740 = insertelement <2 x float> %739, float %636, i64 1, !dbg !102
  %741 = fptrunc <2 x float> %740 to <2 x bfloat>, !dbg !102
  %742 = shufflevector <2 x bfloat> %741, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %743 = insertelement <2 x float> poison, float %638, i64 0, !dbg !102
  %744 = insertelement <2 x float> %743, float %640, i64 1, !dbg !102
  %745 = fptrunc <2 x float> %744 to <2 x bfloat>, !dbg !102
  %746 = shufflevector <2 x bfloat> %745, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %747 = insertelement <2 x float> poison, float %642, i64 0, !dbg !102
  %748 = insertelement <2 x float> %747, float %644, i64 1, !dbg !102
  %749 = fptrunc <2 x float> %748 to <2 x bfloat>, !dbg !102
  %750 = insertelement <2 x float> poison, float %646, i64 0, !dbg !102
  %751 = insertelement <2 x float> %750, float %648, i64 1, !dbg !102
  %752 = fptrunc <2 x float> %751 to <2 x bfloat>, !dbg !102
  %753 = insertelement <2 x float> poison, float %650, i64 0, !dbg !102
  %754 = insertelement <2 x float> %753, float %652, i64 1, !dbg !102
  %755 = fptrunc <2 x float> %754 to <2 x bfloat>, !dbg !102
  %756 = shufflevector <2 x bfloat> %755, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %757 = insertelement <2 x float> poison, float %654, i64 0, !dbg !102
  %758 = insertelement <2 x float> %757, float %656, i64 1, !dbg !102
  %759 = fptrunc <2 x float> %758 to <2 x bfloat>, !dbg !102
  %760 = shufflevector <2 x bfloat> %759, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %761 = insertelement <2 x float> poison, float %658, i64 0, !dbg !102
  %762 = insertelement <2 x float> %761, float %660, i64 1, !dbg !102
  %763 = fptrunc <2 x float> %762 to <2 x bfloat>, !dbg !102
  %764 = insertelement <2 x float> poison, float %662, i64 0, !dbg !102
  %765 = insertelement <2 x float> %764, float %664, i64 1, !dbg !102
  %766 = fptrunc <2 x float> %765 to <2 x bfloat>, !dbg !102
  %767 = insertelement <2 x float> poison, float %666, i64 0, !dbg !102
  %768 = insertelement <2 x float> %767, float %668, i64 1, !dbg !102
  %769 = fptrunc <2 x float> %768 to <2 x bfloat>, !dbg !102
  %770 = shufflevector <2 x bfloat> %769, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %771 = insertelement <2 x float> poison, float %670, i64 0, !dbg !102
  %772 = insertelement <2 x float> %771, float %672, i64 1, !dbg !102
  %773 = fptrunc <2 x float> %772 to <2 x bfloat>, !dbg !102
  %774 = shufflevector <2 x bfloat> %773, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %775 = insertelement <2 x float> poison, float %674, i64 0, !dbg !102
  %776 = insertelement <2 x float> %775, float %676, i64 1, !dbg !102
  %777 = fptrunc <2 x float> %776 to <2 x bfloat>, !dbg !102
  %778 = insertelement <2 x float> poison, float %678, i64 0, !dbg !102
  %779 = insertelement <2 x float> %778, float %680, i64 1, !dbg !102
  %780 = fptrunc <2 x float> %779 to <2 x bfloat>, !dbg !102
  %781 = insertelement <2 x float> poison, float %682, i64 0, !dbg !102
  %782 = insertelement <2 x float> %781, float %684, i64 1, !dbg !102
  %783 = fptrunc <2 x float> %782 to <2 x bfloat>, !dbg !102
  %784 = shufflevector <2 x bfloat> %783, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %785 = insertelement <2 x float> poison, float %686, i64 0, !dbg !102
  %786 = insertelement <2 x float> %785, float %688, i64 1, !dbg !102
  %787 = fptrunc <2 x float> %786 to <2 x bfloat>, !dbg !102
  %788 = shufflevector <2 x bfloat> %787, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release, !dbg !75
  tail call void @llvm.amdgcn.s.barrier(), !dbg !75
  fence syncscope("workgroup") acquire, !dbg !75
  %789 = shufflevector <8 x bfloat> %308, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  store <4 x bfloat> %789, ptr addrspace(3) %236, align 8, !dbg !75
  %790 = shufflevector <8 x bfloat> %310, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  store <4 x bfloat> %790, ptr addrspace(3) %237, align 8, !dbg !75
  %791 = shufflevector <8 x bfloat> %308, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !75
  store <4 x bfloat> %791, ptr addrspace(3) %239, align 8, !dbg !75
  %792 = shufflevector <8 x bfloat> %310, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !75
  store <4 x bfloat> %792, ptr addrspace(3) %240, align 8, !dbg !75
  fence syncscope("workgroup") release, !dbg !75
  tail call void @llvm.amdgcn.s.barrier(), !dbg !75
  fence syncscope("workgroup") acquire, !dbg !75
  %793 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %261), !dbg !75
  %794 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %262), !dbg !75
  %795 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %263), !dbg !75
  %796 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %264), !dbg !75
  %797 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %265), !dbg !75
  %798 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %266), !dbg !75
  %799 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %267), !dbg !75
  %800 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %268), !dbg !75
  %801 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %269), !dbg !75
  %802 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %270), !dbg !75
  %803 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %271), !dbg !75
  %804 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %272), !dbg !75
  %805 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %273), !dbg !75
  %806 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %274), !dbg !75
  %807 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %275), !dbg !75
  %808 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %276), !dbg !75
  %809 = shufflevector <2 x bfloat> %735, <2 x bfloat> %738, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !103
  %810 = shufflevector <8 x bfloat> %809, <8 x bfloat> %742, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !103
  %811 = shufflevector <8 x bfloat> %810, <8 x bfloat> %746, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !103
  %812 = shufflevector <2 x bfloat> %749, <2 x bfloat> %752, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !103
  %813 = shufflevector <8 x bfloat> %812, <8 x bfloat> %756, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !103
  %814 = shufflevector <8 x bfloat> %813, <8 x bfloat> %760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !103
  %815 = shufflevector <2 x bfloat> %763, <2 x bfloat> %766, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !103
  %816 = shufflevector <8 x bfloat> %815, <8 x bfloat> %770, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !103
  %817 = shufflevector <8 x bfloat> %816, <8 x bfloat> %774, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !103
  %818 = shufflevector <2 x bfloat> %777, <2 x bfloat> %780, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !103
  %819 = shufflevector <8 x bfloat> %818, <8 x bfloat> %784, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !103
  %820 = shufflevector <8 x bfloat> %819, <8 x bfloat> %788, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !103
  %821 = shufflevector <4 x bfloat> %793, <4 x bfloat> %794, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %822 = shufflevector <4 x bfloat> %795, <4 x bfloat> %796, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %823 = shufflevector <4 x bfloat> %797, <4 x bfloat> %798, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %824 = shufflevector <4 x bfloat> %799, <4 x bfloat> %800, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %825 = shufflevector <4 x bfloat> %801, <4 x bfloat> %802, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %826 = shufflevector <4 x bfloat> %803, <4 x bfloat> %804, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %827 = shufflevector <4 x bfloat> %805, <4 x bfloat> %806, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %828 = shufflevector <4 x bfloat> %807, <4 x bfloat> %808, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %829 = shufflevector <2 x float> %288, <2 x float> %289, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %830 = shufflevector <2 x float> %290, <2 x float> %291, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %831 = shufflevector <2 x float> %292, <2 x float> %293, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %832 = shufflevector <2 x float> %294, <2 x float> %295, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %833 = shufflevector <4 x float> %829, <4 x float> %830, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %834 = shufflevector <4 x float> %831, <4 x float> %832, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %835 = shufflevector <8 x float> %833, <8 x float> %834, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !103
  %836 = shufflevector <2 x float> %730, <2 x float> poison, <16 x i32> zeroinitializer, !dbg !103
  %837 = fmul <16 x float> %835, %836, !dbg !103
  %838 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %821, <8 x bfloat> %811, <16 x float> %837, i32 0, i32 0, i32 0), !dbg !103
  %839 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %822, <8 x bfloat> %814, <16 x float> %838, i32 0, i32 0, i32 0), !dbg !103
  %840 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %823, <8 x bfloat> %817, <16 x float> %839, i32 0, i32 0, i32 0), !dbg !103
  %841 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %824, <8 x bfloat> %820, <16 x float> %840, i32 0, i32 0, i32 0), !dbg !103
  %842 = shufflevector <2 x float> %280, <2 x float> %281, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %843 = shufflevector <2 x float> %282, <2 x float> %283, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %844 = shufflevector <2 x float> %284, <2 x float> %285, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %845 = shufflevector <2 x float> %286, <2 x float> %287, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !103
  %846 = shufflevector <4 x float> %842, <4 x float> %843, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %847 = shufflevector <4 x float> %844, <4 x float> %845, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !103
  %848 = shufflevector <8 x float> %846, <8 x float> %847, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !103
  %849 = shufflevector <2 x float> %730, <2 x float> poison, <16 x i32> zeroinitializer, !dbg !103
  %850 = fmul <16 x float> %848, %849, !dbg !103
  %851 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %825, <8 x bfloat> %811, <16 x float> %850, i32 0, i32 0, i32 0), !dbg !103
  %852 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %826, <8 x bfloat> %814, <16 x float> %851, i32 0, i32 0, i32 0), !dbg !103
  %853 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %827, <8 x bfloat> %817, <16 x float> %852, i32 0, i32 0, i32 0), !dbg !103
  %854 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %828, <8 x bfloat> %820, <16 x float> %853, i32 0, i32 0, i32 0), !dbg !103
  %855 = add nuw nsw i32 %279, 1, !dbg !64
  %exitcond.not = icmp eq i32 %855, %189, !dbg !64
  %856 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %857 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %858 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %859 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %860 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %861 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %862 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %863 = shufflevector <16 x float> %854, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %864 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %865 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %866 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %867 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %868 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %869 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %870 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %871 = shufflevector <16 x float> %841, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  br i1 %exitcond.not, label %._crit_edge20, label %277, !dbg !64

._crit_edge20:                                    ; preds = %277, %152
  %.lcssa13 = phi float [ 1.000000e+00, %152 ], [ %732, %277 ]
  %872 = phi <2 x float> [ zeroinitializer, %152 ], [ %856, %277 ]
  %873 = phi <2 x float> [ zeroinitializer, %152 ], [ %857, %277 ]
  %874 = phi <2 x float> [ zeroinitializer, %152 ], [ %858, %277 ]
  %875 = phi <2 x float> [ zeroinitializer, %152 ], [ %859, %277 ]
  %876 = phi <2 x float> [ zeroinitializer, %152 ], [ %860, %277 ]
  %877 = phi <2 x float> [ zeroinitializer, %152 ], [ %861, %277 ]
  %878 = phi <2 x float> [ zeroinitializer, %152 ], [ %862, %277 ]
  %879 = phi <2 x float> [ zeroinitializer, %152 ], [ %863, %277 ]
  %880 = phi <2 x float> [ zeroinitializer, %152 ], [ %864, %277 ]
  %881 = phi <2 x float> [ zeroinitializer, %152 ], [ %865, %277 ]
  %882 = phi <2 x float> [ zeroinitializer, %152 ], [ %866, %277 ]
  %883 = phi <2 x float> [ zeroinitializer, %152 ], [ %867, %277 ]
  %884 = phi <2 x float> [ zeroinitializer, %152 ], [ %868, %277 ]
  %885 = phi <2 x float> [ zeroinitializer, %152 ], [ %869, %277 ]
  %886 = phi <2 x float> [ zeroinitializer, %152 ], [ %870, %277 ]
  %887 = phi <2 x float> [ zeroinitializer, %152 ], [ %871, %277 ]
  %888 = fdiv float 1.000000e+00, %.lcssa13, !dbg !104
  %889 = insertelement <2 x float> poison, float %888, i64 0, !dbg !105
  %890 = shufflevector <2 x float> %889, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !105
  %891 = fmul <2 x float> %890, %887, !dbg !105
  %892 = fmul <2 x float> %890, %886, !dbg !105
  %893 = fmul <2 x float> %890, %885, !dbg !105
  %894 = fmul <2 x float> %890, %884, !dbg !105
  %895 = fmul <2 x float> %890, %883, !dbg !105
  %896 = fmul <2 x float> %890, %882, !dbg !105
  %897 = fmul <2 x float> %890, %881, !dbg !105
  %898 = fmul <2 x float> %890, %880, !dbg !105
  %899 = fmul <2 x float> %890, %879, !dbg !105
  %900 = fmul <2 x float> %890, %878, !dbg !105
  %901 = fmul <2 x float> %890, %877, !dbg !105
  %902 = fmul <2 x float> %890, %876, !dbg !105
  %903 = fmul <2 x float> %890, %875, !dbg !105
  %904 = fmul <2 x float> %890, %874, !dbg !105
  %905 = fmul <2 x float> %890, %873, !dbg !105
  %906 = fmul <2 x float> %890, %872, !dbg !105
  %907 = fptrunc <2 x float> %891 to <2 x bfloat>, !dbg !106
  %908 = fptrunc <2 x float> %892 to <2 x bfloat>, !dbg !106
  %909 = fptrunc <2 x float> %893 to <2 x bfloat>, !dbg !106
  %910 = fptrunc <2 x float> %894 to <2 x bfloat>, !dbg !106
  %911 = fptrunc <2 x float> %895 to <2 x bfloat>, !dbg !106
  %912 = fptrunc <2 x float> %896 to <2 x bfloat>, !dbg !106
  %913 = fptrunc <2 x float> %897 to <2 x bfloat>, !dbg !106
  %914 = fptrunc <2 x float> %898 to <2 x bfloat>, !dbg !106
  %915 = fptrunc <2 x float> %899 to <2 x bfloat>, !dbg !106
  %916 = fptrunc <2 x float> %900 to <2 x bfloat>, !dbg !106
  %917 = fptrunc <2 x float> %901 to <2 x bfloat>, !dbg !106
  %918 = fptrunc <2 x float> %902 to <2 x bfloat>, !dbg !106
  %919 = fptrunc <2 x float> %903 to <2 x bfloat>, !dbg !106
  %920 = fptrunc <2 x float> %904 to <2 x bfloat>, !dbg !106
  %921 = fptrunc <2 x float> %905 to <2 x bfloat>, !dbg !106
  %922 = fptrunc <2 x float> %906 to <2 x bfloat>, !dbg !106
  %923 = bitcast <2 x bfloat> %907 to i32, !dbg !106
  %924 = bitcast <2 x bfloat> %908 to i32, !dbg !106
  %925 = bitcast <2 x bfloat> %909 to i32, !dbg !106
  %926 = bitcast <2 x bfloat> %910 to i32, !dbg !106
  %927 = bitcast <2 x bfloat> %911 to i32, !dbg !106
  %928 = bitcast <2 x bfloat> %912 to i32, !dbg !106
  %929 = bitcast <2 x bfloat> %913 to i32, !dbg !106
  %930 = bitcast <2 x bfloat> %914 to i32, !dbg !106
  %931 = bitcast <2 x bfloat> %915 to i32, !dbg !106
  %932 = bitcast <2 x bfloat> %916 to i32, !dbg !106
  %933 = bitcast <2 x bfloat> %917 to i32, !dbg !106
  %934 = bitcast <2 x bfloat> %918 to i32, !dbg !106
  %935 = bitcast <2 x bfloat> %919 to i32, !dbg !106
  %936 = bitcast <2 x bfloat> %920 to i32, !dbg !106
  %937 = bitcast <2 x bfloat> %921 to i32, !dbg !106
  %938 = bitcast <2 x bfloat> %922 to i32, !dbg !106
  %939 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %923, i32 %925, i1 false, i1 false), !dbg !106
  %940 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %924, i32 %926, i1 false, i1 false), !dbg !106
  %941 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %927, i32 %929, i1 false, i1 false), !dbg !106
  %942 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %928, i32 %930, i1 false, i1 false), !dbg !106
  %943 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %931, i32 %933, i1 false, i1 false), !dbg !106
  %944 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %932, i32 %934, i1 false, i1 false), !dbg !106
  %945 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %935, i32 %937, i1 false, i1 false), !dbg !106
  %946 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %936, i32 %938, i1 false, i1 false), !dbg !106
  br i1 %106, label %.critedge, label %.critedge10, !dbg !106

.critedge:                                        ; preds = %._crit_edge20
  %947 = mul i64 %15, %93, !dbg !107
  %948 = mul i64 %16, %97, !dbg !107
  %949 = add i64 %947, %948, !dbg !107
  %950 = trunc i64 %949 to i32, !dbg !107
  %951 = add i32 %68, %950, !dbg !107
  %952 = sext i32 %951 to i64, !dbg !106
  %953 = getelementptr bfloat, ptr addrspace(1) %0, i64 %952, !dbg !106
  %954 = add i32 %67, %950, !dbg !107
  %955 = sext i32 %954 to i64, !dbg !106
  %956 = getelementptr bfloat, ptr addrspace(1) %0, i64 %955, !dbg !106
  %957 = extractvalue { i32, i32 } %946, 1, !dbg !106
  %958 = bitcast i32 %957 to <2 x bfloat>, !dbg !106
  %959 = shufflevector <2 x bfloat> %958, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %960 = extractvalue { i32, i32 } %945, 1, !dbg !106
  %961 = bitcast i32 %960 to <2 x bfloat>, !dbg !106
  %962 = shufflevector <2 x bfloat> %961, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %963 = extractvalue { i32, i32 } %946, 0, !dbg !106
  %964 = bitcast i32 %963 to <2 x bfloat>, !dbg !106
  %965 = extractvalue { i32, i32 } %945, 0, !dbg !106
  %966 = bitcast i32 %965 to <2 x bfloat>, !dbg !106
  %967 = extractvalue { i32, i32 } %944, 1, !dbg !106
  %968 = bitcast i32 %967 to <2 x bfloat>, !dbg !106
  %969 = shufflevector <2 x bfloat> %968, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %970 = extractvalue { i32, i32 } %943, 1, !dbg !106
  %971 = bitcast i32 %970 to <2 x bfloat>, !dbg !106
  %972 = shufflevector <2 x bfloat> %971, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %973 = extractvalue { i32, i32 } %944, 0, !dbg !106
  %974 = bitcast i32 %973 to <2 x bfloat>, !dbg !106
  %975 = extractvalue { i32, i32 } %943, 0, !dbg !106
  %976 = bitcast i32 %975 to <2 x bfloat>, !dbg !106
  %977 = add i32 %66, %950, !dbg !107
  %978 = sext i32 %977 to i64, !dbg !106
  %979 = getelementptr bfloat, ptr addrspace(1) %0, i64 %978, !dbg !106
  %980 = extractvalue { i32, i32 } %942, 1, !dbg !106
  %981 = bitcast i32 %980 to <2 x bfloat>, !dbg !106
  %982 = shufflevector <2 x bfloat> %981, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %983 = extractvalue { i32, i32 } %941, 1, !dbg !106
  %984 = bitcast i32 %983 to <2 x bfloat>, !dbg !106
  %985 = shufflevector <2 x bfloat> %984, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %986 = extractvalue { i32, i32 } %942, 0, !dbg !106
  %987 = bitcast i32 %986 to <2 x bfloat>, !dbg !106
  %988 = extractvalue { i32, i32 } %941, 0, !dbg !106
  %989 = bitcast i32 %988 to <2 x bfloat>, !dbg !106
  %990 = extractvalue { i32, i32 } %939, 0, !dbg !106
  %991 = bitcast i32 %990 to <2 x bfloat>, !dbg !106
  %992 = extractvalue { i32, i32 } %940, 0, !dbg !106
  %993 = bitcast i32 %992 to <2 x bfloat>, !dbg !106
  %994 = shufflevector <2 x bfloat> %991, <2 x bfloat> %993, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !106
  %995 = extractvalue { i32, i32 } %939, 1, !dbg !106
  %996 = bitcast i32 %995 to <2 x bfloat>, !dbg !106
  %997 = shufflevector <2 x bfloat> %996, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %998 = shufflevector <8 x bfloat> %994, <8 x bfloat> %997, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !106
  %999 = extractvalue { i32, i32 } %940, 1, !dbg !106
  %1000 = bitcast i32 %999 to <2 x bfloat>, !dbg !106
  %1001 = shufflevector <2 x bfloat> %1000, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1002 = shufflevector <8 x bfloat> %998, <8 x bfloat> %1001, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !106
  %1003 = add i32 %65, %950, !dbg !107
  %1004 = sext i32 %1003 to i64, !dbg !106
  %1005 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1004, !dbg !106
  store <8 x bfloat> %1002, ptr addrspace(1) %1005, align 16, !dbg !106
  %1006 = shufflevector <2 x bfloat> %989, <2 x bfloat> %987, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1007 = shufflevector <8 x bfloat> %1006, <8 x bfloat> %985, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>
  %1008 = shufflevector <8 x bfloat> %1007, <8 x bfloat> %982, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  store <8 x bfloat> %1008, ptr addrspace(1) %979, align 16, !dbg !106
  %1009 = shufflevector <2 x bfloat> %976, <2 x bfloat> %974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1010 = shufflevector <8 x bfloat> %1009, <8 x bfloat> %972, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>
  %1011 = shufflevector <8 x bfloat> %1010, <8 x bfloat> %969, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  store <8 x bfloat> %1011, ptr addrspace(1) %956, align 16, !dbg !106
  %1012 = shufflevector <2 x bfloat> %966, <2 x bfloat> %964, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1013 = shufflevector <8 x bfloat> %1012, <8 x bfloat> %962, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>
  %1014 = shufflevector <8 x bfloat> %1013, <8 x bfloat> %959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  store <8 x bfloat> %1014, ptr addrspace(1) %953, align 16, !dbg !106
  br label %.critedge10, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare { i32, i32 } @llvm.amdgcn.permlane32.swap(i32, i32, i1 immarg, i1 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #3

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat>, <8 x bfloat>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) captures(none)) #6

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2,8" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "unified_attention_aiter.py", directory: "/app/OAI-triton/unified_attn_ubench")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !1, file: !1, line: 316, type: !5, scopeLine: 316, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "kernel_unified_attention_2d", linkageName: "kernel_unified_attention_2d", scope: !1, file: !1, line: 50, type: !5, scopeLine: 50, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!8 = !DILocation(line: 98, column: 32, scope: !7)
!9 = !DILocation(line: 99, column: 39, scope: !7)
!10 = !DILocation(line: 36, column: 17, scope: !11, inlinedAt: !12)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !1, discriminator: 0)
!12 = !DILocation(line: 116, column: 68, scope: !7)
!13 = !DILocation(line: 37, column: 22, scope: !11, inlinedAt: !12)
!14 = !DILocation(line: 37, column: 32, scope: !11, inlinedAt: !12)
!15 = !DILocation(line: 38, column: 44, scope: !11, inlinedAt: !12)
!16 = !DILocation(line: 38, column: 22, scope: !11, inlinedAt: !12)
!17 = !DILocation(line: 39, column: 25, scope: !11, inlinedAt: !12)
!18 = !DILocation(line: 39, column: 35, scope: !11, inlinedAt: !12)
!19 = !DILocation(line: 41, column: 22, scope: !11, inlinedAt: !12)
!20 = !DILocation(line: 41, column: 11, scope: !11, inlinedAt: !12)
!21 = !DILocation(line: 46, column: 18, scope: !11, inlinedAt: !12)
!22 = !DILocation(line: 119, column: 54, scope: !7)
!23 = !DILocation(line: 119, column: 32, scope: !7)
!24 = !DILocation(line: 119, column: 66, scope: !7)
!25 = !DILocation(line: 119, column: 76, scope: !7)
!26 = !DILocation(line: 121, column: 45, scope: !7)
!27 = !DILocation(line: 124, column: 74, scope: !7)
!28 = !DILocation(line: 124, column: 42, scope: !7)
!29 = !DILocation(line: 126, column: 56, scope: !7)
!30 = !DILocation(line: 128, column: 27, scope: !7)
!31 = !DILocation(line: 128, column: 38, scope: !7)
!32 = !DILocation(line: 129, column: 8, scope: !7)
!33 = !DILocation(line: 131, column: 26, scope: !7)
!34 = !DILocation(line: 132, column: 26, scope: !7)
!35 = !DILocation(line: 133, column: 56, scope: !7)
!36 = !DILocation(line: 133, column: 46, scope: !7)
!37 = !DILocation(line: 135, column: 52, scope: !7)
!38 = !DILocation(line: 136, column: 35, scope: !7)
!39 = !DILocation(line: 136, column: 65, scope: !7)
!40 = !DILocation(line: 136, column: 56, scope: !7)
!41 = !DILocation(line: 138, column: 34, scope: !7)
!42 = !DILocation(line: 139, column: 36, scope: !7)
!43 = !DILocation(line: 144, column: 31, scope: !7)
!44 = !DILocation(line: 145, column: 36, scope: !7)
!45 = !DILocation(line: 155, column: 57, scope: !7)
!46 = !DILocation(line: 154, column: 20, scope: !7)
!47 = !DILocation(line: 154, column: 8, scope: !7)
!48 = !{i32 1}
!49 = !DILocation(line: 160, column: 35, scope: !7)
!50 = !DILocation(line: 175, column: 37, scope: !7)
!51 = !DILocation(line: 175, column: 22, scope: !7)
!52 = !DILocation(line: 178, column: 28, scope: !7)
!53 = !DILocation(line: 196, column: 10, scope: !7)
!54 = !DILocation(line: 198, column: 10, scope: !7)
!55 = !DILocation(line: 203, column: 56, scope: !7)
!56 = !DILocation(line: 15, column: 20, scope: !11, inlinedAt: !57)
!57 = !DILocation(line: 208, column: 45, scope: !7)
!58 = !DILocation(line: 15, column: 26, scope: !11, inlinedAt: !57)
!59 = !DILocation(line: 220, column: 56, scope: !7)
!60 = !DILocation(line: 226, column: 28, scope: !7)
!61 = !DILocation(line: 233, column: 28, scope: !7)
!62 = !DILocation(line: 272, column: 55, scope: !7)
!63 = !DILocation(line: 272, column: 76, scope: !7)
!64 = !DILocation(line: 218, column: 37, scope: !7)
!65 = !DILocation(line: 166, column: 23, scope: !7)
!66 = !DILocation(line: 166, column: 12, scope: !7)
!67 = !DILocation(line: 169, column: 13, scope: !7)
!68 = !DILocation(line: 220, column: 77, scope: !7)
!69 = !DILocation(line: 220, column: 37, scope: !7)
!70 = !DILocation(line: 225, column: 33, scope: !7)
!71 = !DILocation(line: 232, column: 33, scope: !7)
!72 = !DILocation(line: 240, column: 28, scope: !7)
!73 = !DILocation(line: 240, column: 12, scope: !7)
!74 = !DILocation(line: 256, column: 30, scope: !7)
!75 = !DILocation(line: 256, column: 12, scope: !7)
!76 = !DILocation(line: 270, column: 25, scope: !7)
!77 = !DILocation(line: 270, column: 38, scope: !7)
!78 = !DILocation(line: 272, column: 41, scope: !7)
!79 = !DILocation(line: 277, column: 31, scope: !7)
!80 = !DILocation(line: 277, column: 21, scope: !7)
!81 = !DILocation(line: 277, column: 13, scope: !7)
!82 = !DILocation(line: 283, column: 60, scope: !7)
!83 = !DILocation(line: 283, column: 73, scope: !7)
!84 = !DILocation(line: 168, column: 27, scope: !85, inlinedAt: !87)
!85 = distinct !DILexicalBlockFile(scope: !7, file: !86, discriminator: 0)
!86 = !DIFile(filename: "standard.py", directory: "/app/OAI-triton/python/triton/language")
!87 = !DILocation(line: 310, column: 35, scope: !7)
!88 = !DILocation(line: 189, column: 40, scope: !85, inlinedAt: !87)
!89 = !DILocation(line: 310, column: 28, scope: !7)
!90 = !DILocation(line: 313, column: 29, scope: !7)
!91 = !DILocation(line: 313, column: 49, scope: !7)
!92 = !DILocation(line: 316, column: 23, scope: !7)
!93 = !DILocation(line: 316, column: 19, scope: !7)
!94 = !DILocation(line: 261, column: 15, scope: !85, inlinedAt: !95)
!95 = !DILocation(line: 319, column: 21, scope: !7)
!96 = !DILocation(line: 291, column: 36, scope: !85, inlinedAt: !95)
!97 = !DILocation(line: 322, column: 27, scope: !7)
!98 = !DILocation(line: 322, column: 23, scope: !7)
!99 = !DILocation(line: 325, column: 20, scope: !7)
!100 = !DILocation(line: 328, column: 16, scope: !7)
!101 = !DILocation(line: 328, column: 24, scope: !7)
!102 = !DILocation(line: 332, column: 27, scope: !7)
!103 = !DILocation(line: 332, column: 37, scope: !7)
!104 = !DILocation(line: 335, column: 23, scope: !7)
!105 = !DILocation(line: 336, column: 16, scope: !7)
!106 = !DILocation(line: 349, column: 8, scope: !7)
!107 = !DILocation(line: 348, column: 21, scope: !7)
