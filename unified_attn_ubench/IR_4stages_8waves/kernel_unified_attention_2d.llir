; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @kernel_unified_attention_2d(ptr addrspace(1) inreg writeonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg readonly captures(none) %2, ptr addrspace(1) inreg readonly captures(none) %3, ptr addrspace(1) inreg readonly captures(none) %4, ptr addrspace(1) inreg readonly captures(none) %5, ptr addrspace(1) inreg readonly captures(none) %6, float inreg %7, ptr addrspace(1) inreg readnone captures(none) %8, ptr addrspace(1) inreg readnone captures(none) %9, float inreg %10, i32 inreg %11, i64 inreg %12, i64 inreg %13, i64 inreg %14, i64 inreg %15, i64 inreg %16, i64 inreg %17, i64 inreg %18, i64 inreg %19, i64 inreg %20, i64 inreg %21, i64 inreg %22, i64 inreg %23, ptr addrspace(1) inreg readonly captures(none) %24, i32 inreg %25, ptr addrspace(1) inreg readnone captures(none) %26, ptr addrspace(1) inreg readnone captures(none) %27) local_unnamed_addr #1 !dbg !7 {
  %29 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !8
  %30 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !9
  %31 = icmp sgt i32 %25, 0, !dbg !10
  br i1 %31, label %.lr.ph, label %._crit_edge, !dbg !10

.lr.ph:                                           ; preds = %28, %.lr.ph
  %32 = phi i32 [ %42, %.lr.ph ], [ %25, %28 ]
  %33 = phi i32 [ %44, %.lr.ph ], [ 0, %28 ]
  %34 = add i32 %32, %33, !dbg !13
  %35 = sdiv i32 %34, 2, !dbg !14
  %36 = sext i32 %35 to i64, !dbg !15
  %37 = getelementptr i32, ptr addrspace(1) %24, i64 %36, !dbg !15
  %38 = load <1 x i32>, ptr addrspace(1) %37, align 4, !dbg !16
  %39 = extractelement <1 x i32> %38, i64 0, !dbg !16
  %40 = sdiv i32 %39, 16, !dbg !17
  %41 = add nsw i32 %40, %35, !dbg !18
  %.not100 = icmp sgt i32 %41, %30, !dbg !19
  %42 = select i1 %.not100, i32 %35, i32 %32, !dbg !20
  %43 = add nsw i32 %35, 1, !dbg !20
  %44 = select i1 %.not100, i32 %33, i32 %43, !dbg !20
  %45 = icmp slt i32 %44, %42, !dbg !10
  br i1 %45, label %.lr.ph, label %._crit_edge, !dbg !10

._crit_edge:                                      ; preds = %.lr.ph, %28
  %.lcssa110 = phi i32 [ 0, %28 ], [ %44, %.lr.ph ], !dbg !12
  %46 = add nsw i32 %.lcssa110, -1, !dbg !21
  %47 = sext i32 %46 to i64, !dbg !22
  %48 = getelementptr i32, ptr addrspace(1) %24, i64 %47, !dbg !22
  %49 = load <1 x i32>, ptr addrspace(1) %48, align 4, !dbg !23
  %50 = extractelement <1 x i32> %49, i64 0, !dbg !23
  %.neg126 = sdiv i32 %50, -16, !dbg !24
  %reass.sub = sub i32 %30, %.lcssa110, !dbg !25
  %.neg102 = add i32 %reass.sub, 1, !dbg !25
  %51 = add i32 %.neg102, %.neg126, !dbg !26
  %52 = getelementptr i8, ptr addrspace(1) %48, i64 4, !dbg !27
  %53 = load <1 x i32>, ptr addrspace(1) %52, align 4, !dbg !28
  %foldExtExtBinop = sub <1 x i32> %53, %49, !dbg !29
  %54 = extractelement <1 x i32> %foldExtExtBinop, i64 0, !dbg !29
  %55 = shl i32 %51, 4, !dbg !30
  %.not = icmp slt i32 %55, %54, !dbg !31
  br i1 %.not, label %56, label %.critedge, !dbg !31

.critedge:                                        ; preds = %2994, %3038, %._crit_edge
  ret void, !dbg !32

56:                                               ; preds = %._crit_edge
  %57 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !33
  %58 = and i32 %57, 63, !dbg !33
  %59 = lshr i32 %57, 6, !dbg !33
  %60 = and i32 %59, 7, !dbg !33
  %urem = and i32 %57, 511, !dbg !33
  %61 = and i32 %57, 31, !dbg !33
  %62 = and i32 %57, 384, !dbg !33
  %63 = lshr exact i32 %62, 2, !dbg !33
  %64 = or disjoint i32 %63, %61, !dbg !33
  %65 = lshr i32 %57, 3, !dbg !33
  %66 = and i32 %65, 63, !dbg !33
  %67 = and i32 %57, 192, !dbg !33
  %68 = shl nuw nsw i32 %61, 1, !dbg !34
  %69 = and i32 %57, 32, !dbg !34
  %70 = icmp eq i32 %69, 0, !dbg !34
  %71 = lshr exact i32 %69, 2, !dbg !34
  %72 = lshr i32 %57, 1, !dbg !34
  %73 = and i32 %72, 32, !dbg !34
  %74 = or disjoint i32 %71, %73, !dbg !34
  %75 = or disjoint i32 %74, 16, !dbg !34
  %76 = shl nuw nsw i32 %57, 3, !dbg !34
  %77 = and i32 %76, 56, !dbg !34
  %78 = lshr exact i32 %69, 3, !dbg !34
  %79 = or disjoint i32 %78, 1, !dbg !34
  %80 = or disjoint i32 %78, 2, !dbg !34
  %81 = or disjoint i32 %78, 3, !dbg !34
  %82 = or disjoint i32 %78, 8, !dbg !34
  %83 = or disjoint i32 %78, 9, !dbg !34
  %84 = or disjoint i32 %78, 10, !dbg !34
  %85 = or disjoint i32 %78, 11, !dbg !34
  %86 = or disjoint i32 %78, 16, !dbg !34
  %87 = or disjoint i32 %78, 17, !dbg !34
  %88 = or disjoint i32 %78, 18, !dbg !34
  %89 = or disjoint i32 %78, 19, !dbg !34
  %90 = or disjoint i32 %78, 24, !dbg !34
  %91 = or disjoint i32 %78, 25, !dbg !34
  %92 = or disjoint i32 %78, 26, !dbg !34
  %93 = or disjoint i32 %78, 27, !dbg !34
  %94 = or disjoint i32 %78, 32, !dbg !34
  %95 = or disjoint i32 %78, 33, !dbg !34
  %96 = or disjoint i32 %78, 34, !dbg !34
  %97 = or disjoint i32 %78, 35, !dbg !34
  %98 = or disjoint i32 %78, 40, !dbg !34
  %99 = or disjoint i32 %78, 41, !dbg !34
  %100 = or disjoint i32 %78, 42, !dbg !34
  %101 = or disjoint i32 %78, 43, !dbg !34
  %102 = or disjoint i32 %78, 48, !dbg !34
  %103 = or disjoint i32 %78, 49, !dbg !34
  %104 = or disjoint i32 %78, 50, !dbg !34
  %105 = or disjoint i32 %78, 51, !dbg !34
  %106 = or disjoint i32 %78, 56, !dbg !34
  %107 = or disjoint i32 %78, 57, !dbg !34
  %108 = or disjoint i32 %78, 58, !dbg !34
  %109 = or disjoint i32 %78, 59, !dbg !34
  %110 = lshr i32 %64, 3, !dbg !35
  %111 = lshr i32 %66, 3, !dbg !35
  %112 = lshr exact i32 %67, 4, !dbg !35
  %113 = lshr i32 %61, 3, !dbg !35
  %114 = or disjoint i32 %112, %113, !dbg !35
  %115 = or disjoint i32 %55, %110, !dbg !36
  %116 = or disjoint i32 %55, %111, !dbg !36
  %117 = or disjoint i32 %59, %55, !dbg !36
  %118 = or i32 %117, 8, !dbg !36
  %119 = or disjoint i32 %114, %55, !dbg !36
  %120 = add i32 %115, %50, !dbg !37
  %121 = add i32 %118, %50, !dbg !37
  %122 = shl i32 %29, 3, !dbg !38
  %123 = and i32 %57, 7, !dbg !39
  %124 = and i32 %65, 7, !dbg !39
  %125 = or disjoint i32 %122, %123, !dbg !40
  %126 = or disjoint i32 %124, %122, !dbg !40
  %127 = zext i32 %120 to i64, !dbg !41
  %128 = zext i32 %121 to i64, !dbg !41
  %129 = zext i32 %125 to i64, !dbg !42
  %130 = zext i32 %126 to i64, !dbg !42
  %131 = icmp slt i32 %115, %54, !dbg !43
  %132 = icmp slt i32 %116, %54, !dbg !43
  %133 = icmp slt i32 %118, %54, !dbg !43
  %134 = icmp slt i32 %119, %54, !dbg !43
  %135 = icmp slt i32 %125, 64, !dbg !44
  %136 = icmp slt i32 %126, 64, !dbg !44
  %137 = and i1 %135, %131, !dbg !45
  %138 = and i1 %136, %132, !dbg !45
  %139 = and i1 %136, %133, !dbg !45
  %140 = mul i64 %13, %128, !dbg !46
  %141 = mul i64 %14, %130, !dbg !46
  %142 = add i64 %140, %141, !dbg !46
  %143 = trunc i64 %142 to i32, !dbg !46
  %144 = add i32 %77, %143, !dbg !46
  %145 = sext i32 %144 to i64, !dbg !47
  %146 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !47
  br i1 %138, label %147, label %157, !dbg !47

147:                                              ; preds = %56
  %148 = add i32 %116, %50, !dbg !37
  %149 = zext i32 %148 to i64, !dbg !41
  %150 = mul i64 %13, %149, !dbg !46
  %151 = add i64 %150, %141, !dbg !46
  %152 = trunc i64 %151 to i32, !dbg !46
  %153 = add i32 %77, %152, !dbg !46
  %154 = sext i32 %153 to i64, !dbg !47
  %155 = getelementptr bfloat, ptr addrspace(1) %1, i64 %154, !dbg !47
  %156 = load <8 x bfloat>, ptr addrspace(1) %155, align 16, !dbg !47, !nontemporal !48
  br label %157, !dbg !47

157:                                              ; preds = %56, %147
  %158 = phi <8 x bfloat> [ %156, %147 ], [ zeroinitializer, %56 ], !dbg !47
  br i1 %139, label %159, label %161, !dbg !47

159:                                              ; preds = %157
  %160 = load <8 x bfloat>, ptr addrspace(1) %146, align 16, !dbg !47, !nontemporal !48
  br label %161, !dbg !47

161:                                              ; preds = %157, %159
  %162 = phi <8 x bfloat> [ %160, %159 ], [ zeroinitializer, %157 ], !dbg !47
  %163 = shl nuw nsw i32 %urem, 4, !dbg !47
  %164 = and i32 %57, 112, !dbg !47
  %165 = xor i32 %163, %164, !dbg !47
  %166 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %165, !dbg !47
  store <8 x bfloat> %158, ptr addrspace(3) %166, align 16, !dbg !47
  %167 = getelementptr inbounds nuw i8, ptr addrspace(3) %166, i32 8192, !dbg !47
  store <8 x bfloat> %162, ptr addrspace(3) %167, align 16, !dbg !47
  fence syncscope("workgroup") release, !dbg !47
  tail call void @llvm.amdgcn.s.barrier(), !dbg !47
  fence syncscope("workgroup") acquire, !dbg !47
  %168 = shl nuw nsw i32 %61, 7, !dbg !47
  %169 = shl nuw nsw i32 %67, 6, !dbg !47
  %170 = and i32 %76, 112, !dbg !47
  %171 = lshr exact i32 %69, 1, !dbg !47
  %172 = xor i32 %170, %171, !dbg !47
  %173 = or disjoint i32 %172, %169, !dbg !47
  %174 = or disjoint i32 %173, %168, !dbg !47
  %175 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %174, !dbg !47
  %176 = load <8 x bfloat>, ptr addrspace(3) %175, align 16, !dbg !47
  %177 = xor i32 %174, 32, !dbg !47
  %178 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %177, !dbg !47
  %179 = load <8 x bfloat>, ptr addrspace(3) %178, align 16, !dbg !47
  %180 = xor i32 %174, 64, !dbg !47
  %181 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %180, !dbg !47
  %182 = load <8 x bfloat>, ptr addrspace(3) %181, align 16, !dbg !47
  %183 = xor i32 %174, 96, !dbg !47
  %184 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %183, !dbg !47
  %185 = load <8 x bfloat>, ptr addrspace(3) %184, align 16, !dbg !47
  %186 = mul i64 %12, %47, !dbg !49
  %187 = sext i32 %122 to i64, !dbg !50
  %188 = getelementptr bfloat, ptr addrspace(1) %4, i64 %187, !dbg !50
  %189 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %188, i16 0, i32 2147483646, i32 159744), !dbg !51
  %190 = shl nuw nsw i32 %123, 1, !dbg !51
  %191 = select i1 %135, i32 %190, i32 -2147483648, !dbg !51
  %192 = tail call i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) %189, i32 %191, i32 0, i32 0), !dbg !51
  %193 = zext i16 %192 to i32, !dbg !52
  %194 = shl nuw i32 %193, 16, !dbg !52
  %195 = select i1 %135, i32 %194, i32 -8388608, !dbg !51
  %196 = bitcast i32 %195 to float, !dbg !52
  %197 = getelementptr i32, ptr addrspace(1) %6, i64 %47, !dbg !53
  %198 = load <1 x i32>, ptr addrspace(1) %197, align 4, !dbg !54
  %199 = extractelement <1 x i32> %198, i64 0, !dbg !54
  %foldExtExtBinop211 = sub <1 x i32> %198, %foldExtExtBinop, !dbg !55
  %200 = extractelement <1 x i32> %foldExtExtBinop211, i64 0, !dbg !55
  %201 = add i32 %55, 16, !dbg !56
  %202 = add i32 %201, %200, !dbg !57
  %203 = tail call i32 @llvm.smin.i32(i32 %202, i32 %199), !dbg !58
  %204 = add i32 %203, 63, !dbg !59
  %205 = sdiv i32 %204, 64, !dbg !61
  %206 = getelementptr i32, ptr addrspace(1) %5, i64 %186, !dbg !62
  %207 = icmp sgt i32 %204, 63, !dbg !63
  br i1 %207, label %208, label %210, !dbg !64

208:                                              ; preds = %161
  %209 = load <1 x i32>, ptr addrspace(1) %206, align 4, !dbg !64
  br label %210, !dbg !64

210:                                              ; preds = %161, %208
  %211 = phi <1 x i32> [ %209, %208 ], [ zeroinitializer, %161 ], !dbg !64
  %212 = extractelement <1 x i32> %211, i64 0, !dbg !64
  %213 = sext i32 %29 to i64, !dbg !65
  %214 = mul i64 %23, %213, !dbg !65
  %215 = lshr i32 %57, 5, !dbg !66
  %216 = and i32 %215, 15, !dbg !66
  %217 = or i32 %215, 16, !dbg !66
  %218 = or disjoint i32 %216, 32, !dbg !66
  %219 = or i32 %215, 48, !dbg !66
  %220 = mul i64 %20, %213, !dbg !67
  %221 = add i32 %119, 1, !dbg !68
  %222 = add i32 %221, %200, !dbg !69
  %223 = and i1 %135, %134, !dbg !70
  %224 = icmp sgt i32 %204, 127, !dbg !63
  br i1 %224, label %225, label %228, !dbg !64

225:                                              ; preds = %210
  %226 = getelementptr i8, ptr addrspace(1) %206, i64 4
  %227 = load <1 x i32>, ptr addrspace(1) %226, align 4, !dbg !64
  br label %228, !dbg !64

228:                                              ; preds = %210, %225
  %229 = phi <1 x i32> [ %227, %225 ], [ zeroinitializer, %210 ], !dbg !64
  %230 = extractelement <1 x i32> %229, i64 0, !dbg !64
  %231 = sext i32 %212 to i64, !dbg !71
  %232 = mul i64 %21, %231, !dbg !71
  %233 = mul i64 %18, %231, !dbg !72
  %234 = getelementptr bfloat, ptr addrspace(1) %2, i64 %233, !dbg !73
  %235 = getelementptr bfloat, ptr addrspace(1) %234, i64 %220, !dbg !73
  %236 = trunc i64 %19 to i32, !dbg !73
  %237 = mul i32 %66, %236, !dbg !73
  %238 = add i32 %237, %77, !dbg !73
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  %239 = shl nuw nsw i32 %urem, 3, !dbg !74
  %240 = lshr exact i32 %164, 1, !dbg !74
  %241 = xor i32 %239, %240, !dbg !74
  %242 = sub nsw i32 %241, %239, !dbg !74
  %243 = ashr exact i32 %242, 3, !dbg !74
  %244 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %235, i16 0, i32 2147483646, i32 159744), !dbg !74
  %245 = shl nuw nsw i32 %60, 10, !dbg !74
  %246 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %245, !dbg !74
  %247 = add nsw i32 %243, %58, !dbg !74
  %248 = shl nsw i32 %247, 2, !dbg !74
  %249 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %248, i32 %238), !dbg !74
  %250 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %207), !dbg !74
  %251 = zext i32 %247 to i64, !dbg !74
  %252 = lshr i64 %250, %251, !dbg !74
  %253 = trunc i64 %252 to i1, !dbg !74
  %254 = shl i32 %249, 1, !dbg !74
  %255 = select i1 %253, i32 %254, i32 -2147483648, !dbg !74
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %244, ptr addrspace(3) %246, i32 16, i32 %255, i32 0, i32 0, i32 0), !dbg !74, !alias.scope !75
  %256 = getelementptr bfloat, ptr addrspace(1) %3, i64 %232, !dbg !78
  %257 = getelementptr bfloat, ptr addrspace(1) %256, i64 %214, !dbg !78
  %258 = trunc i64 %22 to i32, !dbg !78
  %259 = mul i32 %216, %258, !dbg !78
  %260 = add i32 %259, %68, !dbg !78
  %261 = mul i32 %217, %258, !dbg !78
  %262 = add i32 %261, %68, !dbg !78
  %263 = mul i32 %218, %258, !dbg !78
  %264 = add i32 %263, %68, !dbg !78
  %265 = mul i32 %219, %258, !dbg !78
  %266 = add i32 %265, %68, !dbg !78
  %267 = shl nuw nsw i32 %urem, 1, !dbg !79
  %268 = lshr i32 %57, 4, !dbg !79
  %269 = and i32 %268, 28, !dbg !79
  %270 = xor i32 %267, %269, !dbg !79
  %271 = sub nsw i32 %270, %267, !dbg !79
  %272 = ashr exact i32 %271, 1, !dbg !79
  %273 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %257, i16 0, i32 2147483646, i32 159744), !dbg !79
  %274 = shl nuw nsw i32 %60, 8, !dbg !79
  %275 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %274, !dbg !79
  %276 = add nsw i32 %272, %58, !dbg !79
  %277 = shl nsw i32 %276, 2, !dbg !79
  %278 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %260), !dbg !79
  %279 = zext i32 %276 to i64, !dbg !79
  %280 = lshr i64 %250, %279, !dbg !79
  %281 = trunc i64 %280 to i1, !dbg !79
  %282 = shl i32 %278, 1, !dbg !79
  %283 = select i1 %281, i32 %282, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %273, ptr addrspace(3) %275, i32 4, i32 %283, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %284 = or disjoint i32 %274, 2048, !dbg !79
  %285 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %284, !dbg !79
  %286 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %262), !dbg !79
  %287 = shl i32 %286, 1, !dbg !79
  %288 = select i1 %281, i32 %287, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %273, ptr addrspace(3) nonnull %285, i32 4, i32 %288, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %289 = or disjoint i32 %274, 4096, !dbg !79
  %290 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %289, !dbg !79
  %291 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %264), !dbg !79
  %292 = shl i32 %291, 1, !dbg !79
  %293 = select i1 %281, i32 %292, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %273, ptr addrspace(3) nonnull %290, i32 4, i32 %293, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %294 = or disjoint i32 %274, 6144, !dbg !79
  %295 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %294, !dbg !79
  %296 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %266), !dbg !79
  %297 = shl i32 %296, 1, !dbg !79
  %298 = select i1 %281, i32 %297, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %273, ptr addrspace(3) nonnull %295, i32 4, i32 %298, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %299 = icmp sgt i32 %204, 191, !dbg !63
  br i1 %299, label %300, label %303, !dbg !64

300:                                              ; preds = %228
  %301 = getelementptr i8, ptr addrspace(1) %206, i64 8
  %302 = load <1 x i32>, ptr addrspace(1) %301, align 4, !dbg !64
  br label %303, !dbg !64

303:                                              ; preds = %228, %300
  %304 = phi <1 x i32> [ %302, %300 ], [ zeroinitializer, %228 ], !dbg !64
  %305 = extractelement <1 x i32> %304, i64 0, !dbg !64
  %306 = sext i32 %230 to i64, !dbg !71
  %307 = mul i64 %21, %306, !dbg !71
  %308 = mul i64 %18, %306, !dbg !72
  %309 = getelementptr bfloat, ptr addrspace(1) %2, i64 %308, !dbg !73
  %310 = getelementptr bfloat, ptr addrspace(1) %309, i64 %220, !dbg !73
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  %311 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %310, i16 0, i32 2147483646, i32 159744), !dbg !74
  %312 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %245, !dbg !74
  %313 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %248, i32 %238), !dbg !74
  %314 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %224), !dbg !74
  %315 = lshr i64 %314, %251, !dbg !74
  %316 = trunc i64 %315 to i1, !dbg !74
  %317 = shl i32 %313, 1, !dbg !74
  %318 = select i1 %316, i32 %317, i32 -2147483648, !dbg !74
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %311, ptr addrspace(3) %312, i32 16, i32 %318, i32 0, i32 0, i32 0), !dbg !74, !alias.scope !75
  %319 = getelementptr bfloat, ptr addrspace(1) %3, i64 %307, !dbg !78
  %320 = getelementptr bfloat, ptr addrspace(1) %319, i64 %214, !dbg !78
  %321 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %320, i16 0, i32 2147483646, i32 159744), !dbg !79
  %322 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %274, !dbg !79
  %323 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %260), !dbg !79
  %324 = lshr i64 %314, %279, !dbg !79
  %325 = trunc i64 %324 to i1, !dbg !79
  %326 = shl i32 %323, 1, !dbg !79
  %327 = select i1 %325, i32 %326, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %321, ptr addrspace(3) %322, i32 4, i32 %327, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %328 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %284, !dbg !79
  %329 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %262), !dbg !79
  %330 = shl i32 %329, 1, !dbg !79
  %331 = select i1 %325, i32 %330, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %321, ptr addrspace(3) nonnull %328, i32 4, i32 %331, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %332 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %289, !dbg !79
  %333 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %264), !dbg !79
  %334 = shl i32 %333, 1, !dbg !79
  %335 = select i1 %325, i32 %334, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %321, ptr addrspace(3) nonnull %332, i32 4, i32 %335, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %336 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %294, !dbg !79
  %337 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %266), !dbg !79
  %338 = shl i32 %337, 1, !dbg !79
  %339 = select i1 %325, i32 %338, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %321, ptr addrspace(3) nonnull %336, i32 4, i32 %339, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %340 = add nsw i32 %205, -3, !dbg !63
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %2, i64 %220, !dbg !63
  %invariant.gep111 = getelementptr bfloat, ptr addrspace(1) %3, i64 %214, !dbg !63
  %341 = icmp sgt i32 %204, 255, !dbg !63
  %342 = or disjoint i32 %168, %170
  %343 = xor i32 %342, %171
  %344 = xor i32 %343, 32
  %345 = xor i32 %343, 64
  %346 = xor i32 %343, 96
  %347 = and i32 %57, 12
  %348 = shl nuw nsw i32 %347, 4
  %349 = shl nuw nsw i32 %57, 2
  %350 = and i32 %349, 12
  %351 = and i32 %72, 36
  %352 = and i32 %57, 16
  %353 = select i1 %70, i32 0, i32 264
  %354 = or disjoint i32 %348, %350
  %355 = or disjoint i32 %353, %351
  %356 = xor i32 %355, %354
  %357 = or disjoint i32 %356, %352
  %358 = xor i32 %357, 528
  %359 = xor i32 %357, 1552
  %360 = xor i32 %357, 2576
  %361 = xor i32 %357, 3600
  br i1 %341, label %.lr.ph115, label %._crit_edge116, !dbg !63

.lr.ph115:                                        ; preds = %303
  %362 = shl nuw nsw i32 %61, 2
  %363 = shl nuw nsw i32 %67, 1
  %364 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %362
  %365 = getelementptr inbounds nuw i8, ptr addrspace(3) %364, i32 %363
  %366 = getelementptr inbounds nuw i8, ptr addrspace(3) %364, i32 %62
  %367 = select i1 %70, i32 0, i32 1056
  %368 = or disjoint i32 %68, %67
  %369 = xor i32 %368, %367
  %370 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %369
  %371 = getelementptr inbounds nuw i8, ptr addrspace(3) %370, i32 4096
  %372 = getelementptr inbounds nuw i8, ptr addrspace(3) %370, i32 8192
  %373 = getelementptr inbounds nuw i8, ptr addrspace(3) %370, i32 12288
  %374 = xor i32 %369, 264
  %375 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %374
  %376 = getelementptr inbounds nuw i8, ptr addrspace(3) %375, i32 4096
  %377 = getelementptr inbounds nuw i8, ptr addrspace(3) %375, i32 8192
  %378 = getelementptr inbounds nuw i8, ptr addrspace(3) %375, i32 12288
  %379 = xor i32 %369, 528
  %380 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %379
  %381 = getelementptr inbounds nuw i8, ptr addrspace(3) %380, i32 4096
  %382 = getelementptr inbounds nuw i8, ptr addrspace(3) %380, i32 8192
  %383 = getelementptr inbounds nuw i8, ptr addrspace(3) %380, i32 12288
  %384 = xor i32 %369, 792
  %385 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %384
  %386 = getelementptr inbounds nuw i8, ptr addrspace(3) %385, i32 4096
  %387 = getelementptr inbounds nuw i8, ptr addrspace(3) %385, i32 8192
  %388 = getelementptr inbounds nuw i8, ptr addrspace(3) %385, i32 12288
  %389 = xor i32 %369, 2112
  %390 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %389
  %391 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 4096
  %392 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 8192
  %393 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 12288
  %394 = xor i32 %369, 2376
  %395 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %394
  %396 = getelementptr inbounds nuw i8, ptr addrspace(3) %395, i32 4096
  %397 = getelementptr inbounds nuw i8, ptr addrspace(3) %395, i32 8192
  %398 = getelementptr inbounds nuw i8, ptr addrspace(3) %395, i32 12288
  %399 = xor i32 %369, 2640
  %400 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %399
  %401 = getelementptr inbounds nuw i8, ptr addrspace(3) %400, i32 4096
  %402 = getelementptr inbounds nuw i8, ptr addrspace(3) %400, i32 8192
  %403 = getelementptr inbounds nuw i8, ptr addrspace(3) %400, i32 12288
  %404 = xor i32 %369, 2904
  %405 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %404
  %406 = getelementptr inbounds nuw i8, ptr addrspace(3) %405, i32 4096
  %407 = getelementptr inbounds nuw i8, ptr addrspace(3) %405, i32 8192
  %408 = getelementptr inbounds nuw i8, ptr addrspace(3) %405, i32 12288
  %409 = shl nuw nsw i32 %347, 5
  %410 = and i32 %57, 28
  %411 = select i1 %70, i32 0, i32 528
  %412 = or disjoint i32 %409, %350
  %413 = or disjoint i32 %63, %410
  %414 = xor i32 %412, %413
  %415 = xor i32 %414, %411
  %416 = xor i32 %415, 1056
  %417 = xor i32 %415, 3104
  %418 = xor i32 %415, 5152
  %419 = xor i32 %415, 7200
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %415
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %416
  %422 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 4096
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %417
  %424 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 8192
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %418
  %426 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 12288
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %419
  %smax = tail call i32 @llvm.smax.i32(i32 %340, i32 1), !dbg !63
  br label %428, !dbg !63

428:                                              ; preds = %.lr.ph115, %428
  %429 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), %.lr.ph115 ], [ %482, %428 ]
  %430 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), %.lr.ph115 ], [ %429, %428 ]
  %431 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), %.lr.ph115 ], [ %457, %428 ]
  %432 = phi ptr addrspace(3) [ @global_smem, %.lr.ph115 ], [ %431, %428 ]
  %433 = phi i32 [ %305, %.lr.ph115 ], [ %452, %428 ]
  %434 = phi i32 [ 1, %.lr.ph115 ], [ %447, %428 ]
  %435 = phi float [ 1.000000e+00, %.lr.ph115 ], [ %932, %428 ]
  %.pn6113 = phi float [ %196, %.lr.ph115 ], [ %791, %428 ]
  %436 = phi i32 [ 0, %.lr.ph115 ], [ %1042, %428 ]
  %437 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1043, %428 ]
  %438 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1044, %428 ]
  %439 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1045, %428 ]
  %440 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1046, %428 ]
  %441 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1047, %428 ]
  %442 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1048, %428 ]
  %443 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1049, %428 ]
  %444 = phi <2 x float> [ zeroinitializer, %.lr.ph115 ], [ %1050, %428 ]
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49163), !dbg !74
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  %445 = add i32 %434, 1, !dbg !63
  %446 = icmp slt i32 %445, 3, !dbg !63
  %447 = select i1 %446, i32 %445, i32 0, !dbg !63
  %448 = zext nneg i32 %436 to i64, !dbg !80
  %449 = getelementptr i32, ptr addrspace(1) %206, i64 %448, !dbg !80
  %450 = getelementptr i8, ptr addrspace(1) %449, i64 12, !dbg !80
  %451 = load <1 x i32>, ptr addrspace(1) %450, align 4, !dbg !64
  %452 = extractelement <1 x i32> %451, i64 0, !dbg !64
  %453 = sext i32 %433 to i64, !dbg !71
  %454 = mul i64 %21, %453, !dbg !71
  %455 = mul i64 %18, %453, !dbg !72
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %455, !dbg !73
  %456 = shl i32 %447, 12, !dbg !74
  %457 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %456, !dbg !74
  %458 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %gep, i16 0, i32 2147483646, i32 159744), !dbg !74
  %459 = getelementptr inbounds nuw i8, ptr addrspace(3) %457, i32 %245, !dbg !74
  %460 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %248, i32 %238), !dbg !74
  %461 = tail call i64 @llvm.amdgcn.ballot.i64(i1 true), !dbg !74
  %462 = lshr i64 %461, %251, !dbg !74
  %463 = trunc i64 %462 to i1, !dbg !74
  %464 = shl i32 %460, 1, !dbg !74
  %465 = select i1 %463, i32 %464, i32 -2147483648, !dbg !74
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %458, ptr addrspace(3) %459, i32 16, i32 %465, i32 0, i32 0, i32 0), !dbg !74, !alias.scope !75
  %466 = getelementptr inbounds nuw i8, ptr addrspace(3) %432, i32 %343, !dbg !74
  %467 = load <8 x bfloat>, ptr addrspace(3) %466, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %468 = getelementptr inbounds nuw i8, ptr addrspace(3) %466, i32 4096, !dbg !74
  %469 = load <8 x bfloat>, ptr addrspace(3) %468, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %470 = getelementptr inbounds nuw i8, ptr addrspace(3) %432, i32 %344, !dbg !74
  %471 = load <8 x bfloat>, ptr addrspace(3) %470, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %472 = getelementptr inbounds nuw i8, ptr addrspace(3) %470, i32 4096, !dbg !74
  %473 = load <8 x bfloat>, ptr addrspace(3) %472, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %474 = getelementptr inbounds nuw i8, ptr addrspace(3) %432, i32 %345, !dbg !74
  %475 = load <8 x bfloat>, ptr addrspace(3) %474, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %476 = getelementptr inbounds nuw i8, ptr addrspace(3) %474, i32 4096, !dbg !74
  %477 = load <8 x bfloat>, ptr addrspace(3) %476, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %478 = getelementptr inbounds nuw i8, ptr addrspace(3) %432, i32 %346, !dbg !74
  %479 = load <8 x bfloat>, ptr addrspace(3) %478, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %480 = getelementptr inbounds nuw i8, ptr addrspace(3) %478, i32 4096, !dbg !74
  %481 = load <8 x bfloat>, ptr addrspace(3) %480, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %gep112 = getelementptr bfloat, ptr addrspace(1) %invariant.gep111, i64 %454, !dbg !78
  %482 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %456, !dbg !79
  %483 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %gep112, i16 0, i32 2147483646, i32 159744), !dbg !79
  %484 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 %274, !dbg !79
  %485 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %260), !dbg !79
  %486 = lshr i64 %461, %279, !dbg !79
  %487 = trunc i64 %486 to i1, !dbg !79
  %488 = shl i32 %485, 1, !dbg !79
  %489 = select i1 %487, i32 %488, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %483, ptr addrspace(3) %484, i32 4, i32 %489, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %490 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 %284, !dbg !79
  %491 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %262), !dbg !79
  %492 = shl i32 %491, 1, !dbg !79
  %493 = select i1 %487, i32 %492, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %483, ptr addrspace(3) nonnull %490, i32 4, i32 %493, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %494 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 %289, !dbg !79
  %495 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %264), !dbg !79
  %496 = shl i32 %495, 1, !dbg !79
  %497 = select i1 %487, i32 %496, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %483, ptr addrspace(3) nonnull %494, i32 4, i32 %497, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 %294, !dbg !79
  %499 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %266), !dbg !79
  %500 = shl i32 %499, 1, !dbg !79
  %501 = select i1 %487, i32 %500, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %483, ptr addrspace(3) nonnull %498, i32 4, i32 %501, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %502 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %357, !dbg !79
  %503 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %358, !dbg !79
  %504 = getelementptr inbounds nuw i8, ptr addrspace(3) %502, i32 2048, !dbg !79
  %505 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %359, !dbg !79
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %502, i32 4096, !dbg !79
  %507 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %360, !dbg !79
  %508 = getelementptr inbounds nuw i8, ptr addrspace(3) %502, i32 6144, !dbg !79
  %509 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %361, !dbg !79
  %510 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %502), !dbg !79, !alias.scope !81, !noalias !75
  %511 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %503), !dbg !79, !alias.scope !81, !noalias !75
  %512 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %504), !dbg !79, !alias.scope !81, !noalias !75
  %513 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %505), !dbg !79, !alias.scope !81, !noalias !75
  %514 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %506), !dbg !79, !alias.scope !81, !noalias !75
  %515 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %507), !dbg !79, !alias.scope !81, !noalias !75
  %516 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %508), !dbg !79, !alias.scope !81, !noalias !75
  %517 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %509), !dbg !79, !alias.scope !81, !noalias !75
  %518 = shl i32 %436, 6, !dbg !83
  %519 = or disjoint i32 %518, %78, !dbg !84
  %520 = or disjoint i32 %518, %79, !dbg !84
  %521 = or disjoint i32 %518, %80, !dbg !84
  %522 = or disjoint i32 %518, %81, !dbg !84
  %523 = or disjoint i32 %518, %82, !dbg !84
  %524 = or disjoint i32 %518, %83, !dbg !84
  %525 = or disjoint i32 %518, %84, !dbg !84
  %526 = or disjoint i32 %518, %85, !dbg !84
  %527 = or disjoint i32 %518, %86, !dbg !84
  %528 = or disjoint i32 %518, %87, !dbg !84
  %529 = or disjoint i32 %518, %88, !dbg !84
  %530 = or disjoint i32 %518, %89, !dbg !84
  %531 = or disjoint i32 %518, %90, !dbg !84
  %532 = or disjoint i32 %518, %91, !dbg !84
  %533 = or disjoint i32 %518, %92, !dbg !84
  %534 = or disjoint i32 %518, %93, !dbg !84
  %535 = or disjoint i32 %518, %94, !dbg !84
  %536 = or disjoint i32 %518, %95, !dbg !84
  %537 = or disjoint i32 %518, %96, !dbg !84
  %538 = or disjoint i32 %518, %97, !dbg !84
  %539 = or disjoint i32 %518, %98, !dbg !84
  %540 = or disjoint i32 %518, %99, !dbg !84
  %541 = or disjoint i32 %518, %100, !dbg !84
  %542 = or disjoint i32 %518, %101, !dbg !84
  %543 = or disjoint i32 %518, %102, !dbg !84
  %544 = or disjoint i32 %518, %103, !dbg !84
  %545 = or disjoint i32 %518, %104, !dbg !84
  %546 = or disjoint i32 %518, %105, !dbg !84
  %547 = or disjoint i32 %518, %106, !dbg !84
  %548 = or disjoint i32 %518, %107, !dbg !84
  %549 = or disjoint i32 %518, %108, !dbg !84
  %550 = or disjoint i32 %518, %109, !dbg !84
  %551 = icmp slt i32 %519, %222, !dbg !85
  %552 = icmp slt i32 %520, %222, !dbg !85
  %553 = icmp slt i32 %521, %222, !dbg !85
  %554 = icmp slt i32 %522, %222, !dbg !85
  %555 = icmp slt i32 %523, %222, !dbg !85
  %556 = icmp slt i32 %524, %222, !dbg !85
  %557 = icmp slt i32 %525, %222, !dbg !85
  %558 = icmp slt i32 %526, %222, !dbg !85
  %559 = icmp slt i32 %527, %222, !dbg !85
  %560 = icmp slt i32 %528, %222, !dbg !85
  %561 = icmp slt i32 %529, %222, !dbg !85
  %562 = icmp slt i32 %530, %222, !dbg !85
  %563 = icmp slt i32 %531, %222, !dbg !85
  %564 = icmp slt i32 %532, %222, !dbg !85
  %565 = icmp slt i32 %533, %222, !dbg !85
  %566 = icmp slt i32 %534, %222, !dbg !85
  %567 = icmp slt i32 %535, %222, !dbg !85
  %568 = icmp slt i32 %536, %222, !dbg !85
  %569 = icmp slt i32 %537, %222, !dbg !85
  %570 = icmp slt i32 %538, %222, !dbg !85
  %571 = icmp slt i32 %539, %222, !dbg !85
  %572 = icmp slt i32 %540, %222, !dbg !85
  %573 = icmp slt i32 %541, %222, !dbg !85
  %574 = icmp slt i32 %542, %222, !dbg !85
  %575 = icmp slt i32 %543, %222, !dbg !85
  %576 = icmp slt i32 %544, %222, !dbg !85
  %577 = icmp slt i32 %545, %222, !dbg !85
  %578 = icmp slt i32 %546, %222, !dbg !85
  %579 = icmp slt i32 %547, %222, !dbg !85
  %580 = icmp slt i32 %548, %222, !dbg !85
  %581 = icmp slt i32 %549, %222, !dbg !85
  %582 = icmp slt i32 %550, %222, !dbg !85
  %583 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %467, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %584 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %471, <8 x bfloat> %179, <16 x float> %583, i32 0, i32 0, i32 0), !dbg !86
  %585 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %475, <8 x bfloat> %182, <16 x float> %584, i32 0, i32 0, i32 0), !dbg !86
  %586 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %479, <8 x bfloat> %185, <16 x float> %585, i32 0, i32 0, i32 0), !dbg !86
  %587 = extractelement <16 x float> %586, i64 0, !dbg !86
  %588 = extractelement <16 x float> %586, i64 1, !dbg !86
  %589 = extractelement <16 x float> %586, i64 2, !dbg !86
  %590 = extractelement <16 x float> %586, i64 3, !dbg !86
  %591 = extractelement <16 x float> %586, i64 4, !dbg !86
  %592 = extractelement <16 x float> %586, i64 5, !dbg !86
  %593 = extractelement <16 x float> %586, i64 6, !dbg !86
  %594 = extractelement <16 x float> %586, i64 7, !dbg !86
  %595 = extractelement <16 x float> %586, i64 8, !dbg !86
  %596 = extractelement <16 x float> %586, i64 9, !dbg !86
  %597 = extractelement <16 x float> %586, i64 10, !dbg !86
  %598 = extractelement <16 x float> %586, i64 11, !dbg !86
  %599 = extractelement <16 x float> %586, i64 12, !dbg !86
  %600 = extractelement <16 x float> %586, i64 13, !dbg !86
  %601 = extractelement <16 x float> %586, i64 14, !dbg !86
  %602 = extractelement <16 x float> %586, i64 15, !dbg !86
  %603 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %469, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %604 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %473, <8 x bfloat> %179, <16 x float> %603, i32 0, i32 0, i32 0), !dbg !86
  %605 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %477, <8 x bfloat> %182, <16 x float> %604, i32 0, i32 0, i32 0), !dbg !86
  %606 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %481, <8 x bfloat> %185, <16 x float> %605, i32 0, i32 0, i32 0), !dbg !86
  %607 = extractelement <16 x float> %606, i64 0, !dbg !86
  %608 = extractelement <16 x float> %606, i64 1, !dbg !86
  %609 = extractelement <16 x float> %606, i64 2, !dbg !86
  %610 = extractelement <16 x float> %606, i64 3, !dbg !86
  %611 = extractelement <16 x float> %606, i64 4, !dbg !86
  %612 = extractelement <16 x float> %606, i64 5, !dbg !86
  %613 = extractelement <16 x float> %606, i64 6, !dbg !86
  %614 = extractelement <16 x float> %606, i64 7, !dbg !86
  %615 = extractelement <16 x float> %606, i64 8, !dbg !86
  %616 = extractelement <16 x float> %606, i64 9, !dbg !86
  %617 = extractelement <16 x float> %606, i64 10, !dbg !86
  %618 = extractelement <16 x float> %606, i64 11, !dbg !86
  %619 = extractelement <16 x float> %606, i64 12, !dbg !86
  %620 = extractelement <16 x float> %606, i64 13, !dbg !86
  %621 = extractelement <16 x float> %606, i64 14, !dbg !86
  %622 = extractelement <16 x float> %606, i64 15, !dbg !86
  %623 = fmul float %7, %587, !dbg !87
  %624 = fmul float %7, %588, !dbg !87
  %625 = fmul float %7, %589, !dbg !87
  %626 = fmul float %7, %590, !dbg !87
  %627 = fmul float %7, %591, !dbg !87
  %628 = fmul float %7, %592, !dbg !87
  %629 = fmul float %7, %593, !dbg !87
  %630 = fmul float %7, %594, !dbg !87
  %631 = fmul float %7, %595, !dbg !87
  %632 = fmul float %7, %596, !dbg !87
  %633 = fmul float %7, %597, !dbg !87
  %634 = fmul float %7, %598, !dbg !87
  %635 = fmul float %7, %599, !dbg !87
  %636 = fmul float %7, %600, !dbg !87
  %637 = fmul float %7, %601, !dbg !87
  %638 = fmul float %7, %602, !dbg !87
  %639 = fmul float %7, %607, !dbg !87
  %640 = fmul float %7, %608, !dbg !87
  %641 = fmul float %7, %609, !dbg !87
  %642 = fmul float %7, %610, !dbg !87
  %643 = fmul float %7, %611, !dbg !87
  %644 = fmul float %7, %612, !dbg !87
  %645 = fmul float %7, %613, !dbg !87
  %646 = fmul float %7, %614, !dbg !87
  %647 = fmul float %7, %615, !dbg !87
  %648 = fmul float %7, %616, !dbg !87
  %649 = fmul float %7, %617, !dbg !87
  %650 = fmul float %7, %618, !dbg !87
  %651 = fmul float %7, %619, !dbg !87
  %652 = fmul float %7, %620, !dbg !87
  %653 = fmul float %7, %621, !dbg !87
  %654 = fmul float %7, %622, !dbg !87
  %655 = fadd float %623, 0.000000e+00, !dbg !88
  %656 = fadd float %624, 0.000000e+00, !dbg !88
  %657 = fadd float %625, 0.000000e+00, !dbg !88
  %658 = fadd float %626, 0.000000e+00, !dbg !88
  %659 = fadd float %627, 0.000000e+00, !dbg !88
  %660 = fadd float %628, 0.000000e+00, !dbg !88
  %661 = fadd float %629, 0.000000e+00, !dbg !88
  %662 = fadd float %630, 0.000000e+00, !dbg !88
  %663 = fadd float %631, 0.000000e+00, !dbg !88
  %664 = fadd float %632, 0.000000e+00, !dbg !88
  %665 = fadd float %633, 0.000000e+00, !dbg !88
  %666 = fadd float %634, 0.000000e+00, !dbg !88
  %667 = fadd float %635, 0.000000e+00, !dbg !88
  %668 = fadd float %636, 0.000000e+00, !dbg !88
  %669 = fadd float %637, 0.000000e+00, !dbg !88
  %670 = fadd float %638, 0.000000e+00, !dbg !88
  %671 = fadd float %639, 0.000000e+00, !dbg !88
  %672 = fadd float %640, 0.000000e+00, !dbg !88
  %673 = fadd float %641, 0.000000e+00, !dbg !88
  %674 = fadd float %642, 0.000000e+00, !dbg !88
  %675 = fadd float %643, 0.000000e+00, !dbg !88
  %676 = fadd float %644, 0.000000e+00, !dbg !88
  %677 = fadd float %645, 0.000000e+00, !dbg !88
  %678 = fadd float %646, 0.000000e+00, !dbg !88
  %679 = fadd float %647, 0.000000e+00, !dbg !88
  %680 = fadd float %648, 0.000000e+00, !dbg !88
  %681 = fadd float %649, 0.000000e+00, !dbg !88
  %682 = fadd float %650, 0.000000e+00, !dbg !88
  %683 = fadd float %651, 0.000000e+00, !dbg !88
  %684 = fadd float %652, 0.000000e+00, !dbg !88
  %685 = fadd float %653, 0.000000e+00, !dbg !88
  %686 = fadd float %654, 0.000000e+00, !dbg !88
  %687 = and i1 %223, %551, !dbg !89
  %688 = and i1 %223, %552, !dbg !89
  %689 = and i1 %223, %553, !dbg !89
  %690 = and i1 %223, %554, !dbg !89
  %691 = and i1 %223, %555, !dbg !89
  %692 = and i1 %223, %556, !dbg !89
  %693 = and i1 %223, %557, !dbg !89
  %694 = and i1 %223, %558, !dbg !89
  %695 = and i1 %223, %559, !dbg !89
  %696 = and i1 %223, %560, !dbg !89
  %697 = and i1 %223, %561, !dbg !89
  %698 = and i1 %223, %562, !dbg !89
  %699 = and i1 %223, %563, !dbg !89
  %700 = and i1 %223, %564, !dbg !89
  %701 = and i1 %223, %565, !dbg !89
  %702 = and i1 %223, %566, !dbg !89
  %703 = and i1 %223, %567, !dbg !89
  %704 = and i1 %223, %568, !dbg !89
  %705 = and i1 %223, %569, !dbg !89
  %706 = and i1 %223, %570, !dbg !89
  %707 = and i1 %223, %571, !dbg !89
  %708 = and i1 %223, %572, !dbg !89
  %709 = and i1 %223, %573, !dbg !89
  %710 = and i1 %223, %574, !dbg !89
  %711 = and i1 %223, %575, !dbg !89
  %712 = and i1 %223, %576, !dbg !89
  %713 = and i1 %223, %577, !dbg !89
  %714 = and i1 %223, %578, !dbg !89
  %715 = and i1 %223, %579, !dbg !89
  %716 = and i1 %223, %580, !dbg !89
  %717 = and i1 %223, %581, !dbg !89
  %718 = and i1 %223, %582, !dbg !89
  %719 = select i1 %687, float %655, float 0xFFF0000000000000, !dbg !90
  %720 = select i1 %688, float %656, float 0xFFF0000000000000, !dbg !90
  %721 = select i1 %689, float %657, float 0xFFF0000000000000, !dbg !90
  %722 = select i1 %690, float %658, float 0xFFF0000000000000, !dbg !90
  %723 = select i1 %691, float %659, float 0xFFF0000000000000, !dbg !90
  %724 = select i1 %692, float %660, float 0xFFF0000000000000, !dbg !90
  %725 = select i1 %693, float %661, float 0xFFF0000000000000, !dbg !90
  %726 = select i1 %694, float %662, float 0xFFF0000000000000, !dbg !90
  %727 = select i1 %695, float %663, float 0xFFF0000000000000, !dbg !90
  %728 = select i1 %696, float %664, float 0xFFF0000000000000, !dbg !90
  %729 = select i1 %697, float %665, float 0xFFF0000000000000, !dbg !90
  %730 = select i1 %698, float %666, float 0xFFF0000000000000, !dbg !90
  %731 = select i1 %699, float %667, float 0xFFF0000000000000, !dbg !90
  %732 = select i1 %700, float %668, float 0xFFF0000000000000, !dbg !90
  %733 = select i1 %701, float %669, float 0xFFF0000000000000, !dbg !90
  %734 = select i1 %702, float %670, float 0xFFF0000000000000, !dbg !90
  %735 = select i1 %703, float %671, float 0xFFF0000000000000, !dbg !90
  %736 = select i1 %704, float %672, float 0xFFF0000000000000, !dbg !90
  %737 = select i1 %705, float %673, float 0xFFF0000000000000, !dbg !90
  %738 = select i1 %706, float %674, float 0xFFF0000000000000, !dbg !90
  %739 = select i1 %707, float %675, float 0xFFF0000000000000, !dbg !90
  %740 = select i1 %708, float %676, float 0xFFF0000000000000, !dbg !90
  %741 = select i1 %709, float %677, float 0xFFF0000000000000, !dbg !90
  %742 = select i1 %710, float %678, float 0xFFF0000000000000, !dbg !90
  %743 = select i1 %711, float %679, float 0xFFF0000000000000, !dbg !90
  %744 = select i1 %712, float %680, float 0xFFF0000000000000, !dbg !90
  %745 = select i1 %713, float %681, float 0xFFF0000000000000, !dbg !90
  %746 = select i1 %714, float %682, float 0xFFF0000000000000, !dbg !90
  %747 = select i1 %715, float %683, float 0xFFF0000000000000, !dbg !90
  %748 = select i1 %716, float %684, float 0xFFF0000000000000, !dbg !90
  %749 = select i1 %717, float %685, float 0xFFF0000000000000, !dbg !90
  %750 = select i1 %718, float %686, float 0xFFF0000000000000, !dbg !90
  %751 = tail call float @llvm.maxnum.f32(float %719, float %720), !dbg !91
  %752 = tail call float @llvm.maxnum.f32(float %751, float %721), !dbg !91
  %753 = tail call float @llvm.maxnum.f32(float %752, float %722), !dbg !91
  %754 = tail call float @llvm.maxnum.f32(float %753, float %723), !dbg !91
  %755 = tail call float @llvm.maxnum.f32(float %754, float %724), !dbg !91
  %756 = tail call float @llvm.maxnum.f32(float %755, float %725), !dbg !91
  %757 = tail call float @llvm.maxnum.f32(float %756, float %726), !dbg !91
  %758 = tail call float @llvm.maxnum.f32(float %757, float %727), !dbg !91
  %759 = tail call float @llvm.maxnum.f32(float %758, float %728), !dbg !91
  %760 = tail call float @llvm.maxnum.f32(float %759, float %729), !dbg !91
  %761 = tail call float @llvm.maxnum.f32(float %760, float %730), !dbg !91
  %762 = tail call float @llvm.maxnum.f32(float %761, float %731), !dbg !91
  %763 = tail call float @llvm.maxnum.f32(float %762, float %732), !dbg !91
  %764 = tail call float @llvm.maxnum.f32(float %763, float %733), !dbg !91
  %765 = tail call float @llvm.maxnum.f32(float %764, float %734), !dbg !91
  %766 = tail call float @llvm.maxnum.f32(float %765, float %735), !dbg !91
  %767 = tail call float @llvm.maxnum.f32(float %766, float %736), !dbg !91
  %768 = tail call float @llvm.maxnum.f32(float %767, float %737), !dbg !91
  %769 = tail call float @llvm.maxnum.f32(float %768, float %738), !dbg !91
  %770 = tail call float @llvm.maxnum.f32(float %769, float %739), !dbg !91
  %771 = tail call float @llvm.maxnum.f32(float %770, float %740), !dbg !91
  %772 = tail call float @llvm.maxnum.f32(float %771, float %741), !dbg !91
  %773 = tail call float @llvm.maxnum.f32(float %772, float %742), !dbg !91
  %774 = tail call float @llvm.maxnum.f32(float %773, float %743), !dbg !91
  %775 = tail call float @llvm.maxnum.f32(float %774, float %744), !dbg !91
  %776 = tail call float @llvm.maxnum.f32(float %775, float %745), !dbg !91
  %777 = tail call float @llvm.maxnum.f32(float %776, float %746), !dbg !91
  %778 = tail call float @llvm.maxnum.f32(float %777, float %747), !dbg !91
  %779 = tail call float @llvm.maxnum.f32(float %778, float %748), !dbg !91
  %780 = tail call float @llvm.maxnum.f32(float %779, float %749), !dbg !91
  %781 = tail call float @llvm.maxnum.f32(float %780, float %750), !dbg !91
  %782 = bitcast float %781 to i32, !dbg !95
  %783 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %782, i32 %782, i1 false, i1 false), !dbg !95
  %784 = extractvalue { i32, i32 } %783, 0, !dbg !95
  %785 = extractvalue { i32, i32 } %783, 1, !dbg !95
  %786 = bitcast i32 %784 to float, !dbg !95
  %787 = bitcast i32 %785 to float, !dbg !95
  %788 = tail call float @llvm.maxnum.f32(float %786, float %787), !dbg !91
  %789 = tail call float @llvm.maxnum.f32(float %.pn6113, float %788), !dbg !96
  %790 = fcmp one float %789, 0xFFF0000000000000, !dbg !97
  %791 = select i1 %790, float %789, float 0.000000e+00, !dbg !98
  %792 = fsub float %719, %791, !dbg !99
  %793 = fsub float %720, %791, !dbg !99
  %794 = fsub float %721, %791, !dbg !99
  %795 = fsub float %722, %791, !dbg !99
  %796 = fsub float %723, %791, !dbg !99
  %797 = fsub float %724, %791, !dbg !99
  %798 = fsub float %725, %791, !dbg !99
  %799 = fsub float %726, %791, !dbg !99
  %800 = fsub float %727, %791, !dbg !99
  %801 = fsub float %728, %791, !dbg !99
  %802 = fsub float %729, %791, !dbg !99
  %803 = fsub float %730, %791, !dbg !99
  %804 = fsub float %731, %791, !dbg !99
  %805 = fsub float %732, %791, !dbg !99
  %806 = fsub float %733, %791, !dbg !99
  %807 = fsub float %734, %791, !dbg !99
  %808 = fsub float %735, %791, !dbg !99
  %809 = fsub float %736, %791, !dbg !99
  %810 = fsub float %737, %791, !dbg !99
  %811 = fsub float %738, %791, !dbg !99
  %812 = fsub float %739, %791, !dbg !99
  %813 = fsub float %740, %791, !dbg !99
  %814 = fsub float %741, %791, !dbg !99
  %815 = fsub float %742, %791, !dbg !99
  %816 = fsub float %743, %791, !dbg !99
  %817 = fsub float %744, %791, !dbg !99
  %818 = fsub float %745, %791, !dbg !99
  %819 = fsub float %746, %791, !dbg !99
  %820 = fsub float %747, %791, !dbg !99
  %821 = fsub float %748, %791, !dbg !99
  %822 = fsub float %749, %791, !dbg !99
  %823 = fsub float %750, %791, !dbg !99
  %824 = fmul float %792, 0x3FF7154760000000, !dbg !100
  %825 = tail call float @llvm.exp2.f32(float %824), !dbg !100
  %826 = fmul float %793, 0x3FF7154760000000, !dbg !100
  %827 = tail call float @llvm.exp2.f32(float %826), !dbg !100
  %828 = fmul float %794, 0x3FF7154760000000, !dbg !100
  %829 = tail call float @llvm.exp2.f32(float %828), !dbg !100
  %830 = fmul float %795, 0x3FF7154760000000, !dbg !100
  %831 = tail call float @llvm.exp2.f32(float %830), !dbg !100
  %832 = fmul float %796, 0x3FF7154760000000, !dbg !100
  %833 = tail call float @llvm.exp2.f32(float %832), !dbg !100
  %834 = fmul float %797, 0x3FF7154760000000, !dbg !100
  %835 = tail call float @llvm.exp2.f32(float %834), !dbg !100
  %836 = fmul float %798, 0x3FF7154760000000, !dbg !100
  %837 = tail call float @llvm.exp2.f32(float %836), !dbg !100
  %838 = fmul float %799, 0x3FF7154760000000, !dbg !100
  %839 = tail call float @llvm.exp2.f32(float %838), !dbg !100
  %840 = fmul float %800, 0x3FF7154760000000, !dbg !100
  %841 = tail call float @llvm.exp2.f32(float %840), !dbg !100
  %842 = fmul float %801, 0x3FF7154760000000, !dbg !100
  %843 = tail call float @llvm.exp2.f32(float %842), !dbg !100
  %844 = fmul float %802, 0x3FF7154760000000, !dbg !100
  %845 = tail call float @llvm.exp2.f32(float %844), !dbg !100
  %846 = fmul float %803, 0x3FF7154760000000, !dbg !100
  %847 = tail call float @llvm.exp2.f32(float %846), !dbg !100
  %848 = fmul float %804, 0x3FF7154760000000, !dbg !100
  %849 = tail call float @llvm.exp2.f32(float %848), !dbg !100
  %850 = fmul float %805, 0x3FF7154760000000, !dbg !100
  %851 = tail call float @llvm.exp2.f32(float %850), !dbg !100
  %852 = fmul float %806, 0x3FF7154760000000, !dbg !100
  %853 = tail call float @llvm.exp2.f32(float %852), !dbg !100
  %854 = fmul float %807, 0x3FF7154760000000, !dbg !100
  %855 = tail call float @llvm.exp2.f32(float %854), !dbg !100
  %856 = fmul float %808, 0x3FF7154760000000, !dbg !100
  %857 = tail call float @llvm.exp2.f32(float %856), !dbg !100
  %858 = fmul float %809, 0x3FF7154760000000, !dbg !100
  %859 = tail call float @llvm.exp2.f32(float %858), !dbg !100
  %860 = fmul float %810, 0x3FF7154760000000, !dbg !100
  %861 = tail call float @llvm.exp2.f32(float %860), !dbg !100
  %862 = fmul float %811, 0x3FF7154760000000, !dbg !100
  %863 = tail call float @llvm.exp2.f32(float %862), !dbg !100
  %864 = fmul float %812, 0x3FF7154760000000, !dbg !100
  %865 = tail call float @llvm.exp2.f32(float %864), !dbg !100
  %866 = fmul float %813, 0x3FF7154760000000, !dbg !100
  %867 = tail call float @llvm.exp2.f32(float %866), !dbg !100
  %868 = fmul float %814, 0x3FF7154760000000, !dbg !100
  %869 = tail call float @llvm.exp2.f32(float %868), !dbg !100
  %870 = fmul float %815, 0x3FF7154760000000, !dbg !100
  %871 = tail call float @llvm.exp2.f32(float %870), !dbg !100
  %872 = fmul float %816, 0x3FF7154760000000, !dbg !100
  %873 = tail call float @llvm.exp2.f32(float %872), !dbg !100
  %874 = fmul float %817, 0x3FF7154760000000, !dbg !100
  %875 = tail call float @llvm.exp2.f32(float %874), !dbg !100
  %876 = fmul float %818, 0x3FF7154760000000, !dbg !100
  %877 = tail call float @llvm.exp2.f32(float %876), !dbg !100
  %878 = fmul float %819, 0x3FF7154760000000, !dbg !100
  %879 = tail call float @llvm.exp2.f32(float %878), !dbg !100
  %880 = fmul float %820, 0x3FF7154760000000, !dbg !100
  %881 = tail call float @llvm.exp2.f32(float %880), !dbg !100
  %882 = fmul float %821, 0x3FF7154760000000, !dbg !100
  %883 = tail call float @llvm.exp2.f32(float %882), !dbg !100
  %884 = fmul float %822, 0x3FF7154760000000, !dbg !100
  %885 = tail call float @llvm.exp2.f32(float %884), !dbg !100
  %886 = fmul float %823, 0x3FF7154760000000, !dbg !100
  %887 = tail call float @llvm.exp2.f32(float %886), !dbg !100
  %888 = fadd float %825, %827, !dbg !101
  %889 = fadd float %829, %888, !dbg !101
  %890 = fadd float %831, %889, !dbg !101
  %891 = fadd float %833, %890, !dbg !101
  %892 = fadd float %835, %891, !dbg !101
  %893 = fadd float %837, %892, !dbg !101
  %894 = fadd float %839, %893, !dbg !101
  %895 = fadd float %841, %894, !dbg !101
  %896 = fadd float %843, %895, !dbg !101
  %897 = fadd float %845, %896, !dbg !101
  %898 = fadd float %847, %897, !dbg !101
  %899 = fadd float %849, %898, !dbg !101
  %900 = fadd float %851, %899, !dbg !101
  %901 = fadd float %853, %900, !dbg !101
  %902 = fadd float %855, %901, !dbg !101
  %903 = fadd float %857, %902, !dbg !101
  %904 = fadd float %859, %903, !dbg !101
  %905 = fadd float %861, %904, !dbg !101
  %906 = fadd float %863, %905, !dbg !101
  %907 = fadd float %865, %906, !dbg !101
  %908 = fadd float %867, %907, !dbg !101
  %909 = fadd float %869, %908, !dbg !101
  %910 = fadd float %871, %909, !dbg !101
  %911 = fadd float %873, %910, !dbg !101
  %912 = fadd float %875, %911, !dbg !101
  %913 = fadd float %877, %912, !dbg !101
  %914 = fadd float %879, %913, !dbg !101
  %915 = fadd float %881, %914, !dbg !101
  %916 = fadd float %883, %915, !dbg !101
  %917 = fadd float %885, %916, !dbg !101
  %918 = fadd float %887, %917, !dbg !101
  %919 = bitcast float %918 to i32, !dbg !103
  %920 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %919, i32 %919, i1 false, i1 false), !dbg !103
  %921 = extractvalue { i32, i32 } %920, 0, !dbg !103
  %922 = extractvalue { i32, i32 } %920, 1, !dbg !103
  %923 = bitcast i32 %921 to float, !dbg !103
  %924 = bitcast i32 %922 to float, !dbg !103
  %925 = fadd float %923, %924, !dbg !101
  %926 = fsub float %.pn6113, %791, !dbg !104
  %927 = fmul float %926, 0x3FF7154760000000, !dbg !105
  %928 = tail call float @llvm.exp2.f32(float %927), !dbg !105
  %929 = insertelement <1 x float> poison, float %928, i64 0, !dbg !106
  store <1 x float> %929, ptr addrspace(3) %365, align 4, !dbg !106
  fence syncscope("workgroup") release, !dbg !106
  tail call void @llvm.amdgcn.s.barrier(), !dbg !106
  fence syncscope("workgroup") acquire, !dbg !106
  %930 = load <1 x float>, ptr addrspace(3) %366, align 4, !dbg !106
  %931 = fmul float %435, %928, !dbg !107
  %932 = fadd float %925, %931, !dbg !108
  %933 = insertelement <2 x float> poison, float %825, i64 0, !dbg !109
  %934 = insertelement <2 x float> %933, float %827, i64 1, !dbg !109
  %935 = fptrunc <2 x float> %934 to <2 x bfloat>, !dbg !109
  %936 = insertelement <2 x float> poison, float %829, i64 0, !dbg !109
  %937 = insertelement <2 x float> %936, float %831, i64 1, !dbg !109
  %938 = fptrunc <2 x float> %937 to <2 x bfloat>, !dbg !109
  %939 = insertelement <2 x float> poison, float %833, i64 0, !dbg !109
  %940 = insertelement <2 x float> %939, float %835, i64 1, !dbg !109
  %941 = fptrunc <2 x float> %940 to <2 x bfloat>, !dbg !109
  %942 = insertelement <2 x float> poison, float %837, i64 0, !dbg !109
  %943 = insertelement <2 x float> %942, float %839, i64 1, !dbg !109
  %944 = fptrunc <2 x float> %943 to <2 x bfloat>, !dbg !109
  %945 = insertelement <2 x float> poison, float %841, i64 0, !dbg !109
  %946 = insertelement <2 x float> %945, float %843, i64 1, !dbg !109
  %947 = fptrunc <2 x float> %946 to <2 x bfloat>, !dbg !109
  %948 = insertelement <2 x float> poison, float %845, i64 0, !dbg !109
  %949 = insertelement <2 x float> %948, float %847, i64 1, !dbg !109
  %950 = fptrunc <2 x float> %949 to <2 x bfloat>, !dbg !109
  %951 = insertelement <2 x float> poison, float %849, i64 0, !dbg !109
  %952 = insertelement <2 x float> %951, float %851, i64 1, !dbg !109
  %953 = fptrunc <2 x float> %952 to <2 x bfloat>, !dbg !109
  %954 = insertelement <2 x float> poison, float %853, i64 0, !dbg !109
  %955 = insertelement <2 x float> %954, float %855, i64 1, !dbg !109
  %956 = fptrunc <2 x float> %955 to <2 x bfloat>, !dbg !109
  %957 = insertelement <2 x float> poison, float %857, i64 0, !dbg !109
  %958 = insertelement <2 x float> %957, float %859, i64 1, !dbg !109
  %959 = fptrunc <2 x float> %958 to <2 x bfloat>, !dbg !109
  %960 = insertelement <2 x float> poison, float %861, i64 0, !dbg !109
  %961 = insertelement <2 x float> %960, float %863, i64 1, !dbg !109
  %962 = fptrunc <2 x float> %961 to <2 x bfloat>, !dbg !109
  %963 = insertelement <2 x float> poison, float %865, i64 0, !dbg !109
  %964 = insertelement <2 x float> %963, float %867, i64 1, !dbg !109
  %965 = fptrunc <2 x float> %964 to <2 x bfloat>, !dbg !109
  %966 = insertelement <2 x float> poison, float %869, i64 0, !dbg !109
  %967 = insertelement <2 x float> %966, float %871, i64 1, !dbg !109
  %968 = fptrunc <2 x float> %967 to <2 x bfloat>, !dbg !109
  %969 = insertelement <2 x float> poison, float %873, i64 0, !dbg !109
  %970 = insertelement <2 x float> %969, float %875, i64 1, !dbg !109
  %971 = fptrunc <2 x float> %970 to <2 x bfloat>, !dbg !109
  %972 = insertelement <2 x float> poison, float %877, i64 0, !dbg !109
  %973 = insertelement <2 x float> %972, float %879, i64 1, !dbg !109
  %974 = fptrunc <2 x float> %973 to <2 x bfloat>, !dbg !109
  %975 = insertelement <2 x float> poison, float %881, i64 0, !dbg !109
  %976 = insertelement <2 x float> %975, float %883, i64 1, !dbg !109
  %977 = fptrunc <2 x float> %976 to <2 x bfloat>, !dbg !109
  %978 = insertelement <2 x float> poison, float %885, i64 0, !dbg !109
  %979 = insertelement <2 x float> %978, float %887, i64 1, !dbg !109
  %980 = fptrunc <2 x float> %979 to <2 x bfloat>, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %981 = shufflevector <2 x bfloat> %935, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %981, ptr addrspace(3) %370, align 2, !dbg !109
  %982 = shufflevector <2 x bfloat> %947, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %982, ptr addrspace(3) %371, align 2, !dbg !109
  %983 = shufflevector <2 x bfloat> %959, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %983, ptr addrspace(3) %372, align 2, !dbg !109
  %984 = shufflevector <2 x bfloat> %971, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %984, ptr addrspace(3) %373, align 2, !dbg !109
  %985 = shufflevector <2 x bfloat> %935, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %985, ptr addrspace(3) %375, align 2, !dbg !109
  %986 = shufflevector <2 x bfloat> %947, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %986, ptr addrspace(3) %376, align 2, !dbg !109
  %987 = shufflevector <2 x bfloat> %959, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %987, ptr addrspace(3) %377, align 2, !dbg !109
  %988 = shufflevector <2 x bfloat> %971, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %988, ptr addrspace(3) %378, align 2, !dbg !109
  %989 = shufflevector <2 x bfloat> %938, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %989, ptr addrspace(3) %380, align 2, !dbg !109
  %990 = shufflevector <2 x bfloat> %950, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %990, ptr addrspace(3) %381, align 2, !dbg !109
  %991 = shufflevector <2 x bfloat> %962, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %991, ptr addrspace(3) %382, align 2, !dbg !109
  %992 = shufflevector <2 x bfloat> %974, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %992, ptr addrspace(3) %383, align 2, !dbg !109
  %993 = shufflevector <2 x bfloat> %938, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %993, ptr addrspace(3) %385, align 2, !dbg !109
  %994 = shufflevector <2 x bfloat> %950, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %994, ptr addrspace(3) %386, align 2, !dbg !109
  %995 = shufflevector <2 x bfloat> %962, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %995, ptr addrspace(3) %387, align 2, !dbg !109
  %996 = shufflevector <2 x bfloat> %974, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %996, ptr addrspace(3) %388, align 2, !dbg !109
  %997 = shufflevector <2 x bfloat> %941, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %997, ptr addrspace(3) %390, align 2, !dbg !109
  %998 = shufflevector <2 x bfloat> %953, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %998, ptr addrspace(3) %391, align 2, !dbg !109
  %999 = shufflevector <2 x bfloat> %965, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %999, ptr addrspace(3) %392, align 2, !dbg !109
  %1000 = shufflevector <2 x bfloat> %977, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1000, ptr addrspace(3) %393, align 2, !dbg !109
  %1001 = shufflevector <2 x bfloat> %941, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1001, ptr addrspace(3) %395, align 2, !dbg !109
  %1002 = shufflevector <2 x bfloat> %953, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1002, ptr addrspace(3) %396, align 2, !dbg !109
  %1003 = shufflevector <2 x bfloat> %965, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1003, ptr addrspace(3) %397, align 2, !dbg !109
  %1004 = shufflevector <2 x bfloat> %977, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1004, ptr addrspace(3) %398, align 2, !dbg !109
  %1005 = shufflevector <2 x bfloat> %944, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1005, ptr addrspace(3) %400, align 2, !dbg !109
  %1006 = shufflevector <2 x bfloat> %956, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1006, ptr addrspace(3) %401, align 2, !dbg !109
  %1007 = shufflevector <2 x bfloat> %968, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1007, ptr addrspace(3) %402, align 2, !dbg !109
  %1008 = shufflevector <2 x bfloat> %980, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1008, ptr addrspace(3) %403, align 2, !dbg !109
  %1009 = shufflevector <2 x bfloat> %944, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1009, ptr addrspace(3) %405, align 2, !dbg !109
  %1010 = shufflevector <2 x bfloat> %956, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1010, ptr addrspace(3) %406, align 2, !dbg !109
  %1011 = shufflevector <2 x bfloat> %968, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1011, ptr addrspace(3) %407, align 2, !dbg !109
  %1012 = shufflevector <2 x bfloat> %980, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1012, ptr addrspace(3) %408, align 2, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %1013 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %420), !dbg !109
  %1014 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %421), !dbg !109
  %1015 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %422), !dbg !109
  %1016 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %423), !dbg !109
  %1017 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %424), !dbg !109
  %1018 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %425), !dbg !109
  %1019 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %426), !dbg !109
  %1020 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %427), !dbg !109
  %1021 = shufflevector <4 x bfloat> %1013, <4 x bfloat> %1014, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1022 = shufflevector <4 x bfloat> %1015, <4 x bfloat> %1016, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1023 = shufflevector <4 x bfloat> %1017, <4 x bfloat> %1018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1024 = shufflevector <4 x bfloat> %1019, <4 x bfloat> %1020, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1025 = shufflevector <4 x bfloat> %510, <4 x bfloat> %511, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1026 = shufflevector <4 x bfloat> %512, <4 x bfloat> %513, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1027 = shufflevector <4 x bfloat> %514, <4 x bfloat> %515, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1028 = shufflevector <4 x bfloat> %516, <4 x bfloat> %517, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1029 = shufflevector <2 x float> %437, <2 x float> %438, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1030 = shufflevector <2 x float> %439, <2 x float> %440, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1031 = shufflevector <2 x float> %441, <2 x float> %442, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1032 = shufflevector <2 x float> %443, <2 x float> %444, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1033 = shufflevector <4 x float> %1029, <4 x float> %1030, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1034 = shufflevector <4 x float> %1031, <4 x float> %1032, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1035 = shufflevector <8 x float> %1033, <8 x float> %1034, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !110
  %1036 = shufflevector <1 x float> %930, <1 x float> poison, <16 x i32> zeroinitializer, !dbg !110
  %1037 = fmul <16 x float> %1035, %1036, !dbg !110
  %1038 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1025, <8 x bfloat> %1021, <16 x float> %1037, i32 0, i32 0, i32 0), !dbg !110
  %1039 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1026, <8 x bfloat> %1022, <16 x float> %1038, i32 0, i32 0, i32 0), !dbg !110
  %1040 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1027, <8 x bfloat> %1023, <16 x float> %1039, i32 0, i32 0, i32 0), !dbg !110
  %1041 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1028, <8 x bfloat> %1024, <16 x float> %1040, i32 0, i32 0, i32 0), !dbg !110
  %1042 = add nuw nsw i32 %436, 1, !dbg !63
  %exitcond.not = icmp eq i32 %1042, %smax, !dbg !63
  %1043 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1044 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1045 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1046 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1047 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1048 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1049 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1050 = shufflevector <16 x float> %1041, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %exitcond.not, label %._crit_edge116.loopexit, label %428, !dbg !63

._crit_edge116.loopexit:                          ; preds = %428
  %1051 = add i32 %447, 1, !dbg !63
  br label %._crit_edge116, !dbg !63

._crit_edge116:                                   ; preds = %303, %._crit_edge116.loopexit
  %.pn6.lcssa = phi float [ %791, %._crit_edge116.loopexit ], [ %196, %303 ]
  %.lcssa109 = phi float [ %932, %._crit_edge116.loopexit ], [ 1.000000e+00, %303 ]
  %.lcssa107 = phi i32 [ %1051, %._crit_edge116.loopexit ], [ 2, %303 ], !dbg !63
  %.lcssa106 = phi i32 [ %452, %._crit_edge116.loopexit ], [ %305, %303 ], !dbg !64
  %.lcssa105 = phi ptr addrspace(3) [ %431, %._crit_edge116.loopexit ], [ @global_smem, %303 ], !dbg !74
  %.lcssa104 = phi ptr addrspace(3) [ %457, %._crit_edge116.loopexit ], [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), %303 ], !dbg !74
  %1052 = phi ptr addrspace(3) [ %429, %._crit_edge116.loopexit ], [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), %303 ], !dbg !79
  %.lcssa = phi ptr addrspace(3) [ %482, %._crit_edge116.loopexit ], [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), %303 ], !dbg !79
  %1053 = phi <2 x float> [ %1050, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1054 = phi <2 x float> [ %1049, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1055 = phi <2 x float> [ %1048, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1056 = phi <2 x float> [ %1047, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1057 = phi <2 x float> [ %1046, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1058 = phi <2 x float> [ %1045, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1059 = phi <2 x float> [ %1044, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1060 = phi <2 x float> [ %1043, %._crit_edge116.loopexit ], [ zeroinitializer, %303 ]
  %1061 = tail call i32 @llvm.smax.i32(i32 %340, i32 0), !dbg !63
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49168), !dbg !74
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  %1062 = icmp slt i32 %.lcssa107, 3, !dbg !63
  %1063 = sext i32 %.lcssa106 to i64, !dbg !71
  %1064 = mul i64 %21, %1063, !dbg !71
  %1065 = mul i64 %18, %1063, !dbg !72
  %1066 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1065, !dbg !73
  %1067 = getelementptr bfloat, ptr addrspace(1) %1066, i64 %220, !dbg !73
  %1068 = shl i32 %.lcssa107, 12, !dbg !74
  %1069 = select i1 %1062, i32 %1068, i32 0, !dbg !63
  %1070 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1069, !dbg !74
  %1071 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1067, i16 0, i32 2147483646, i32 159744), !dbg !74
  %1072 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %245, !dbg !74
  %1073 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %248, i32 %238), !dbg !74
  %1074 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %299), !dbg !74
  %1075 = lshr i64 %1074, %251, !dbg !74
  %1076 = trunc i64 %1075 to i1, !dbg !74
  %1077 = shl i32 %1073, 1, !dbg !74
  %1078 = select i1 %1076, i32 %1077, i32 -2147483648, !dbg !74
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %1071, ptr addrspace(3) %1072, i32 16, i32 %1078, i32 0, i32 0, i32 0), !dbg !74, !alias.scope !75
  %1079 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %343, !dbg !74
  %1080 = load <8 x bfloat>, ptr addrspace(3) %1079, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1081 = or disjoint i32 %343, 4096, !dbg !74
  %1082 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %1081, !dbg !74
  %1083 = load <8 x bfloat>, ptr addrspace(3) %1082, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1084 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %344, !dbg !74
  %1085 = load <8 x bfloat>, ptr addrspace(3) %1084, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1086 = or disjoint i32 %344, 4096, !dbg !74
  %1087 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %1086, !dbg !74
  %1088 = load <8 x bfloat>, ptr addrspace(3) %1087, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1089 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %345, !dbg !74
  %1090 = load <8 x bfloat>, ptr addrspace(3) %1089, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1091 = or disjoint i32 %345, 4096, !dbg !74
  %1092 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %1091, !dbg !74
  %1093 = load <8 x bfloat>, ptr addrspace(3) %1092, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1094 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %346, !dbg !74
  %1095 = load <8 x bfloat>, ptr addrspace(3) %1094, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1096 = or disjoint i32 %346, 4096, !dbg !74
  %1097 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa105, i32 %1096, !dbg !74
  %1098 = load <8 x bfloat>, ptr addrspace(3) %1097, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1099 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1064, !dbg !78
  %1100 = getelementptr bfloat, ptr addrspace(1) %1099, i64 %214, !dbg !78
  %1101 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %1069, !dbg !79
  %1102 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1100, i16 0, i32 2147483646, i32 159744), !dbg !79
  %1103 = getelementptr inbounds nuw i8, ptr addrspace(3) %1101, i32 %274, !dbg !79
  %1104 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %260), !dbg !79
  %1105 = lshr i64 %1074, %279, !dbg !79
  %1106 = trunc i64 %1105 to i1, !dbg !79
  %1107 = shl i32 %1104, 1, !dbg !79
  %1108 = select i1 %1106, i32 %1107, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %1102, ptr addrspace(3) %1103, i32 4, i32 %1108, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %1109 = getelementptr inbounds nuw i8, ptr addrspace(3) %1101, i32 %284, !dbg !79
  %1110 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %262), !dbg !79
  %1111 = shl i32 %1110, 1, !dbg !79
  %1112 = select i1 %1106, i32 %1111, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %1102, ptr addrspace(3) nonnull %1109, i32 4, i32 %1112, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %1113 = getelementptr inbounds nuw i8, ptr addrspace(3) %1101, i32 %289, !dbg !79
  %1114 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %264), !dbg !79
  %1115 = shl i32 %1114, 1, !dbg !79
  %1116 = select i1 %1106, i32 %1115, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %1102, ptr addrspace(3) nonnull %1113, i32 4, i32 %1116, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %1117 = getelementptr inbounds nuw i8, ptr addrspace(3) %1101, i32 %294, !dbg !79
  %1118 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %277, i32 %266), !dbg !79
  %1119 = shl i32 %1118, 1, !dbg !79
  %1120 = select i1 %1106, i32 %1119, i32 -2147483648, !dbg !79
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %1102, ptr addrspace(3) nonnull %1117, i32 4, i32 %1120, i32 0, i32 0, i32 0), !dbg !79, !alias.scope !75
  %1121 = or disjoint i32 %357, 1024, !dbg !79
  %1122 = or disjoint i32 %357, 2048, !dbg !79
  %1123 = or disjoint i32 %357, 3072, !dbg !79
  %1124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %357, !dbg !79
  %1125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %358, !dbg !79
  %1126 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %1121, !dbg !79
  %1127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %359, !dbg !79
  %1128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %1122, !dbg !79
  %1129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %360, !dbg !79
  %1130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %1123, !dbg !79
  %1131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1052, i32 %361, !dbg !79
  %1132 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1124), !dbg !79, !alias.scope !81, !noalias !75
  %1133 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1125), !dbg !79, !alias.scope !81, !noalias !75
  %1134 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1126), !dbg !79, !alias.scope !81, !noalias !75
  %1135 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1127), !dbg !79, !alias.scope !81, !noalias !75
  %1136 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1128), !dbg !79, !alias.scope !81, !noalias !75
  %1137 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1129), !dbg !79, !alias.scope !81, !noalias !75
  %1138 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1130), !dbg !79, !alias.scope !81, !noalias !75
  %1139 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1131), !dbg !79, !alias.scope !81, !noalias !75
  %1140 = shl nuw nsw i32 %1061, 6, !dbg !83
  %1141 = or disjoint i32 %1140, %78, !dbg !84
  %1142 = or disjoint i32 %1140, %79, !dbg !84
  %1143 = or disjoint i32 %1140, %80, !dbg !84
  %1144 = or disjoint i32 %1140, %81, !dbg !84
  %1145 = or disjoint i32 %1140, %82, !dbg !84
  %1146 = or disjoint i32 %1140, %83, !dbg !84
  %1147 = or disjoint i32 %1140, %84, !dbg !84
  %1148 = or disjoint i32 %1140, %85, !dbg !84
  %1149 = or disjoint i32 %1140, %86, !dbg !84
  %1150 = or disjoint i32 %1140, %87, !dbg !84
  %1151 = or disjoint i32 %1140, %88, !dbg !84
  %1152 = or disjoint i32 %1140, %89, !dbg !84
  %1153 = or disjoint i32 %1140, %90, !dbg !84
  %1154 = or disjoint i32 %1140, %91, !dbg !84
  %1155 = or disjoint i32 %1140, %92, !dbg !84
  %1156 = or disjoint i32 %1140, %93, !dbg !84
  %1157 = or disjoint i32 %1140, %94, !dbg !84
  %1158 = or disjoint i32 %1140, %95, !dbg !84
  %1159 = or disjoint i32 %1140, %96, !dbg !84
  %1160 = or disjoint i32 %1140, %97, !dbg !84
  %1161 = or disjoint i32 %1140, %98, !dbg !84
  %1162 = or disjoint i32 %1140, %99, !dbg !84
  %1163 = or disjoint i32 %1140, %100, !dbg !84
  %1164 = or disjoint i32 %1140, %101, !dbg !84
  %1165 = or disjoint i32 %1140, %102, !dbg !84
  %1166 = or disjoint i32 %1140, %103, !dbg !84
  %1167 = or disjoint i32 %1140, %104, !dbg !84
  %1168 = or disjoint i32 %1140, %105, !dbg !84
  %1169 = or disjoint i32 %1140, %106, !dbg !84
  %1170 = or disjoint i32 %1140, %107, !dbg !84
  %1171 = or disjoint i32 %1140, %108, !dbg !84
  %1172 = or disjoint i32 %1140, %109, !dbg !84
  %1173 = icmp slt i32 %1141, %222, !dbg !85
  %1174 = icmp slt i32 %1142, %222, !dbg !85
  %1175 = icmp slt i32 %1143, %222, !dbg !85
  %1176 = icmp slt i32 %1144, %222, !dbg !85
  %1177 = icmp slt i32 %1145, %222, !dbg !85
  %1178 = icmp slt i32 %1146, %222, !dbg !85
  %1179 = icmp slt i32 %1147, %222, !dbg !85
  %1180 = icmp slt i32 %1148, %222, !dbg !85
  %1181 = icmp slt i32 %1149, %222, !dbg !85
  %1182 = icmp slt i32 %1150, %222, !dbg !85
  %1183 = icmp slt i32 %1151, %222, !dbg !85
  %1184 = icmp slt i32 %1152, %222, !dbg !85
  %1185 = icmp slt i32 %1153, %222, !dbg !85
  %1186 = icmp slt i32 %1154, %222, !dbg !85
  %1187 = icmp slt i32 %1155, %222, !dbg !85
  %1188 = icmp slt i32 %1156, %222, !dbg !85
  %1189 = icmp slt i32 %1157, %222, !dbg !85
  %1190 = icmp slt i32 %1158, %222, !dbg !85
  %1191 = icmp slt i32 %1159, %222, !dbg !85
  %1192 = icmp slt i32 %1160, %222, !dbg !85
  %1193 = icmp slt i32 %1161, %222, !dbg !85
  %1194 = icmp slt i32 %1162, %222, !dbg !85
  %1195 = icmp slt i32 %1163, %222, !dbg !85
  %1196 = icmp slt i32 %1164, %222, !dbg !85
  %1197 = icmp slt i32 %1165, %222, !dbg !85
  %1198 = icmp slt i32 %1166, %222, !dbg !85
  %1199 = icmp slt i32 %1167, %222, !dbg !85
  %1200 = icmp slt i32 %1168, %222, !dbg !85
  %1201 = icmp slt i32 %1169, %222, !dbg !85
  %1202 = icmp slt i32 %1170, %222, !dbg !85
  %1203 = icmp slt i32 %1171, %222, !dbg !85
  %1204 = icmp slt i32 %1172, %222, !dbg !85
  br i1 %207, label %1205, label %1246, !dbg !86

1205:                                             ; preds = %._crit_edge116
  %1206 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1080, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %1207 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1085, <8 x bfloat> %179, <16 x float> %1206, i32 0, i32 0, i32 0), !dbg !86
  %1208 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1090, <8 x bfloat> %182, <16 x float> %1207, i32 0, i32 0, i32 0), !dbg !86
  %1209 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1095, <8 x bfloat> %185, <16 x float> %1208, i32 0, i32 0, i32 0), !dbg !86
  %1210 = extractelement <16 x float> %1209, i64 0, !dbg !86
  %1211 = extractelement <16 x float> %1209, i64 1, !dbg !86
  %1212 = extractelement <16 x float> %1209, i64 2, !dbg !86
  %1213 = extractelement <16 x float> %1209, i64 3, !dbg !86
  %1214 = extractelement <16 x float> %1209, i64 4, !dbg !86
  %1215 = extractelement <16 x float> %1209, i64 5, !dbg !86
  %1216 = extractelement <16 x float> %1209, i64 6, !dbg !86
  %1217 = extractelement <16 x float> %1209, i64 7, !dbg !86
  %1218 = extractelement <16 x float> %1209, i64 8, !dbg !86
  %1219 = extractelement <16 x float> %1209, i64 9, !dbg !86
  %1220 = extractelement <16 x float> %1209, i64 10, !dbg !86
  %1221 = extractelement <16 x float> %1209, i64 11, !dbg !86
  %1222 = extractelement <16 x float> %1209, i64 12, !dbg !86
  %1223 = extractelement <16 x float> %1209, i64 13, !dbg !86
  %1224 = extractelement <16 x float> %1209, i64 14, !dbg !86
  %1225 = extractelement <16 x float> %1209, i64 15, !dbg !86
  %1226 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1083, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %1227 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1088, <8 x bfloat> %179, <16 x float> %1226, i32 0, i32 0, i32 0), !dbg !86
  %1228 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1093, <8 x bfloat> %182, <16 x float> %1227, i32 0, i32 0, i32 0), !dbg !86
  %1229 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1098, <8 x bfloat> %185, <16 x float> %1228, i32 0, i32 0, i32 0), !dbg !86
  %1230 = extractelement <16 x float> %1229, i64 0, !dbg !86
  %1231 = extractelement <16 x float> %1229, i64 1, !dbg !86
  %1232 = extractelement <16 x float> %1229, i64 2, !dbg !86
  %1233 = extractelement <16 x float> %1229, i64 3, !dbg !86
  %1234 = extractelement <16 x float> %1229, i64 4, !dbg !86
  %1235 = extractelement <16 x float> %1229, i64 5, !dbg !86
  %1236 = extractelement <16 x float> %1229, i64 6, !dbg !86
  %1237 = extractelement <16 x float> %1229, i64 7, !dbg !86
  %1238 = extractelement <16 x float> %1229, i64 8, !dbg !86
  %1239 = extractelement <16 x float> %1229, i64 9, !dbg !86
  %1240 = extractelement <16 x float> %1229, i64 10, !dbg !86
  %1241 = extractelement <16 x float> %1229, i64 11, !dbg !86
  %1242 = extractelement <16 x float> %1229, i64 12, !dbg !86
  %1243 = extractelement <16 x float> %1229, i64 13, !dbg !86
  %1244 = extractelement <16 x float> %1229, i64 14, !dbg !86
  %1245 = extractelement <16 x float> %1229, i64 15, !dbg !86
  br label %1246, !dbg !86

1246:                                             ; preds = %1205, %._crit_edge116
  %1247 = phi float [ %1210, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1248 = phi float [ %1211, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1249 = phi float [ %1212, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1250 = phi float [ %1213, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1251 = phi float [ %1214, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1252 = phi float [ %1215, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1253 = phi float [ %1216, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1254 = phi float [ %1217, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1255 = phi float [ %1218, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1256 = phi float [ %1219, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1257 = phi float [ %1220, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1258 = phi float [ %1221, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1259 = phi float [ %1222, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1260 = phi float [ %1223, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1261 = phi float [ %1224, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1262 = phi float [ %1225, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1263 = phi float [ %1230, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1264 = phi float [ %1231, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1265 = phi float [ %1232, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1266 = phi float [ %1233, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1267 = phi float [ %1234, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1268 = phi float [ %1235, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1269 = phi float [ %1236, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1270 = phi float [ %1237, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1271 = phi float [ %1238, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1272 = phi float [ %1239, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1273 = phi float [ %1240, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1274 = phi float [ %1241, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1275 = phi float [ %1242, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1276 = phi float [ %1243, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1277 = phi float [ %1244, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1278 = phi float [ %1245, %1205 ], [ 0.000000e+00, %._crit_edge116 ], !dbg !86
  %1279 = fmul float %7, %1247, !dbg !87
  %1280 = fmul float %7, %1248, !dbg !87
  %1281 = fmul float %7, %1249, !dbg !87
  %1282 = fmul float %7, %1250, !dbg !87
  %1283 = fmul float %7, %1251, !dbg !87
  %1284 = fmul float %7, %1252, !dbg !87
  %1285 = fmul float %7, %1253, !dbg !87
  %1286 = fmul float %7, %1254, !dbg !87
  %1287 = fmul float %7, %1255, !dbg !87
  %1288 = fmul float %7, %1256, !dbg !87
  %1289 = fmul float %7, %1257, !dbg !87
  %1290 = fmul float %7, %1258, !dbg !87
  %1291 = fmul float %7, %1259, !dbg !87
  %1292 = fmul float %7, %1260, !dbg !87
  %1293 = fmul float %7, %1261, !dbg !87
  %1294 = fmul float %7, %1262, !dbg !87
  %1295 = fmul float %7, %1263, !dbg !87
  %1296 = fmul float %7, %1264, !dbg !87
  %1297 = fmul float %7, %1265, !dbg !87
  %1298 = fmul float %7, %1266, !dbg !87
  %1299 = fmul float %7, %1267, !dbg !87
  %1300 = fmul float %7, %1268, !dbg !87
  %1301 = fmul float %7, %1269, !dbg !87
  %1302 = fmul float %7, %1270, !dbg !87
  %1303 = fmul float %7, %1271, !dbg !87
  %1304 = fmul float %7, %1272, !dbg !87
  %1305 = fmul float %7, %1273, !dbg !87
  %1306 = fmul float %7, %1274, !dbg !87
  %1307 = fmul float %7, %1275, !dbg !87
  %1308 = fmul float %7, %1276, !dbg !87
  %1309 = fmul float %7, %1277, !dbg !87
  %1310 = fmul float %7, %1278, !dbg !87
  %1311 = fadd float %1279, 0.000000e+00, !dbg !88
  %1312 = fadd float %1280, 0.000000e+00, !dbg !88
  %1313 = fadd float %1281, 0.000000e+00, !dbg !88
  %1314 = fadd float %1282, 0.000000e+00, !dbg !88
  %1315 = fadd float %1283, 0.000000e+00, !dbg !88
  %1316 = fadd float %1284, 0.000000e+00, !dbg !88
  %1317 = fadd float %1285, 0.000000e+00, !dbg !88
  %1318 = fadd float %1286, 0.000000e+00, !dbg !88
  %1319 = fadd float %1287, 0.000000e+00, !dbg !88
  %1320 = fadd float %1288, 0.000000e+00, !dbg !88
  %1321 = fadd float %1289, 0.000000e+00, !dbg !88
  %1322 = fadd float %1290, 0.000000e+00, !dbg !88
  %1323 = fadd float %1291, 0.000000e+00, !dbg !88
  %1324 = fadd float %1292, 0.000000e+00, !dbg !88
  %1325 = fadd float %1293, 0.000000e+00, !dbg !88
  %1326 = fadd float %1294, 0.000000e+00, !dbg !88
  %1327 = fadd float %1295, 0.000000e+00, !dbg !88
  %1328 = fadd float %1296, 0.000000e+00, !dbg !88
  %1329 = fadd float %1297, 0.000000e+00, !dbg !88
  %1330 = fadd float %1298, 0.000000e+00, !dbg !88
  %1331 = fadd float %1299, 0.000000e+00, !dbg !88
  %1332 = fadd float %1300, 0.000000e+00, !dbg !88
  %1333 = fadd float %1301, 0.000000e+00, !dbg !88
  %1334 = fadd float %1302, 0.000000e+00, !dbg !88
  %1335 = fadd float %1303, 0.000000e+00, !dbg !88
  %1336 = fadd float %1304, 0.000000e+00, !dbg !88
  %1337 = fadd float %1305, 0.000000e+00, !dbg !88
  %1338 = fadd float %1306, 0.000000e+00, !dbg !88
  %1339 = fadd float %1307, 0.000000e+00, !dbg !88
  %1340 = fadd float %1308, 0.000000e+00, !dbg !88
  %1341 = fadd float %1309, 0.000000e+00, !dbg !88
  %1342 = fadd float %1310, 0.000000e+00, !dbg !88
  %1343 = and i1 %223, %1173, !dbg !89
  %1344 = and i1 %223, %1174, !dbg !89
  %1345 = and i1 %223, %1175, !dbg !89
  %1346 = and i1 %223, %1176, !dbg !89
  %1347 = and i1 %223, %1177, !dbg !89
  %1348 = and i1 %223, %1178, !dbg !89
  %1349 = and i1 %223, %1179, !dbg !89
  %1350 = and i1 %223, %1180, !dbg !89
  %1351 = and i1 %223, %1181, !dbg !89
  %1352 = and i1 %223, %1182, !dbg !89
  %1353 = and i1 %223, %1183, !dbg !89
  %1354 = and i1 %223, %1184, !dbg !89
  %1355 = and i1 %223, %1185, !dbg !89
  %1356 = and i1 %223, %1186, !dbg !89
  %1357 = and i1 %223, %1187, !dbg !89
  %1358 = and i1 %223, %1188, !dbg !89
  %1359 = and i1 %223, %1189, !dbg !89
  %1360 = and i1 %223, %1190, !dbg !89
  %1361 = and i1 %223, %1191, !dbg !89
  %1362 = and i1 %223, %1192, !dbg !89
  %1363 = and i1 %223, %1193, !dbg !89
  %1364 = and i1 %223, %1194, !dbg !89
  %1365 = and i1 %223, %1195, !dbg !89
  %1366 = and i1 %223, %1196, !dbg !89
  %1367 = and i1 %223, %1197, !dbg !89
  %1368 = and i1 %223, %1198, !dbg !89
  %1369 = and i1 %223, %1199, !dbg !89
  %1370 = and i1 %223, %1200, !dbg !89
  %1371 = and i1 %223, %1201, !dbg !89
  %1372 = and i1 %223, %1202, !dbg !89
  %1373 = and i1 %223, %1203, !dbg !89
  %1374 = and i1 %223, %1204, !dbg !89
  %1375 = select i1 %1343, float %1311, float 0xFFF0000000000000, !dbg !90
  %1376 = select i1 %1344, float %1312, float 0xFFF0000000000000, !dbg !90
  %1377 = select i1 %1345, float %1313, float 0xFFF0000000000000, !dbg !90
  %1378 = select i1 %1346, float %1314, float 0xFFF0000000000000, !dbg !90
  %1379 = select i1 %1347, float %1315, float 0xFFF0000000000000, !dbg !90
  %1380 = select i1 %1348, float %1316, float 0xFFF0000000000000, !dbg !90
  %1381 = select i1 %1349, float %1317, float 0xFFF0000000000000, !dbg !90
  %1382 = select i1 %1350, float %1318, float 0xFFF0000000000000, !dbg !90
  %1383 = select i1 %1351, float %1319, float 0xFFF0000000000000, !dbg !90
  %1384 = select i1 %1352, float %1320, float 0xFFF0000000000000, !dbg !90
  %1385 = select i1 %1353, float %1321, float 0xFFF0000000000000, !dbg !90
  %1386 = select i1 %1354, float %1322, float 0xFFF0000000000000, !dbg !90
  %1387 = select i1 %1355, float %1323, float 0xFFF0000000000000, !dbg !90
  %1388 = select i1 %1356, float %1324, float 0xFFF0000000000000, !dbg !90
  %1389 = select i1 %1357, float %1325, float 0xFFF0000000000000, !dbg !90
  %1390 = select i1 %1358, float %1326, float 0xFFF0000000000000, !dbg !90
  %1391 = select i1 %1359, float %1327, float 0xFFF0000000000000, !dbg !90
  %1392 = select i1 %1360, float %1328, float 0xFFF0000000000000, !dbg !90
  %1393 = select i1 %1361, float %1329, float 0xFFF0000000000000, !dbg !90
  %1394 = select i1 %1362, float %1330, float 0xFFF0000000000000, !dbg !90
  %1395 = select i1 %1363, float %1331, float 0xFFF0000000000000, !dbg !90
  %1396 = select i1 %1364, float %1332, float 0xFFF0000000000000, !dbg !90
  %1397 = select i1 %1365, float %1333, float 0xFFF0000000000000, !dbg !90
  %1398 = select i1 %1366, float %1334, float 0xFFF0000000000000, !dbg !90
  %1399 = select i1 %1367, float %1335, float 0xFFF0000000000000, !dbg !90
  %1400 = select i1 %1368, float %1336, float 0xFFF0000000000000, !dbg !90
  %1401 = select i1 %1369, float %1337, float 0xFFF0000000000000, !dbg !90
  %1402 = select i1 %1370, float %1338, float 0xFFF0000000000000, !dbg !90
  %1403 = select i1 %1371, float %1339, float 0xFFF0000000000000, !dbg !90
  %1404 = select i1 %1372, float %1340, float 0xFFF0000000000000, !dbg !90
  %1405 = select i1 %1373, float %1341, float 0xFFF0000000000000, !dbg !90
  %1406 = select i1 %1374, float %1342, float 0xFFF0000000000000, !dbg !90
  %1407 = tail call float @llvm.maxnum.f32(float %1375, float %1376), !dbg !91
  %1408 = tail call float @llvm.maxnum.f32(float %1407, float %1377), !dbg !91
  %1409 = tail call float @llvm.maxnum.f32(float %1408, float %1378), !dbg !91
  %1410 = tail call float @llvm.maxnum.f32(float %1409, float %1379), !dbg !91
  %1411 = tail call float @llvm.maxnum.f32(float %1410, float %1380), !dbg !91
  %1412 = tail call float @llvm.maxnum.f32(float %1411, float %1381), !dbg !91
  %1413 = tail call float @llvm.maxnum.f32(float %1412, float %1382), !dbg !91
  %1414 = tail call float @llvm.maxnum.f32(float %1413, float %1383), !dbg !91
  %1415 = tail call float @llvm.maxnum.f32(float %1414, float %1384), !dbg !91
  %1416 = tail call float @llvm.maxnum.f32(float %1415, float %1385), !dbg !91
  %1417 = tail call float @llvm.maxnum.f32(float %1416, float %1386), !dbg !91
  %1418 = tail call float @llvm.maxnum.f32(float %1417, float %1387), !dbg !91
  %1419 = tail call float @llvm.maxnum.f32(float %1418, float %1388), !dbg !91
  %1420 = tail call float @llvm.maxnum.f32(float %1419, float %1389), !dbg !91
  %1421 = tail call float @llvm.maxnum.f32(float %1420, float %1390), !dbg !91
  %1422 = tail call float @llvm.maxnum.f32(float %1421, float %1391), !dbg !91
  %1423 = tail call float @llvm.maxnum.f32(float %1422, float %1392), !dbg !91
  %1424 = tail call float @llvm.maxnum.f32(float %1423, float %1393), !dbg !91
  %1425 = tail call float @llvm.maxnum.f32(float %1424, float %1394), !dbg !91
  %1426 = tail call float @llvm.maxnum.f32(float %1425, float %1395), !dbg !91
  %1427 = tail call float @llvm.maxnum.f32(float %1426, float %1396), !dbg !91
  %1428 = tail call float @llvm.maxnum.f32(float %1427, float %1397), !dbg !91
  %1429 = tail call float @llvm.maxnum.f32(float %1428, float %1398), !dbg !91
  %1430 = tail call float @llvm.maxnum.f32(float %1429, float %1399), !dbg !91
  %1431 = tail call float @llvm.maxnum.f32(float %1430, float %1400), !dbg !91
  %1432 = tail call float @llvm.maxnum.f32(float %1431, float %1401), !dbg !91
  %1433 = tail call float @llvm.maxnum.f32(float %1432, float %1402), !dbg !91
  %1434 = tail call float @llvm.maxnum.f32(float %1433, float %1403), !dbg !91
  %1435 = tail call float @llvm.maxnum.f32(float %1434, float %1404), !dbg !91
  %1436 = tail call float @llvm.maxnum.f32(float %1435, float %1405), !dbg !91
  %1437 = tail call float @llvm.maxnum.f32(float %1436, float %1406), !dbg !91
  %1438 = bitcast float %1437 to i32, !dbg !95
  %1439 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1438, i32 %1438, i1 false, i1 false), !dbg !95
  %1440 = extractvalue { i32, i32 } %1439, 0, !dbg !95
  %1441 = extractvalue { i32, i32 } %1439, 1, !dbg !95
  %1442 = bitcast i32 %1440 to float, !dbg !95
  %1443 = bitcast i32 %1441 to float, !dbg !95
  %1444 = tail call float @llvm.maxnum.f32(float %1442, float %1443), !dbg !91
  %1445 = tail call float @llvm.maxnum.f32(float %.pn6.lcssa, float %1444), !dbg !96
  %1446 = fcmp one float %1445, 0xFFF0000000000000, !dbg !97
  %1447 = select i1 %1446, float %1445, float 0.000000e+00, !dbg !98
  %1448 = fsub float %1375, %1447, !dbg !99
  %1449 = fsub float %1376, %1447, !dbg !99
  %1450 = fsub float %1377, %1447, !dbg !99
  %1451 = fsub float %1378, %1447, !dbg !99
  %1452 = fsub float %1379, %1447, !dbg !99
  %1453 = fsub float %1380, %1447, !dbg !99
  %1454 = fsub float %1381, %1447, !dbg !99
  %1455 = fsub float %1382, %1447, !dbg !99
  %1456 = fsub float %1383, %1447, !dbg !99
  %1457 = fsub float %1384, %1447, !dbg !99
  %1458 = fsub float %1385, %1447, !dbg !99
  %1459 = fsub float %1386, %1447, !dbg !99
  %1460 = fsub float %1387, %1447, !dbg !99
  %1461 = fsub float %1388, %1447, !dbg !99
  %1462 = fsub float %1389, %1447, !dbg !99
  %1463 = fsub float %1390, %1447, !dbg !99
  %1464 = fsub float %1391, %1447, !dbg !99
  %1465 = fsub float %1392, %1447, !dbg !99
  %1466 = fsub float %1393, %1447, !dbg !99
  %1467 = fsub float %1394, %1447, !dbg !99
  %1468 = fsub float %1395, %1447, !dbg !99
  %1469 = fsub float %1396, %1447, !dbg !99
  %1470 = fsub float %1397, %1447, !dbg !99
  %1471 = fsub float %1398, %1447, !dbg !99
  %1472 = fsub float %1399, %1447, !dbg !99
  %1473 = fsub float %1400, %1447, !dbg !99
  %1474 = fsub float %1401, %1447, !dbg !99
  %1475 = fsub float %1402, %1447, !dbg !99
  %1476 = fsub float %1403, %1447, !dbg !99
  %1477 = fsub float %1404, %1447, !dbg !99
  %1478 = fsub float %1405, %1447, !dbg !99
  %1479 = fsub float %1406, %1447, !dbg !99
  %1480 = fmul float %1448, 0x3FF7154760000000, !dbg !100
  %1481 = tail call float @llvm.exp2.f32(float %1480), !dbg !100
  %1482 = fmul float %1449, 0x3FF7154760000000, !dbg !100
  %1483 = tail call float @llvm.exp2.f32(float %1482), !dbg !100
  %1484 = fmul float %1450, 0x3FF7154760000000, !dbg !100
  %1485 = tail call float @llvm.exp2.f32(float %1484), !dbg !100
  %1486 = fmul float %1451, 0x3FF7154760000000, !dbg !100
  %1487 = tail call float @llvm.exp2.f32(float %1486), !dbg !100
  %1488 = fmul float %1452, 0x3FF7154760000000, !dbg !100
  %1489 = tail call float @llvm.exp2.f32(float %1488), !dbg !100
  %1490 = fmul float %1453, 0x3FF7154760000000, !dbg !100
  %1491 = tail call float @llvm.exp2.f32(float %1490), !dbg !100
  %1492 = fmul float %1454, 0x3FF7154760000000, !dbg !100
  %1493 = tail call float @llvm.exp2.f32(float %1492), !dbg !100
  %1494 = fmul float %1455, 0x3FF7154760000000, !dbg !100
  %1495 = tail call float @llvm.exp2.f32(float %1494), !dbg !100
  %1496 = fmul float %1456, 0x3FF7154760000000, !dbg !100
  %1497 = tail call float @llvm.exp2.f32(float %1496), !dbg !100
  %1498 = fmul float %1457, 0x3FF7154760000000, !dbg !100
  %1499 = tail call float @llvm.exp2.f32(float %1498), !dbg !100
  %1500 = fmul float %1458, 0x3FF7154760000000, !dbg !100
  %1501 = tail call float @llvm.exp2.f32(float %1500), !dbg !100
  %1502 = fmul float %1459, 0x3FF7154760000000, !dbg !100
  %1503 = tail call float @llvm.exp2.f32(float %1502), !dbg !100
  %1504 = fmul float %1460, 0x3FF7154760000000, !dbg !100
  %1505 = tail call float @llvm.exp2.f32(float %1504), !dbg !100
  %1506 = fmul float %1461, 0x3FF7154760000000, !dbg !100
  %1507 = tail call float @llvm.exp2.f32(float %1506), !dbg !100
  %1508 = fmul float %1462, 0x3FF7154760000000, !dbg !100
  %1509 = tail call float @llvm.exp2.f32(float %1508), !dbg !100
  %1510 = fmul float %1463, 0x3FF7154760000000, !dbg !100
  %1511 = tail call float @llvm.exp2.f32(float %1510), !dbg !100
  %1512 = fmul float %1464, 0x3FF7154760000000, !dbg !100
  %1513 = tail call float @llvm.exp2.f32(float %1512), !dbg !100
  %1514 = fmul float %1465, 0x3FF7154760000000, !dbg !100
  %1515 = tail call float @llvm.exp2.f32(float %1514), !dbg !100
  %1516 = fmul float %1466, 0x3FF7154760000000, !dbg !100
  %1517 = tail call float @llvm.exp2.f32(float %1516), !dbg !100
  %1518 = fmul float %1467, 0x3FF7154760000000, !dbg !100
  %1519 = tail call float @llvm.exp2.f32(float %1518), !dbg !100
  %1520 = fmul float %1468, 0x3FF7154760000000, !dbg !100
  %1521 = tail call float @llvm.exp2.f32(float %1520), !dbg !100
  %1522 = fmul float %1469, 0x3FF7154760000000, !dbg !100
  %1523 = tail call float @llvm.exp2.f32(float %1522), !dbg !100
  %1524 = fmul float %1470, 0x3FF7154760000000, !dbg !100
  %1525 = tail call float @llvm.exp2.f32(float %1524), !dbg !100
  %1526 = fmul float %1471, 0x3FF7154760000000, !dbg !100
  %1527 = tail call float @llvm.exp2.f32(float %1526), !dbg !100
  %1528 = fmul float %1472, 0x3FF7154760000000, !dbg !100
  %1529 = tail call float @llvm.exp2.f32(float %1528), !dbg !100
  %1530 = fmul float %1473, 0x3FF7154760000000, !dbg !100
  %1531 = tail call float @llvm.exp2.f32(float %1530), !dbg !100
  %1532 = fmul float %1474, 0x3FF7154760000000, !dbg !100
  %1533 = tail call float @llvm.exp2.f32(float %1532), !dbg !100
  %1534 = fmul float %1475, 0x3FF7154760000000, !dbg !100
  %1535 = tail call float @llvm.exp2.f32(float %1534), !dbg !100
  %1536 = fmul float %1476, 0x3FF7154760000000, !dbg !100
  %1537 = tail call float @llvm.exp2.f32(float %1536), !dbg !100
  %1538 = fmul float %1477, 0x3FF7154760000000, !dbg !100
  %1539 = tail call float @llvm.exp2.f32(float %1538), !dbg !100
  %1540 = fmul float %1478, 0x3FF7154760000000, !dbg !100
  %1541 = tail call float @llvm.exp2.f32(float %1540), !dbg !100
  %1542 = fmul float %1479, 0x3FF7154760000000, !dbg !100
  %1543 = tail call float @llvm.exp2.f32(float %1542), !dbg !100
  %1544 = fadd float %1481, %1483, !dbg !101
  %1545 = fadd float %1485, %1544, !dbg !101
  %1546 = fadd float %1487, %1545, !dbg !101
  %1547 = fadd float %1489, %1546, !dbg !101
  %1548 = fadd float %1491, %1547, !dbg !101
  %1549 = fadd float %1493, %1548, !dbg !101
  %1550 = fadd float %1495, %1549, !dbg !101
  %1551 = fadd float %1497, %1550, !dbg !101
  %1552 = fadd float %1499, %1551, !dbg !101
  %1553 = fadd float %1501, %1552, !dbg !101
  %1554 = fadd float %1503, %1553, !dbg !101
  %1555 = fadd float %1505, %1554, !dbg !101
  %1556 = fadd float %1507, %1555, !dbg !101
  %1557 = fadd float %1509, %1556, !dbg !101
  %1558 = fadd float %1511, %1557, !dbg !101
  %1559 = fadd float %1513, %1558, !dbg !101
  %1560 = fadd float %1515, %1559, !dbg !101
  %1561 = fadd float %1517, %1560, !dbg !101
  %1562 = fadd float %1519, %1561, !dbg !101
  %1563 = fadd float %1521, %1562, !dbg !101
  %1564 = fadd float %1523, %1563, !dbg !101
  %1565 = fadd float %1525, %1564, !dbg !101
  %1566 = fadd float %1527, %1565, !dbg !101
  %1567 = fadd float %1529, %1566, !dbg !101
  %1568 = fadd float %1531, %1567, !dbg !101
  %1569 = fadd float %1533, %1568, !dbg !101
  %1570 = fadd float %1535, %1569, !dbg !101
  %1571 = fadd float %1537, %1570, !dbg !101
  %1572 = fadd float %1539, %1571, !dbg !101
  %1573 = fadd float %1541, %1572, !dbg !101
  %1574 = fadd float %1543, %1573, !dbg !101
  %1575 = bitcast float %1574 to i32, !dbg !103
  %1576 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1575, i32 %1575, i1 false, i1 false), !dbg !103
  %1577 = fsub float %.pn6.lcssa, %1447, !dbg !104
  %1578 = fmul float %1577, 0x3FF7154760000000, !dbg !105
  %1579 = tail call float @llvm.exp2.f32(float %1578), !dbg !105
  %1580 = shl nuw nsw i32 %61, 2, !dbg !106
  %1581 = shl nuw nsw i32 %67, 1, !dbg !106
  %1582 = or disjoint i32 %1580, %1581, !dbg !106
  %1583 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1582, !dbg !106
  %1584 = insertelement <1 x float> poison, float %1579, i64 0, !dbg !106
  store <1 x float> %1584, ptr addrspace(3) %1583, align 4, !dbg !106
  fence syncscope("workgroup") release, !dbg !106
  tail call void @llvm.amdgcn.s.barrier(), !dbg !106
  fence syncscope("workgroup") acquire, !dbg !106
  %1585 = or disjoint i32 %1580, %62, !dbg !106
  %1586 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1585, !dbg !106
  %1587 = load <1 x float>, ptr addrspace(3) %1586, align 4, !dbg !106
  %1588 = insertelement <2 x float> poison, float %1481, i64 0, !dbg !109
  %1589 = insertelement <2 x float> %1588, float %1483, i64 1, !dbg !109
  %1590 = fptrunc <2 x float> %1589 to <2 x bfloat>, !dbg !109
  %1591 = insertelement <2 x float> poison, float %1485, i64 0, !dbg !109
  %1592 = insertelement <2 x float> %1591, float %1487, i64 1, !dbg !109
  %1593 = fptrunc <2 x float> %1592 to <2 x bfloat>, !dbg !109
  %1594 = insertelement <2 x float> poison, float %1489, i64 0, !dbg !109
  %1595 = insertelement <2 x float> %1594, float %1491, i64 1, !dbg !109
  %1596 = fptrunc <2 x float> %1595 to <2 x bfloat>, !dbg !109
  %1597 = insertelement <2 x float> poison, float %1493, i64 0, !dbg !109
  %1598 = insertelement <2 x float> %1597, float %1495, i64 1, !dbg !109
  %1599 = fptrunc <2 x float> %1598 to <2 x bfloat>, !dbg !109
  %1600 = insertelement <2 x float> poison, float %1497, i64 0, !dbg !109
  %1601 = insertelement <2 x float> %1600, float %1499, i64 1, !dbg !109
  %1602 = fptrunc <2 x float> %1601 to <2 x bfloat>, !dbg !109
  %1603 = insertelement <2 x float> poison, float %1501, i64 0, !dbg !109
  %1604 = insertelement <2 x float> %1603, float %1503, i64 1, !dbg !109
  %1605 = fptrunc <2 x float> %1604 to <2 x bfloat>, !dbg !109
  %1606 = insertelement <2 x float> poison, float %1505, i64 0, !dbg !109
  %1607 = insertelement <2 x float> %1606, float %1507, i64 1, !dbg !109
  %1608 = fptrunc <2 x float> %1607 to <2 x bfloat>, !dbg !109
  %1609 = insertelement <2 x float> poison, float %1509, i64 0, !dbg !109
  %1610 = insertelement <2 x float> %1609, float %1511, i64 1, !dbg !109
  %1611 = fptrunc <2 x float> %1610 to <2 x bfloat>, !dbg !109
  %1612 = insertelement <2 x float> poison, float %1513, i64 0, !dbg !109
  %1613 = insertelement <2 x float> %1612, float %1515, i64 1, !dbg !109
  %1614 = fptrunc <2 x float> %1613 to <2 x bfloat>, !dbg !109
  %1615 = insertelement <2 x float> poison, float %1517, i64 0, !dbg !109
  %1616 = insertelement <2 x float> %1615, float %1519, i64 1, !dbg !109
  %1617 = fptrunc <2 x float> %1616 to <2 x bfloat>, !dbg !109
  %1618 = insertelement <2 x float> poison, float %1521, i64 0, !dbg !109
  %1619 = insertelement <2 x float> %1618, float %1523, i64 1, !dbg !109
  %1620 = fptrunc <2 x float> %1619 to <2 x bfloat>, !dbg !109
  %1621 = insertelement <2 x float> poison, float %1525, i64 0, !dbg !109
  %1622 = insertelement <2 x float> %1621, float %1527, i64 1, !dbg !109
  %1623 = fptrunc <2 x float> %1622 to <2 x bfloat>, !dbg !109
  %1624 = insertelement <2 x float> poison, float %1529, i64 0, !dbg !109
  %1625 = insertelement <2 x float> %1624, float %1531, i64 1, !dbg !109
  %1626 = fptrunc <2 x float> %1625 to <2 x bfloat>, !dbg !109
  %1627 = insertelement <2 x float> poison, float %1533, i64 0, !dbg !109
  %1628 = insertelement <2 x float> %1627, float %1535, i64 1, !dbg !109
  %1629 = fptrunc <2 x float> %1628 to <2 x bfloat>, !dbg !109
  %1630 = insertelement <2 x float> poison, float %1537, i64 0, !dbg !109
  %1631 = insertelement <2 x float> %1630, float %1539, i64 1, !dbg !109
  %1632 = fptrunc <2 x float> %1631 to <2 x bfloat>, !dbg !109
  %1633 = insertelement <2 x float> poison, float %1541, i64 0, !dbg !109
  %1634 = insertelement <2 x float> %1633, float %1543, i64 1, !dbg !109
  %1635 = fptrunc <2 x float> %1634 to <2 x bfloat>, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %1636 = select i1 %70, i32 0, i32 1056, !dbg !109
  %1637 = or disjoint i32 %68, %67, !dbg !109
  %1638 = xor i32 %1637, %1636, !dbg !109
  %1639 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1638, !dbg !109
  %1640 = shufflevector <2 x bfloat> %1590, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1640, ptr addrspace(3) %1639, align 2, !dbg !109
  %1641 = getelementptr inbounds nuw i8, ptr addrspace(3) %1639, i32 4096, !dbg !109
  %1642 = shufflevector <2 x bfloat> %1602, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1642, ptr addrspace(3) %1641, align 2, !dbg !109
  %1643 = getelementptr inbounds nuw i8, ptr addrspace(3) %1639, i32 8192, !dbg !109
  %1644 = shufflevector <2 x bfloat> %1614, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1644, ptr addrspace(3) %1643, align 2, !dbg !109
  %1645 = getelementptr inbounds nuw i8, ptr addrspace(3) %1639, i32 12288, !dbg !109
  %1646 = shufflevector <2 x bfloat> %1626, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1646, ptr addrspace(3) %1645, align 2, !dbg !109
  %1647 = xor i32 %1638, 264, !dbg !109
  %1648 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1647, !dbg !109
  %1649 = shufflevector <2 x bfloat> %1590, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1649, ptr addrspace(3) %1648, align 2, !dbg !109
  %1650 = getelementptr inbounds nuw i8, ptr addrspace(3) %1648, i32 4096, !dbg !109
  %1651 = shufflevector <2 x bfloat> %1602, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1651, ptr addrspace(3) %1650, align 2, !dbg !109
  %1652 = getelementptr inbounds nuw i8, ptr addrspace(3) %1648, i32 8192, !dbg !109
  %1653 = shufflevector <2 x bfloat> %1614, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1653, ptr addrspace(3) %1652, align 2, !dbg !109
  %1654 = getelementptr inbounds nuw i8, ptr addrspace(3) %1648, i32 12288, !dbg !109
  %1655 = shufflevector <2 x bfloat> %1626, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1655, ptr addrspace(3) %1654, align 2, !dbg !109
  %1656 = xor i32 %1638, 528, !dbg !109
  %1657 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1656, !dbg !109
  %1658 = shufflevector <2 x bfloat> %1593, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1658, ptr addrspace(3) %1657, align 2, !dbg !109
  %1659 = getelementptr inbounds nuw i8, ptr addrspace(3) %1657, i32 4096, !dbg !109
  %1660 = shufflevector <2 x bfloat> %1605, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1660, ptr addrspace(3) %1659, align 2, !dbg !109
  %1661 = getelementptr inbounds nuw i8, ptr addrspace(3) %1657, i32 8192, !dbg !109
  %1662 = shufflevector <2 x bfloat> %1617, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1662, ptr addrspace(3) %1661, align 2, !dbg !109
  %1663 = getelementptr inbounds nuw i8, ptr addrspace(3) %1657, i32 12288, !dbg !109
  %1664 = shufflevector <2 x bfloat> %1629, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1664, ptr addrspace(3) %1663, align 2, !dbg !109
  %1665 = xor i32 %1638, 792, !dbg !109
  %1666 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1665, !dbg !109
  %1667 = shufflevector <2 x bfloat> %1593, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1667, ptr addrspace(3) %1666, align 2, !dbg !109
  %1668 = getelementptr inbounds nuw i8, ptr addrspace(3) %1666, i32 4096, !dbg !109
  %1669 = shufflevector <2 x bfloat> %1605, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1669, ptr addrspace(3) %1668, align 2, !dbg !109
  %1670 = getelementptr inbounds nuw i8, ptr addrspace(3) %1666, i32 8192, !dbg !109
  %1671 = shufflevector <2 x bfloat> %1617, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1671, ptr addrspace(3) %1670, align 2, !dbg !109
  %1672 = getelementptr inbounds nuw i8, ptr addrspace(3) %1666, i32 12288, !dbg !109
  %1673 = shufflevector <2 x bfloat> %1629, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1673, ptr addrspace(3) %1672, align 2, !dbg !109
  %1674 = xor i32 %1638, 2112, !dbg !109
  %1675 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1674, !dbg !109
  %1676 = shufflevector <2 x bfloat> %1596, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1676, ptr addrspace(3) %1675, align 2, !dbg !109
  %1677 = getelementptr inbounds nuw i8, ptr addrspace(3) %1675, i32 4096, !dbg !109
  %1678 = shufflevector <2 x bfloat> %1608, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1678, ptr addrspace(3) %1677, align 2, !dbg !109
  %1679 = getelementptr inbounds nuw i8, ptr addrspace(3) %1675, i32 8192, !dbg !109
  %1680 = shufflevector <2 x bfloat> %1620, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1680, ptr addrspace(3) %1679, align 2, !dbg !109
  %1681 = getelementptr inbounds nuw i8, ptr addrspace(3) %1675, i32 12288, !dbg !109
  %1682 = shufflevector <2 x bfloat> %1632, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1682, ptr addrspace(3) %1681, align 2, !dbg !109
  %1683 = xor i32 %1638, 2376, !dbg !109
  %1684 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1683, !dbg !109
  %1685 = shufflevector <2 x bfloat> %1596, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1685, ptr addrspace(3) %1684, align 2, !dbg !109
  %1686 = getelementptr inbounds nuw i8, ptr addrspace(3) %1684, i32 4096, !dbg !109
  %1687 = shufflevector <2 x bfloat> %1608, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1687, ptr addrspace(3) %1686, align 2, !dbg !109
  %1688 = getelementptr inbounds nuw i8, ptr addrspace(3) %1684, i32 8192, !dbg !109
  %1689 = shufflevector <2 x bfloat> %1620, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1689, ptr addrspace(3) %1688, align 2, !dbg !109
  %1690 = getelementptr inbounds nuw i8, ptr addrspace(3) %1684, i32 12288, !dbg !109
  %1691 = shufflevector <2 x bfloat> %1632, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1691, ptr addrspace(3) %1690, align 2, !dbg !109
  %1692 = xor i32 %1638, 2640, !dbg !109
  %1693 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1692, !dbg !109
  %1694 = shufflevector <2 x bfloat> %1599, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1694, ptr addrspace(3) %1693, align 2, !dbg !109
  %1695 = getelementptr inbounds nuw i8, ptr addrspace(3) %1693, i32 4096, !dbg !109
  %1696 = shufflevector <2 x bfloat> %1611, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1696, ptr addrspace(3) %1695, align 2, !dbg !109
  %1697 = getelementptr inbounds nuw i8, ptr addrspace(3) %1693, i32 8192, !dbg !109
  %1698 = shufflevector <2 x bfloat> %1623, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1698, ptr addrspace(3) %1697, align 2, !dbg !109
  %1699 = getelementptr inbounds nuw i8, ptr addrspace(3) %1693, i32 12288, !dbg !109
  %1700 = shufflevector <2 x bfloat> %1635, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %1700, ptr addrspace(3) %1699, align 2, !dbg !109
  %1701 = xor i32 %1638, 2904, !dbg !109
  %1702 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1701, !dbg !109
  %1703 = shufflevector <2 x bfloat> %1599, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1703, ptr addrspace(3) %1702, align 2, !dbg !109
  %1704 = getelementptr inbounds nuw i8, ptr addrspace(3) %1702, i32 4096, !dbg !109
  %1705 = shufflevector <2 x bfloat> %1611, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1705, ptr addrspace(3) %1704, align 2, !dbg !109
  %1706 = getelementptr inbounds nuw i8, ptr addrspace(3) %1702, i32 8192, !dbg !109
  %1707 = shufflevector <2 x bfloat> %1623, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1707, ptr addrspace(3) %1706, align 2, !dbg !109
  %1708 = getelementptr inbounds nuw i8, ptr addrspace(3) %1702, i32 12288, !dbg !109
  %1709 = shufflevector <2 x bfloat> %1635, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %1709, ptr addrspace(3) %1708, align 2, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %1710 = shl nuw nsw i32 %347, 5, !dbg !109
  %1711 = and i32 %57, 28, !dbg !109
  %1712 = select i1 %70, i32 0, i32 528, !dbg !109
  %1713 = or disjoint i32 %1710, %350, !dbg !109
  %1714 = or disjoint i32 %63, %1711, !dbg !109
  %1715 = xor i32 %1713, %1714, !dbg !109
  %1716 = xor i32 %1715, %1712, !dbg !109
  %1717 = xor i32 %1716, 1056, !dbg !109
  %1718 = xor i32 %1716, 3104, !dbg !109
  %1719 = xor i32 %1716, 5152, !dbg !109
  %1720 = xor i32 %1716, 7200, !dbg !109
  %1721 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1716, !dbg !109
  %1722 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1717, !dbg !109
  %1723 = getelementptr inbounds nuw i8, ptr addrspace(3) %1721, i32 4096, !dbg !109
  %1724 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1718, !dbg !109
  %1725 = getelementptr inbounds nuw i8, ptr addrspace(3) %1721, i32 8192, !dbg !109
  %1726 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1719, !dbg !109
  %1727 = getelementptr inbounds nuw i8, ptr addrspace(3) %1721, i32 12288, !dbg !109
  %1728 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1720, !dbg !109
  %1729 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1721), !dbg !109
  %1730 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1722), !dbg !109
  %1731 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1723), !dbg !109
  %1732 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1724), !dbg !109
  %1733 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1725), !dbg !109
  %1734 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1726), !dbg !109
  %1735 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1727), !dbg !109
  %1736 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1728), !dbg !109
  br i1 %207, label %1737, label %1774, !dbg !110

1737:                                             ; preds = %1246
  %1738 = fmul float %.lcssa109, %1579, !dbg !107
  %1739 = extractvalue { i32, i32 } %1576, 0, !dbg !103
  %1740 = bitcast i32 %1739 to float, !dbg !103
  %1741 = extractvalue { i32, i32 } %1576, 1, !dbg !103
  %1742 = bitcast i32 %1741 to float, !dbg !103
  %1743 = fadd float %1740, %1742, !dbg !101
  %1744 = fadd float %1743, %1738, !dbg !108
  %1745 = shufflevector <4 x bfloat> %1729, <4 x bfloat> %1730, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1746 = shufflevector <4 x bfloat> %1731, <4 x bfloat> %1732, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1747 = shufflevector <4 x bfloat> %1733, <4 x bfloat> %1734, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1748 = shufflevector <4 x bfloat> %1735, <4 x bfloat> %1736, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1749 = shufflevector <4 x bfloat> %1132, <4 x bfloat> %1133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1750 = shufflevector <4 x bfloat> %1134, <4 x bfloat> %1135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1751 = shufflevector <4 x bfloat> %1136, <4 x bfloat> %1137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1752 = shufflevector <4 x bfloat> %1138, <4 x bfloat> %1139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1753 = shufflevector <2 x float> %1060, <2 x float> %1059, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1754 = shufflevector <2 x float> %1058, <2 x float> %1057, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1755 = shufflevector <2 x float> %1056, <2 x float> %1055, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1756 = shufflevector <2 x float> %1054, <2 x float> %1053, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %1757 = shufflevector <4 x float> %1753, <4 x float> %1754, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1758 = shufflevector <4 x float> %1755, <4 x float> %1756, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %1759 = shufflevector <8 x float> %1757, <8 x float> %1758, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !110
  %1760 = shufflevector <1 x float> %1587, <1 x float> poison, <16 x i32> zeroinitializer, !dbg !110
  %1761 = fmul <16 x float> %1759, %1760, !dbg !110
  %1762 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1749, <8 x bfloat> %1745, <16 x float> %1761, i32 0, i32 0, i32 0), !dbg !110
  %1763 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1750, <8 x bfloat> %1746, <16 x float> %1762, i32 0, i32 0, i32 0), !dbg !110
  %1764 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1751, <8 x bfloat> %1747, <16 x float> %1763, i32 0, i32 0, i32 0), !dbg !110
  %1765 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1752, <8 x bfloat> %1748, <16 x float> %1764, i32 0, i32 0, i32 0), !dbg !110
  %1766 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1767 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1768 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1769 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1770 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1771 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1772 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1773 = shufflevector <16 x float> %1765, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  br label %1774, !dbg !110

1774:                                             ; preds = %1737, %1246
  %1775 = phi float [ %1744, %1737 ], [ %.lcssa109, %1246 ]
  %1776 = phi float [ %1447, %1737 ], [ %.pn6.lcssa, %1246 ]
  %1777 = phi <2 x float> [ %1766, %1737 ], [ %1053, %1246 ]
  %1778 = phi <2 x float> [ %1767, %1737 ], [ %1054, %1246 ]
  %1779 = phi <2 x float> [ %1768, %1737 ], [ %1055, %1246 ]
  %1780 = phi <2 x float> [ %1769, %1737 ], [ %1056, %1246 ]
  %1781 = phi <2 x float> [ %1770, %1737 ], [ %1057, %1246 ]
  %1782 = phi <2 x float> [ %1771, %1737 ], [ %1058, %1246 ]
  %1783 = phi <2 x float> [ %1772, %1737 ], [ %1059, %1246 ]
  %1784 = phi <2 x float> [ %1773, %1737 ], [ %1060, %1246 ]
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49163), !dbg !74
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  %1785 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %357, !dbg !79
  %1786 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %358, !dbg !79
  %1787 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %1121, !dbg !79
  %1788 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %359, !dbg !79
  %1789 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %1122, !dbg !79
  %1790 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %360, !dbg !79
  %1791 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %1123, !dbg !79
  %1792 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %.lcssa, i32 %361, !dbg !79
  %1793 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1785), !dbg !79, !alias.scope !81, !noalias !75
  %1794 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1786), !dbg !79, !alias.scope !81, !noalias !75
  %1795 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1787), !dbg !79, !alias.scope !81, !noalias !75
  %1796 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1788), !dbg !79, !alias.scope !81, !noalias !75
  %1797 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1789), !dbg !79, !alias.scope !81, !noalias !75
  %1798 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1790), !dbg !79, !alias.scope !81, !noalias !75
  %1799 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1791), !dbg !79, !alias.scope !81, !noalias !75
  %1800 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1792), !dbg !79, !alias.scope !81, !noalias !75
  %1801 = add nuw nsw i32 %1140, 64, !dbg !83
  %1802 = or disjoint i32 %1801, %78, !dbg !84
  %1803 = or disjoint i32 %1801, %79, !dbg !84
  %1804 = or disjoint i32 %1801, %80, !dbg !84
  %1805 = or disjoint i32 %1801, %81, !dbg !84
  %1806 = or disjoint i32 %1801, %82, !dbg !84
  %1807 = or disjoint i32 %1801, %83, !dbg !84
  %1808 = or disjoint i32 %1801, %84, !dbg !84
  %1809 = or disjoint i32 %1801, %85, !dbg !84
  %1810 = or disjoint i32 %1801, %86, !dbg !84
  %1811 = or disjoint i32 %1801, %87, !dbg !84
  %1812 = or disjoint i32 %1801, %88, !dbg !84
  %1813 = or disjoint i32 %1801, %89, !dbg !84
  %1814 = or disjoint i32 %1801, %90, !dbg !84
  %1815 = or disjoint i32 %1801, %91, !dbg !84
  %1816 = or disjoint i32 %1801, %92, !dbg !84
  %1817 = or disjoint i32 %1801, %93, !dbg !84
  %1818 = or disjoint i32 %1801, %94, !dbg !84
  %1819 = or disjoint i32 %1801, %95, !dbg !84
  %1820 = or disjoint i32 %1801, %96, !dbg !84
  %1821 = or disjoint i32 %1801, %97, !dbg !84
  %1822 = or disjoint i32 %1801, %98, !dbg !84
  %1823 = or disjoint i32 %1801, %99, !dbg !84
  %1824 = or disjoint i32 %1801, %100, !dbg !84
  %1825 = or disjoint i32 %1801, %101, !dbg !84
  %1826 = or disjoint i32 %1801, %102, !dbg !84
  %1827 = or disjoint i32 %1801, %103, !dbg !84
  %1828 = or disjoint i32 %1801, %104, !dbg !84
  %1829 = or disjoint i32 %1801, %105, !dbg !84
  %1830 = or disjoint i32 %1801, %106, !dbg !84
  %1831 = or disjoint i32 %1801, %107, !dbg !84
  %1832 = or disjoint i32 %1801, %108, !dbg !84
  %1833 = or disjoint i32 %1801, %109, !dbg !84
  %1834 = icmp slt i32 %1802, %222, !dbg !85
  %1835 = icmp slt i32 %1803, %222, !dbg !85
  %1836 = icmp slt i32 %1804, %222, !dbg !85
  %1837 = icmp slt i32 %1805, %222, !dbg !85
  %1838 = icmp slt i32 %1806, %222, !dbg !85
  %1839 = icmp slt i32 %1807, %222, !dbg !85
  %1840 = icmp slt i32 %1808, %222, !dbg !85
  %1841 = icmp slt i32 %1809, %222, !dbg !85
  %1842 = icmp slt i32 %1810, %222, !dbg !85
  %1843 = icmp slt i32 %1811, %222, !dbg !85
  %1844 = icmp slt i32 %1812, %222, !dbg !85
  %1845 = icmp slt i32 %1813, %222, !dbg !85
  %1846 = icmp slt i32 %1814, %222, !dbg !85
  %1847 = icmp slt i32 %1815, %222, !dbg !85
  %1848 = icmp slt i32 %1816, %222, !dbg !85
  %1849 = icmp slt i32 %1817, %222, !dbg !85
  %1850 = icmp slt i32 %1818, %222, !dbg !85
  %1851 = icmp slt i32 %1819, %222, !dbg !85
  %1852 = icmp slt i32 %1820, %222, !dbg !85
  %1853 = icmp slt i32 %1821, %222, !dbg !85
  %1854 = icmp slt i32 %1822, %222, !dbg !85
  %1855 = icmp slt i32 %1823, %222, !dbg !85
  %1856 = icmp slt i32 %1824, %222, !dbg !85
  %1857 = icmp slt i32 %1825, %222, !dbg !85
  %1858 = icmp slt i32 %1826, %222, !dbg !85
  %1859 = icmp slt i32 %1827, %222, !dbg !85
  %1860 = icmp slt i32 %1828, %222, !dbg !85
  %1861 = icmp slt i32 %1829, %222, !dbg !85
  %1862 = icmp slt i32 %1830, %222, !dbg !85
  %1863 = icmp slt i32 %1831, %222, !dbg !85
  %1864 = icmp slt i32 %1832, %222, !dbg !85
  %1865 = icmp slt i32 %1833, %222, !dbg !85
  br i1 %224, label %1866, label %1923, !dbg !86

1866:                                             ; preds = %1774
  %1867 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %1096, !dbg !74
  %1868 = load <8 x bfloat>, ptr addrspace(3) %1867, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1869 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %346, !dbg !74
  %1870 = load <8 x bfloat>, ptr addrspace(3) %1869, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1871 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %1091, !dbg !74
  %1872 = load <8 x bfloat>, ptr addrspace(3) %1871, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1873 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %345, !dbg !74
  %1874 = load <8 x bfloat>, ptr addrspace(3) %1873, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1875 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %1086, !dbg !74
  %1876 = load <8 x bfloat>, ptr addrspace(3) %1875, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1877 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %344, !dbg !74
  %1878 = load <8 x bfloat>, ptr addrspace(3) %1877, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1879 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %1081, !dbg !74
  %1880 = load <8 x bfloat>, ptr addrspace(3) %1879, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1881 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa104, i32 %343, !dbg !74
  %1882 = load <8 x bfloat>, ptr addrspace(3) %1881, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %1883 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1882, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %1884 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1878, <8 x bfloat> %179, <16 x float> %1883, i32 0, i32 0, i32 0), !dbg !86
  %1885 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1874, <8 x bfloat> %182, <16 x float> %1884, i32 0, i32 0, i32 0), !dbg !86
  %1886 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1870, <8 x bfloat> %185, <16 x float> %1885, i32 0, i32 0, i32 0), !dbg !86
  %1887 = extractelement <16 x float> %1886, i64 0, !dbg !86
  %1888 = extractelement <16 x float> %1886, i64 1, !dbg !86
  %1889 = extractelement <16 x float> %1886, i64 2, !dbg !86
  %1890 = extractelement <16 x float> %1886, i64 3, !dbg !86
  %1891 = extractelement <16 x float> %1886, i64 4, !dbg !86
  %1892 = extractelement <16 x float> %1886, i64 5, !dbg !86
  %1893 = extractelement <16 x float> %1886, i64 6, !dbg !86
  %1894 = extractelement <16 x float> %1886, i64 7, !dbg !86
  %1895 = extractelement <16 x float> %1886, i64 8, !dbg !86
  %1896 = extractelement <16 x float> %1886, i64 9, !dbg !86
  %1897 = extractelement <16 x float> %1886, i64 10, !dbg !86
  %1898 = extractelement <16 x float> %1886, i64 11, !dbg !86
  %1899 = extractelement <16 x float> %1886, i64 12, !dbg !86
  %1900 = extractelement <16 x float> %1886, i64 13, !dbg !86
  %1901 = extractelement <16 x float> %1886, i64 14, !dbg !86
  %1902 = extractelement <16 x float> %1886, i64 15, !dbg !86
  %1903 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1880, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %1904 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1876, <8 x bfloat> %179, <16 x float> %1903, i32 0, i32 0, i32 0), !dbg !86
  %1905 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1872, <8 x bfloat> %182, <16 x float> %1904, i32 0, i32 0, i32 0), !dbg !86
  %1906 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1868, <8 x bfloat> %185, <16 x float> %1905, i32 0, i32 0, i32 0), !dbg !86
  %1907 = extractelement <16 x float> %1906, i64 0, !dbg !86
  %1908 = extractelement <16 x float> %1906, i64 1, !dbg !86
  %1909 = extractelement <16 x float> %1906, i64 2, !dbg !86
  %1910 = extractelement <16 x float> %1906, i64 3, !dbg !86
  %1911 = extractelement <16 x float> %1906, i64 4, !dbg !86
  %1912 = extractelement <16 x float> %1906, i64 5, !dbg !86
  %1913 = extractelement <16 x float> %1906, i64 6, !dbg !86
  %1914 = extractelement <16 x float> %1906, i64 7, !dbg !86
  %1915 = extractelement <16 x float> %1906, i64 8, !dbg !86
  %1916 = extractelement <16 x float> %1906, i64 9, !dbg !86
  %1917 = extractelement <16 x float> %1906, i64 10, !dbg !86
  %1918 = extractelement <16 x float> %1906, i64 11, !dbg !86
  %1919 = extractelement <16 x float> %1906, i64 12, !dbg !86
  %1920 = extractelement <16 x float> %1906, i64 13, !dbg !86
  %1921 = extractelement <16 x float> %1906, i64 14, !dbg !86
  %1922 = extractelement <16 x float> %1906, i64 15, !dbg !86
  br label %1923, !dbg !86

1923:                                             ; preds = %1866, %1774
  %1924 = phi float [ %1887, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1925 = phi float [ %1888, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1926 = phi float [ %1889, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1927 = phi float [ %1890, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1928 = phi float [ %1891, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1929 = phi float [ %1892, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1930 = phi float [ %1893, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1931 = phi float [ %1894, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1932 = phi float [ %1895, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1933 = phi float [ %1896, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1934 = phi float [ %1897, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1935 = phi float [ %1898, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1936 = phi float [ %1899, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1937 = phi float [ %1900, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1938 = phi float [ %1901, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1939 = phi float [ %1902, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1940 = phi float [ %1907, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1941 = phi float [ %1908, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1942 = phi float [ %1909, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1943 = phi float [ %1910, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1944 = phi float [ %1911, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1945 = phi float [ %1912, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1946 = phi float [ %1913, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1947 = phi float [ %1914, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1948 = phi float [ %1915, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1949 = phi float [ %1916, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1950 = phi float [ %1917, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1951 = phi float [ %1918, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1952 = phi float [ %1919, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1953 = phi float [ %1920, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1954 = phi float [ %1921, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1955 = phi float [ %1922, %1866 ], [ 0.000000e+00, %1774 ], !dbg !86
  %1956 = fmul float %7, %1924, !dbg !87
  %1957 = fmul float %7, %1925, !dbg !87
  %1958 = fmul float %7, %1926, !dbg !87
  %1959 = fmul float %7, %1927, !dbg !87
  %1960 = fmul float %7, %1928, !dbg !87
  %1961 = fmul float %7, %1929, !dbg !87
  %1962 = fmul float %7, %1930, !dbg !87
  %1963 = fmul float %7, %1931, !dbg !87
  %1964 = fmul float %7, %1932, !dbg !87
  %1965 = fmul float %7, %1933, !dbg !87
  %1966 = fmul float %7, %1934, !dbg !87
  %1967 = fmul float %7, %1935, !dbg !87
  %1968 = fmul float %7, %1936, !dbg !87
  %1969 = fmul float %7, %1937, !dbg !87
  %1970 = fmul float %7, %1938, !dbg !87
  %1971 = fmul float %7, %1939, !dbg !87
  %1972 = fmul float %7, %1940, !dbg !87
  %1973 = fmul float %7, %1941, !dbg !87
  %1974 = fmul float %7, %1942, !dbg !87
  %1975 = fmul float %7, %1943, !dbg !87
  %1976 = fmul float %7, %1944, !dbg !87
  %1977 = fmul float %7, %1945, !dbg !87
  %1978 = fmul float %7, %1946, !dbg !87
  %1979 = fmul float %7, %1947, !dbg !87
  %1980 = fmul float %7, %1948, !dbg !87
  %1981 = fmul float %7, %1949, !dbg !87
  %1982 = fmul float %7, %1950, !dbg !87
  %1983 = fmul float %7, %1951, !dbg !87
  %1984 = fmul float %7, %1952, !dbg !87
  %1985 = fmul float %7, %1953, !dbg !87
  %1986 = fmul float %7, %1954, !dbg !87
  %1987 = fmul float %7, %1955, !dbg !87
  %1988 = fadd float %1956, 0.000000e+00, !dbg !88
  %1989 = fadd float %1957, 0.000000e+00, !dbg !88
  %1990 = fadd float %1958, 0.000000e+00, !dbg !88
  %1991 = fadd float %1959, 0.000000e+00, !dbg !88
  %1992 = fadd float %1960, 0.000000e+00, !dbg !88
  %1993 = fadd float %1961, 0.000000e+00, !dbg !88
  %1994 = fadd float %1962, 0.000000e+00, !dbg !88
  %1995 = fadd float %1963, 0.000000e+00, !dbg !88
  %1996 = fadd float %1964, 0.000000e+00, !dbg !88
  %1997 = fadd float %1965, 0.000000e+00, !dbg !88
  %1998 = fadd float %1966, 0.000000e+00, !dbg !88
  %1999 = fadd float %1967, 0.000000e+00, !dbg !88
  %2000 = fadd float %1968, 0.000000e+00, !dbg !88
  %2001 = fadd float %1969, 0.000000e+00, !dbg !88
  %2002 = fadd float %1970, 0.000000e+00, !dbg !88
  %2003 = fadd float %1971, 0.000000e+00, !dbg !88
  %2004 = fadd float %1972, 0.000000e+00, !dbg !88
  %2005 = fadd float %1973, 0.000000e+00, !dbg !88
  %2006 = fadd float %1974, 0.000000e+00, !dbg !88
  %2007 = fadd float %1975, 0.000000e+00, !dbg !88
  %2008 = fadd float %1976, 0.000000e+00, !dbg !88
  %2009 = fadd float %1977, 0.000000e+00, !dbg !88
  %2010 = fadd float %1978, 0.000000e+00, !dbg !88
  %2011 = fadd float %1979, 0.000000e+00, !dbg !88
  %2012 = fadd float %1980, 0.000000e+00, !dbg !88
  %2013 = fadd float %1981, 0.000000e+00, !dbg !88
  %2014 = fadd float %1982, 0.000000e+00, !dbg !88
  %2015 = fadd float %1983, 0.000000e+00, !dbg !88
  %2016 = fadd float %1984, 0.000000e+00, !dbg !88
  %2017 = fadd float %1985, 0.000000e+00, !dbg !88
  %2018 = fadd float %1986, 0.000000e+00, !dbg !88
  %2019 = fadd float %1987, 0.000000e+00, !dbg !88
  %2020 = and i1 %223, %1834, !dbg !89
  %2021 = and i1 %223, %1835, !dbg !89
  %2022 = and i1 %223, %1836, !dbg !89
  %2023 = and i1 %223, %1837, !dbg !89
  %2024 = and i1 %223, %1838, !dbg !89
  %2025 = and i1 %223, %1839, !dbg !89
  %2026 = and i1 %223, %1840, !dbg !89
  %2027 = and i1 %223, %1841, !dbg !89
  %2028 = and i1 %223, %1842, !dbg !89
  %2029 = and i1 %223, %1843, !dbg !89
  %2030 = and i1 %223, %1844, !dbg !89
  %2031 = and i1 %223, %1845, !dbg !89
  %2032 = and i1 %223, %1846, !dbg !89
  %2033 = and i1 %223, %1847, !dbg !89
  %2034 = and i1 %223, %1848, !dbg !89
  %2035 = and i1 %223, %1849, !dbg !89
  %2036 = and i1 %223, %1850, !dbg !89
  %2037 = and i1 %223, %1851, !dbg !89
  %2038 = and i1 %223, %1852, !dbg !89
  %2039 = and i1 %223, %1853, !dbg !89
  %2040 = and i1 %223, %1854, !dbg !89
  %2041 = and i1 %223, %1855, !dbg !89
  %2042 = and i1 %223, %1856, !dbg !89
  %2043 = and i1 %223, %1857, !dbg !89
  %2044 = and i1 %223, %1858, !dbg !89
  %2045 = and i1 %223, %1859, !dbg !89
  %2046 = and i1 %223, %1860, !dbg !89
  %2047 = and i1 %223, %1861, !dbg !89
  %2048 = and i1 %223, %1862, !dbg !89
  %2049 = and i1 %223, %1863, !dbg !89
  %2050 = and i1 %223, %1864, !dbg !89
  %2051 = and i1 %223, %1865, !dbg !89
  %2052 = select i1 %2020, float %1988, float 0xFFF0000000000000, !dbg !90
  %2053 = select i1 %2021, float %1989, float 0xFFF0000000000000, !dbg !90
  %2054 = select i1 %2022, float %1990, float 0xFFF0000000000000, !dbg !90
  %2055 = select i1 %2023, float %1991, float 0xFFF0000000000000, !dbg !90
  %2056 = select i1 %2024, float %1992, float 0xFFF0000000000000, !dbg !90
  %2057 = select i1 %2025, float %1993, float 0xFFF0000000000000, !dbg !90
  %2058 = select i1 %2026, float %1994, float 0xFFF0000000000000, !dbg !90
  %2059 = select i1 %2027, float %1995, float 0xFFF0000000000000, !dbg !90
  %2060 = select i1 %2028, float %1996, float 0xFFF0000000000000, !dbg !90
  %2061 = select i1 %2029, float %1997, float 0xFFF0000000000000, !dbg !90
  %2062 = select i1 %2030, float %1998, float 0xFFF0000000000000, !dbg !90
  %2063 = select i1 %2031, float %1999, float 0xFFF0000000000000, !dbg !90
  %2064 = select i1 %2032, float %2000, float 0xFFF0000000000000, !dbg !90
  %2065 = select i1 %2033, float %2001, float 0xFFF0000000000000, !dbg !90
  %2066 = select i1 %2034, float %2002, float 0xFFF0000000000000, !dbg !90
  %2067 = select i1 %2035, float %2003, float 0xFFF0000000000000, !dbg !90
  %2068 = select i1 %2036, float %2004, float 0xFFF0000000000000, !dbg !90
  %2069 = select i1 %2037, float %2005, float 0xFFF0000000000000, !dbg !90
  %2070 = select i1 %2038, float %2006, float 0xFFF0000000000000, !dbg !90
  %2071 = select i1 %2039, float %2007, float 0xFFF0000000000000, !dbg !90
  %2072 = select i1 %2040, float %2008, float 0xFFF0000000000000, !dbg !90
  %2073 = select i1 %2041, float %2009, float 0xFFF0000000000000, !dbg !90
  %2074 = select i1 %2042, float %2010, float 0xFFF0000000000000, !dbg !90
  %2075 = select i1 %2043, float %2011, float 0xFFF0000000000000, !dbg !90
  %2076 = select i1 %2044, float %2012, float 0xFFF0000000000000, !dbg !90
  %2077 = select i1 %2045, float %2013, float 0xFFF0000000000000, !dbg !90
  %2078 = select i1 %2046, float %2014, float 0xFFF0000000000000, !dbg !90
  %2079 = select i1 %2047, float %2015, float 0xFFF0000000000000, !dbg !90
  %2080 = select i1 %2048, float %2016, float 0xFFF0000000000000, !dbg !90
  %2081 = select i1 %2049, float %2017, float 0xFFF0000000000000, !dbg !90
  %2082 = select i1 %2050, float %2018, float 0xFFF0000000000000, !dbg !90
  %2083 = select i1 %2051, float %2019, float 0xFFF0000000000000, !dbg !90
  %2084 = tail call float @llvm.maxnum.f32(float %2052, float %2053), !dbg !91
  %2085 = tail call float @llvm.maxnum.f32(float %2084, float %2054), !dbg !91
  %2086 = tail call float @llvm.maxnum.f32(float %2085, float %2055), !dbg !91
  %2087 = tail call float @llvm.maxnum.f32(float %2086, float %2056), !dbg !91
  %2088 = tail call float @llvm.maxnum.f32(float %2087, float %2057), !dbg !91
  %2089 = tail call float @llvm.maxnum.f32(float %2088, float %2058), !dbg !91
  %2090 = tail call float @llvm.maxnum.f32(float %2089, float %2059), !dbg !91
  %2091 = tail call float @llvm.maxnum.f32(float %2090, float %2060), !dbg !91
  %2092 = tail call float @llvm.maxnum.f32(float %2091, float %2061), !dbg !91
  %2093 = tail call float @llvm.maxnum.f32(float %2092, float %2062), !dbg !91
  %2094 = tail call float @llvm.maxnum.f32(float %2093, float %2063), !dbg !91
  %2095 = tail call float @llvm.maxnum.f32(float %2094, float %2064), !dbg !91
  %2096 = tail call float @llvm.maxnum.f32(float %2095, float %2065), !dbg !91
  %2097 = tail call float @llvm.maxnum.f32(float %2096, float %2066), !dbg !91
  %2098 = tail call float @llvm.maxnum.f32(float %2097, float %2067), !dbg !91
  %2099 = tail call float @llvm.maxnum.f32(float %2098, float %2068), !dbg !91
  %2100 = tail call float @llvm.maxnum.f32(float %2099, float %2069), !dbg !91
  %2101 = tail call float @llvm.maxnum.f32(float %2100, float %2070), !dbg !91
  %2102 = tail call float @llvm.maxnum.f32(float %2101, float %2071), !dbg !91
  %2103 = tail call float @llvm.maxnum.f32(float %2102, float %2072), !dbg !91
  %2104 = tail call float @llvm.maxnum.f32(float %2103, float %2073), !dbg !91
  %2105 = tail call float @llvm.maxnum.f32(float %2104, float %2074), !dbg !91
  %2106 = tail call float @llvm.maxnum.f32(float %2105, float %2075), !dbg !91
  %2107 = tail call float @llvm.maxnum.f32(float %2106, float %2076), !dbg !91
  %2108 = tail call float @llvm.maxnum.f32(float %2107, float %2077), !dbg !91
  %2109 = tail call float @llvm.maxnum.f32(float %2108, float %2078), !dbg !91
  %2110 = tail call float @llvm.maxnum.f32(float %2109, float %2079), !dbg !91
  %2111 = tail call float @llvm.maxnum.f32(float %2110, float %2080), !dbg !91
  %2112 = tail call float @llvm.maxnum.f32(float %2111, float %2081), !dbg !91
  %2113 = tail call float @llvm.maxnum.f32(float %2112, float %2082), !dbg !91
  %2114 = tail call float @llvm.maxnum.f32(float %2113, float %2083), !dbg !91
  %2115 = bitcast float %2114 to i32, !dbg !95
  %2116 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %2115, i32 %2115, i1 false, i1 false), !dbg !95
  %2117 = extractvalue { i32, i32 } %2116, 0, !dbg !95
  %2118 = extractvalue { i32, i32 } %2116, 1, !dbg !95
  %2119 = bitcast i32 %2117 to float, !dbg !95
  %2120 = bitcast i32 %2118 to float, !dbg !95
  %2121 = tail call float @llvm.maxnum.f32(float %2119, float %2120), !dbg !91
  %2122 = tail call float @llvm.maxnum.f32(float %1776, float %2121), !dbg !96
  %2123 = fcmp one float %2122, 0xFFF0000000000000, !dbg !97
  %2124 = select i1 %2123, float %2122, float 0.000000e+00, !dbg !98
  %2125 = fsub float %2052, %2124, !dbg !99
  %2126 = fsub float %2053, %2124, !dbg !99
  %2127 = fsub float %2054, %2124, !dbg !99
  %2128 = fsub float %2055, %2124, !dbg !99
  %2129 = fsub float %2056, %2124, !dbg !99
  %2130 = fsub float %2057, %2124, !dbg !99
  %2131 = fsub float %2058, %2124, !dbg !99
  %2132 = fsub float %2059, %2124, !dbg !99
  %2133 = fsub float %2060, %2124, !dbg !99
  %2134 = fsub float %2061, %2124, !dbg !99
  %2135 = fsub float %2062, %2124, !dbg !99
  %2136 = fsub float %2063, %2124, !dbg !99
  %2137 = fsub float %2064, %2124, !dbg !99
  %2138 = fsub float %2065, %2124, !dbg !99
  %2139 = fsub float %2066, %2124, !dbg !99
  %2140 = fsub float %2067, %2124, !dbg !99
  %2141 = fsub float %2068, %2124, !dbg !99
  %2142 = fsub float %2069, %2124, !dbg !99
  %2143 = fsub float %2070, %2124, !dbg !99
  %2144 = fsub float %2071, %2124, !dbg !99
  %2145 = fsub float %2072, %2124, !dbg !99
  %2146 = fsub float %2073, %2124, !dbg !99
  %2147 = fsub float %2074, %2124, !dbg !99
  %2148 = fsub float %2075, %2124, !dbg !99
  %2149 = fsub float %2076, %2124, !dbg !99
  %2150 = fsub float %2077, %2124, !dbg !99
  %2151 = fsub float %2078, %2124, !dbg !99
  %2152 = fsub float %2079, %2124, !dbg !99
  %2153 = fsub float %2080, %2124, !dbg !99
  %2154 = fsub float %2081, %2124, !dbg !99
  %2155 = fsub float %2082, %2124, !dbg !99
  %2156 = fsub float %2083, %2124, !dbg !99
  %2157 = fmul float %2125, 0x3FF7154760000000, !dbg !100
  %2158 = tail call float @llvm.exp2.f32(float %2157), !dbg !100
  %2159 = fmul float %2126, 0x3FF7154760000000, !dbg !100
  %2160 = tail call float @llvm.exp2.f32(float %2159), !dbg !100
  %2161 = fmul float %2127, 0x3FF7154760000000, !dbg !100
  %2162 = tail call float @llvm.exp2.f32(float %2161), !dbg !100
  %2163 = fmul float %2128, 0x3FF7154760000000, !dbg !100
  %2164 = tail call float @llvm.exp2.f32(float %2163), !dbg !100
  %2165 = fmul float %2129, 0x3FF7154760000000, !dbg !100
  %2166 = tail call float @llvm.exp2.f32(float %2165), !dbg !100
  %2167 = fmul float %2130, 0x3FF7154760000000, !dbg !100
  %2168 = tail call float @llvm.exp2.f32(float %2167), !dbg !100
  %2169 = fmul float %2131, 0x3FF7154760000000, !dbg !100
  %2170 = tail call float @llvm.exp2.f32(float %2169), !dbg !100
  %2171 = fmul float %2132, 0x3FF7154760000000, !dbg !100
  %2172 = tail call float @llvm.exp2.f32(float %2171), !dbg !100
  %2173 = fmul float %2133, 0x3FF7154760000000, !dbg !100
  %2174 = tail call float @llvm.exp2.f32(float %2173), !dbg !100
  %2175 = fmul float %2134, 0x3FF7154760000000, !dbg !100
  %2176 = tail call float @llvm.exp2.f32(float %2175), !dbg !100
  %2177 = fmul float %2135, 0x3FF7154760000000, !dbg !100
  %2178 = tail call float @llvm.exp2.f32(float %2177), !dbg !100
  %2179 = fmul float %2136, 0x3FF7154760000000, !dbg !100
  %2180 = tail call float @llvm.exp2.f32(float %2179), !dbg !100
  %2181 = fmul float %2137, 0x3FF7154760000000, !dbg !100
  %2182 = tail call float @llvm.exp2.f32(float %2181), !dbg !100
  %2183 = fmul float %2138, 0x3FF7154760000000, !dbg !100
  %2184 = tail call float @llvm.exp2.f32(float %2183), !dbg !100
  %2185 = fmul float %2139, 0x3FF7154760000000, !dbg !100
  %2186 = tail call float @llvm.exp2.f32(float %2185), !dbg !100
  %2187 = fmul float %2140, 0x3FF7154760000000, !dbg !100
  %2188 = tail call float @llvm.exp2.f32(float %2187), !dbg !100
  %2189 = fmul float %2141, 0x3FF7154760000000, !dbg !100
  %2190 = tail call float @llvm.exp2.f32(float %2189), !dbg !100
  %2191 = fmul float %2142, 0x3FF7154760000000, !dbg !100
  %2192 = tail call float @llvm.exp2.f32(float %2191), !dbg !100
  %2193 = fmul float %2143, 0x3FF7154760000000, !dbg !100
  %2194 = tail call float @llvm.exp2.f32(float %2193), !dbg !100
  %2195 = fmul float %2144, 0x3FF7154760000000, !dbg !100
  %2196 = tail call float @llvm.exp2.f32(float %2195), !dbg !100
  %2197 = fmul float %2145, 0x3FF7154760000000, !dbg !100
  %2198 = tail call float @llvm.exp2.f32(float %2197), !dbg !100
  %2199 = fmul float %2146, 0x3FF7154760000000, !dbg !100
  %2200 = tail call float @llvm.exp2.f32(float %2199), !dbg !100
  %2201 = fmul float %2147, 0x3FF7154760000000, !dbg !100
  %2202 = tail call float @llvm.exp2.f32(float %2201), !dbg !100
  %2203 = fmul float %2148, 0x3FF7154760000000, !dbg !100
  %2204 = tail call float @llvm.exp2.f32(float %2203), !dbg !100
  %2205 = fmul float %2149, 0x3FF7154760000000, !dbg !100
  %2206 = tail call float @llvm.exp2.f32(float %2205), !dbg !100
  %2207 = fmul float %2150, 0x3FF7154760000000, !dbg !100
  %2208 = tail call float @llvm.exp2.f32(float %2207), !dbg !100
  %2209 = fmul float %2151, 0x3FF7154760000000, !dbg !100
  %2210 = tail call float @llvm.exp2.f32(float %2209), !dbg !100
  %2211 = fmul float %2152, 0x3FF7154760000000, !dbg !100
  %2212 = tail call float @llvm.exp2.f32(float %2211), !dbg !100
  %2213 = fmul float %2153, 0x3FF7154760000000, !dbg !100
  %2214 = tail call float @llvm.exp2.f32(float %2213), !dbg !100
  %2215 = fmul float %2154, 0x3FF7154760000000, !dbg !100
  %2216 = tail call float @llvm.exp2.f32(float %2215), !dbg !100
  %2217 = fmul float %2155, 0x3FF7154760000000, !dbg !100
  %2218 = tail call float @llvm.exp2.f32(float %2217), !dbg !100
  %2219 = fmul float %2156, 0x3FF7154760000000, !dbg !100
  %2220 = tail call float @llvm.exp2.f32(float %2219), !dbg !100
  %2221 = fadd float %2158, %2160, !dbg !101
  %2222 = fadd float %2162, %2221, !dbg !101
  %2223 = fadd float %2164, %2222, !dbg !101
  %2224 = fadd float %2166, %2223, !dbg !101
  %2225 = fadd float %2168, %2224, !dbg !101
  %2226 = fadd float %2170, %2225, !dbg !101
  %2227 = fadd float %2172, %2226, !dbg !101
  %2228 = fadd float %2174, %2227, !dbg !101
  %2229 = fadd float %2176, %2228, !dbg !101
  %2230 = fadd float %2178, %2229, !dbg !101
  %2231 = fadd float %2180, %2230, !dbg !101
  %2232 = fadd float %2182, %2231, !dbg !101
  %2233 = fadd float %2184, %2232, !dbg !101
  %2234 = fadd float %2186, %2233, !dbg !101
  %2235 = fadd float %2188, %2234, !dbg !101
  %2236 = fadd float %2190, %2235, !dbg !101
  %2237 = fadd float %2192, %2236, !dbg !101
  %2238 = fadd float %2194, %2237, !dbg !101
  %2239 = fadd float %2196, %2238, !dbg !101
  %2240 = fadd float %2198, %2239, !dbg !101
  %2241 = fadd float %2200, %2240, !dbg !101
  %2242 = fadd float %2202, %2241, !dbg !101
  %2243 = fadd float %2204, %2242, !dbg !101
  %2244 = fadd float %2206, %2243, !dbg !101
  %2245 = fadd float %2208, %2244, !dbg !101
  %2246 = fadd float %2210, %2245, !dbg !101
  %2247 = fadd float %2212, %2246, !dbg !101
  %2248 = fadd float %2214, %2247, !dbg !101
  %2249 = fadd float %2216, %2248, !dbg !101
  %2250 = fadd float %2218, %2249, !dbg !101
  %2251 = fadd float %2220, %2250, !dbg !101
  %2252 = bitcast float %2251 to i32, !dbg !103
  %2253 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %2252, i32 %2252, i1 false, i1 false), !dbg !103
  %2254 = fsub float %1776, %2124, !dbg !104
  %2255 = fmul float %2254, 0x3FF7154760000000, !dbg !105
  %2256 = tail call float @llvm.exp2.f32(float %2255), !dbg !105
  %2257 = insertelement <1 x float> poison, float %2256, i64 0, !dbg !106
  store <1 x float> %2257, ptr addrspace(3) %1583, align 4, !dbg !106
  fence syncscope("workgroup") release, !dbg !106
  tail call void @llvm.amdgcn.s.barrier(), !dbg !106
  fence syncscope("workgroup") acquire, !dbg !106
  %2258 = load <1 x float>, ptr addrspace(3) %1586, align 4, !dbg !106
  %2259 = insertelement <2 x float> poison, float %2158, i64 0, !dbg !109
  %2260 = insertelement <2 x float> %2259, float %2160, i64 1, !dbg !109
  %2261 = fptrunc <2 x float> %2260 to <2 x bfloat>, !dbg !109
  %2262 = insertelement <2 x float> poison, float %2162, i64 0, !dbg !109
  %2263 = insertelement <2 x float> %2262, float %2164, i64 1, !dbg !109
  %2264 = fptrunc <2 x float> %2263 to <2 x bfloat>, !dbg !109
  %2265 = insertelement <2 x float> poison, float %2166, i64 0, !dbg !109
  %2266 = insertelement <2 x float> %2265, float %2168, i64 1, !dbg !109
  %2267 = fptrunc <2 x float> %2266 to <2 x bfloat>, !dbg !109
  %2268 = insertelement <2 x float> poison, float %2170, i64 0, !dbg !109
  %2269 = insertelement <2 x float> %2268, float %2172, i64 1, !dbg !109
  %2270 = fptrunc <2 x float> %2269 to <2 x bfloat>, !dbg !109
  %2271 = insertelement <2 x float> poison, float %2174, i64 0, !dbg !109
  %2272 = insertelement <2 x float> %2271, float %2176, i64 1, !dbg !109
  %2273 = fptrunc <2 x float> %2272 to <2 x bfloat>, !dbg !109
  %2274 = insertelement <2 x float> poison, float %2178, i64 0, !dbg !109
  %2275 = insertelement <2 x float> %2274, float %2180, i64 1, !dbg !109
  %2276 = fptrunc <2 x float> %2275 to <2 x bfloat>, !dbg !109
  %2277 = insertelement <2 x float> poison, float %2182, i64 0, !dbg !109
  %2278 = insertelement <2 x float> %2277, float %2184, i64 1, !dbg !109
  %2279 = fptrunc <2 x float> %2278 to <2 x bfloat>, !dbg !109
  %2280 = insertelement <2 x float> poison, float %2186, i64 0, !dbg !109
  %2281 = insertelement <2 x float> %2280, float %2188, i64 1, !dbg !109
  %2282 = fptrunc <2 x float> %2281 to <2 x bfloat>, !dbg !109
  %2283 = insertelement <2 x float> poison, float %2190, i64 0, !dbg !109
  %2284 = insertelement <2 x float> %2283, float %2192, i64 1, !dbg !109
  %2285 = fptrunc <2 x float> %2284 to <2 x bfloat>, !dbg !109
  %2286 = insertelement <2 x float> poison, float %2194, i64 0, !dbg !109
  %2287 = insertelement <2 x float> %2286, float %2196, i64 1, !dbg !109
  %2288 = fptrunc <2 x float> %2287 to <2 x bfloat>, !dbg !109
  %2289 = insertelement <2 x float> poison, float %2198, i64 0, !dbg !109
  %2290 = insertelement <2 x float> %2289, float %2200, i64 1, !dbg !109
  %2291 = fptrunc <2 x float> %2290 to <2 x bfloat>, !dbg !109
  %2292 = insertelement <2 x float> poison, float %2202, i64 0, !dbg !109
  %2293 = insertelement <2 x float> %2292, float %2204, i64 1, !dbg !109
  %2294 = fptrunc <2 x float> %2293 to <2 x bfloat>, !dbg !109
  %2295 = insertelement <2 x float> poison, float %2206, i64 0, !dbg !109
  %2296 = insertelement <2 x float> %2295, float %2208, i64 1, !dbg !109
  %2297 = fptrunc <2 x float> %2296 to <2 x bfloat>, !dbg !109
  %2298 = insertelement <2 x float> poison, float %2210, i64 0, !dbg !109
  %2299 = insertelement <2 x float> %2298, float %2212, i64 1, !dbg !109
  %2300 = fptrunc <2 x float> %2299 to <2 x bfloat>, !dbg !109
  %2301 = insertelement <2 x float> poison, float %2214, i64 0, !dbg !109
  %2302 = insertelement <2 x float> %2301, float %2216, i64 1, !dbg !109
  %2303 = fptrunc <2 x float> %2302 to <2 x bfloat>, !dbg !109
  %2304 = insertelement <2 x float> poison, float %2218, i64 0, !dbg !109
  %2305 = insertelement <2 x float> %2304, float %2220, i64 1, !dbg !109
  %2306 = fptrunc <2 x float> %2305 to <2 x bfloat>, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %2307 = shufflevector <2 x bfloat> %2261, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2307, ptr addrspace(3) %1639, align 2, !dbg !109
  %2308 = shufflevector <2 x bfloat> %2273, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2308, ptr addrspace(3) %1641, align 2, !dbg !109
  %2309 = shufflevector <2 x bfloat> %2285, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2309, ptr addrspace(3) %1643, align 2, !dbg !109
  %2310 = shufflevector <2 x bfloat> %2297, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2310, ptr addrspace(3) %1645, align 2, !dbg !109
  %2311 = shufflevector <2 x bfloat> %2261, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2311, ptr addrspace(3) %1648, align 2, !dbg !109
  %2312 = shufflevector <2 x bfloat> %2273, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2312, ptr addrspace(3) %1650, align 2, !dbg !109
  %2313 = shufflevector <2 x bfloat> %2285, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2313, ptr addrspace(3) %1652, align 2, !dbg !109
  %2314 = shufflevector <2 x bfloat> %2297, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2314, ptr addrspace(3) %1654, align 2, !dbg !109
  %2315 = shufflevector <2 x bfloat> %2264, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2315, ptr addrspace(3) %1657, align 2, !dbg !109
  %2316 = shufflevector <2 x bfloat> %2276, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2316, ptr addrspace(3) %1659, align 2, !dbg !109
  %2317 = shufflevector <2 x bfloat> %2288, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2317, ptr addrspace(3) %1661, align 2, !dbg !109
  %2318 = shufflevector <2 x bfloat> %2300, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2318, ptr addrspace(3) %1663, align 2, !dbg !109
  %2319 = shufflevector <2 x bfloat> %2264, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2319, ptr addrspace(3) %1666, align 2, !dbg !109
  %2320 = shufflevector <2 x bfloat> %2276, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2320, ptr addrspace(3) %1668, align 2, !dbg !109
  %2321 = shufflevector <2 x bfloat> %2288, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2321, ptr addrspace(3) %1670, align 2, !dbg !109
  %2322 = shufflevector <2 x bfloat> %2300, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2322, ptr addrspace(3) %1672, align 2, !dbg !109
  %2323 = shufflevector <2 x bfloat> %2267, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2323, ptr addrspace(3) %1675, align 2, !dbg !109
  %2324 = shufflevector <2 x bfloat> %2279, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2324, ptr addrspace(3) %1677, align 2, !dbg !109
  %2325 = shufflevector <2 x bfloat> %2291, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2325, ptr addrspace(3) %1679, align 2, !dbg !109
  %2326 = shufflevector <2 x bfloat> %2303, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2326, ptr addrspace(3) %1681, align 2, !dbg !109
  %2327 = shufflevector <2 x bfloat> %2267, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2327, ptr addrspace(3) %1684, align 2, !dbg !109
  %2328 = shufflevector <2 x bfloat> %2279, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2328, ptr addrspace(3) %1686, align 2, !dbg !109
  %2329 = shufflevector <2 x bfloat> %2291, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2329, ptr addrspace(3) %1688, align 2, !dbg !109
  %2330 = shufflevector <2 x bfloat> %2303, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2330, ptr addrspace(3) %1690, align 2, !dbg !109
  %2331 = shufflevector <2 x bfloat> %2270, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2331, ptr addrspace(3) %1693, align 2, !dbg !109
  %2332 = shufflevector <2 x bfloat> %2282, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2332, ptr addrspace(3) %1695, align 2, !dbg !109
  %2333 = shufflevector <2 x bfloat> %2294, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2333, ptr addrspace(3) %1697, align 2, !dbg !109
  %2334 = shufflevector <2 x bfloat> %2306, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2334, ptr addrspace(3) %1699, align 2, !dbg !109
  %2335 = shufflevector <2 x bfloat> %2270, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2335, ptr addrspace(3) %1702, align 2, !dbg !109
  %2336 = shufflevector <2 x bfloat> %2282, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2336, ptr addrspace(3) %1704, align 2, !dbg !109
  %2337 = shufflevector <2 x bfloat> %2294, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2337, ptr addrspace(3) %1706, align 2, !dbg !109
  %2338 = shufflevector <2 x bfloat> %2306, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2338, ptr addrspace(3) %1708, align 2, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %2339 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1721), !dbg !109
  %2340 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1722), !dbg !109
  %2341 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1723), !dbg !109
  %2342 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1724), !dbg !109
  %2343 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1725), !dbg !109
  %2344 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1726), !dbg !109
  %2345 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1727), !dbg !109
  %2346 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1728), !dbg !109
  br i1 %224, label %2347, label %2384, !dbg !110

2347:                                             ; preds = %1923
  %2348 = fmul float %1775, %2256, !dbg !107
  %2349 = extractvalue { i32, i32 } %2253, 0, !dbg !103
  %2350 = bitcast i32 %2349 to float, !dbg !103
  %2351 = extractvalue { i32, i32 } %2253, 1, !dbg !103
  %2352 = bitcast i32 %2351 to float, !dbg !103
  %2353 = fadd float %2350, %2352, !dbg !101
  %2354 = fadd float %2353, %2348, !dbg !108
  %2355 = shufflevector <4 x bfloat> %2339, <4 x bfloat> %2340, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2356 = shufflevector <4 x bfloat> %2341, <4 x bfloat> %2342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2357 = shufflevector <4 x bfloat> %2343, <4 x bfloat> %2344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2358 = shufflevector <4 x bfloat> %2345, <4 x bfloat> %2346, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2359 = shufflevector <4 x bfloat> %1793, <4 x bfloat> %1794, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2360 = shufflevector <4 x bfloat> %1795, <4 x bfloat> %1796, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2361 = shufflevector <4 x bfloat> %1797, <4 x bfloat> %1798, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2362 = shufflevector <4 x bfloat> %1799, <4 x bfloat> %1800, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2363 = shufflevector <2 x float> %1784, <2 x float> %1783, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2364 = shufflevector <2 x float> %1782, <2 x float> %1781, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2365 = shufflevector <2 x float> %1780, <2 x float> %1779, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2366 = shufflevector <2 x float> %1778, <2 x float> %1777, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2367 = shufflevector <4 x float> %2363, <4 x float> %2364, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2368 = shufflevector <4 x float> %2365, <4 x float> %2366, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2369 = shufflevector <8 x float> %2367, <8 x float> %2368, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !110
  %2370 = shufflevector <1 x float> %2258, <1 x float> poison, <16 x i32> zeroinitializer, !dbg !110
  %2371 = fmul <16 x float> %2369, %2370, !dbg !110
  %2372 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2359, <8 x bfloat> %2355, <16 x float> %2371, i32 0, i32 0, i32 0), !dbg !110
  %2373 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2360, <8 x bfloat> %2356, <16 x float> %2372, i32 0, i32 0, i32 0), !dbg !110
  %2374 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2361, <8 x bfloat> %2357, <16 x float> %2373, i32 0, i32 0, i32 0), !dbg !110
  %2375 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2362, <8 x bfloat> %2358, <16 x float> %2374, i32 0, i32 0, i32 0), !dbg !110
  %2376 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %2377 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %2378 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %2379 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %2380 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %2381 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %2382 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %2383 = shufflevector <16 x float> %2375, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  br label %2384, !dbg !110

2384:                                             ; preds = %2347, %1923
  %2385 = phi float [ %2354, %2347 ], [ %1775, %1923 ]
  %2386 = phi float [ %2124, %2347 ], [ %1776, %1923 ]
  %2387 = phi <2 x float> [ %2376, %2347 ], [ %1777, %1923 ]
  %2388 = phi <2 x float> [ %2377, %2347 ], [ %1778, %1923 ]
  %2389 = phi <2 x float> [ %2378, %2347 ], [ %1779, %1923 ]
  %2390 = phi <2 x float> [ %2379, %2347 ], [ %1780, %1923 ]
  %2391 = phi <2 x float> [ %2380, %2347 ], [ %1781, %1923 ]
  %2392 = phi <2 x float> [ %2381, %2347 ], [ %1782, %1923 ]
  %2393 = phi <2 x float> [ %2382, %2347 ], [ %1783, %1923 ]
  %2394 = phi <2 x float> [ %2383, %2347 ], [ %1784, %1923 ]
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49168), !dbg !74
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  %2395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %357, !dbg !79
  %2396 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %358, !dbg !79
  %2397 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %1121, !dbg !79
  %2398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %359, !dbg !79
  %2399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %1122, !dbg !79
  %2400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %360, !dbg !79
  %2401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %1123, !dbg !79
  %2402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1101, i32 %361, !dbg !79
  %2403 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %2395), !dbg !79, !alias.scope !81, !noalias !75
  %2404 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %2396), !dbg !79, !alias.scope !81, !noalias !75
  %2405 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %2397), !dbg !79, !alias.scope !81, !noalias !75
  %2406 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %2398), !dbg !79, !alias.scope !81, !noalias !75
  %2407 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %2399), !dbg !79, !alias.scope !81, !noalias !75
  %2408 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %2400), !dbg !79, !alias.scope !81, !noalias !75
  %2409 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %2401), !dbg !79, !alias.scope !81, !noalias !75
  %2410 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %2402), !dbg !79, !alias.scope !81, !noalias !75
  %2411 = add nuw nsw i32 %1140, 128, !dbg !83
  %2412 = or disjoint i32 %2411, %78, !dbg !84
  %2413 = or disjoint i32 %2411, %79, !dbg !84
  %2414 = or disjoint i32 %2411, %80, !dbg !84
  %2415 = or disjoint i32 %2411, %81, !dbg !84
  %2416 = or disjoint i32 %2411, %82, !dbg !84
  %2417 = or disjoint i32 %2411, %83, !dbg !84
  %2418 = or disjoint i32 %2411, %84, !dbg !84
  %2419 = or disjoint i32 %2411, %85, !dbg !84
  %2420 = or disjoint i32 %2411, %86, !dbg !84
  %2421 = or disjoint i32 %2411, %87, !dbg !84
  %2422 = or disjoint i32 %2411, %88, !dbg !84
  %2423 = or disjoint i32 %2411, %89, !dbg !84
  %2424 = or disjoint i32 %2411, %90, !dbg !84
  %2425 = or disjoint i32 %2411, %91, !dbg !84
  %2426 = or disjoint i32 %2411, %92, !dbg !84
  %2427 = or disjoint i32 %2411, %93, !dbg !84
  %2428 = or disjoint i32 %2411, %94, !dbg !84
  %2429 = or disjoint i32 %2411, %95, !dbg !84
  %2430 = or disjoint i32 %2411, %96, !dbg !84
  %2431 = or disjoint i32 %2411, %97, !dbg !84
  %2432 = or disjoint i32 %2411, %98, !dbg !84
  %2433 = or disjoint i32 %2411, %99, !dbg !84
  %2434 = or disjoint i32 %2411, %100, !dbg !84
  %2435 = or disjoint i32 %2411, %101, !dbg !84
  %2436 = or disjoint i32 %2411, %102, !dbg !84
  %2437 = or disjoint i32 %2411, %103, !dbg !84
  %2438 = or disjoint i32 %2411, %104, !dbg !84
  %2439 = or disjoint i32 %2411, %105, !dbg !84
  %2440 = or disjoint i32 %2411, %106, !dbg !84
  %2441 = or disjoint i32 %2411, %107, !dbg !84
  %2442 = or disjoint i32 %2411, %108, !dbg !84
  %2443 = or disjoint i32 %2411, %109, !dbg !84
  %2444 = icmp slt i32 %2412, %222, !dbg !85
  %2445 = icmp slt i32 %2413, %222, !dbg !85
  %2446 = icmp slt i32 %2414, %222, !dbg !85
  %2447 = icmp slt i32 %2415, %222, !dbg !85
  %2448 = icmp slt i32 %2416, %222, !dbg !85
  %2449 = icmp slt i32 %2417, %222, !dbg !85
  %2450 = icmp slt i32 %2418, %222, !dbg !85
  %2451 = icmp slt i32 %2419, %222, !dbg !85
  %2452 = icmp slt i32 %2420, %222, !dbg !85
  %2453 = icmp slt i32 %2421, %222, !dbg !85
  %2454 = icmp slt i32 %2422, %222, !dbg !85
  %2455 = icmp slt i32 %2423, %222, !dbg !85
  %2456 = icmp slt i32 %2424, %222, !dbg !85
  %2457 = icmp slt i32 %2425, %222, !dbg !85
  %2458 = icmp slt i32 %2426, %222, !dbg !85
  %2459 = icmp slt i32 %2427, %222, !dbg !85
  %2460 = icmp slt i32 %2428, %222, !dbg !85
  %2461 = icmp slt i32 %2429, %222, !dbg !85
  %2462 = icmp slt i32 %2430, %222, !dbg !85
  %2463 = icmp slt i32 %2431, %222, !dbg !85
  %2464 = icmp slt i32 %2432, %222, !dbg !85
  %2465 = icmp slt i32 %2433, %222, !dbg !85
  %2466 = icmp slt i32 %2434, %222, !dbg !85
  %2467 = icmp slt i32 %2435, %222, !dbg !85
  %2468 = icmp slt i32 %2436, %222, !dbg !85
  %2469 = icmp slt i32 %2437, %222, !dbg !85
  %2470 = icmp slt i32 %2438, %222, !dbg !85
  %2471 = icmp slt i32 %2439, %222, !dbg !85
  %2472 = icmp slt i32 %2440, %222, !dbg !85
  %2473 = icmp slt i32 %2441, %222, !dbg !85
  %2474 = icmp slt i32 %2442, %222, !dbg !85
  %2475 = icmp slt i32 %2443, %222, !dbg !85
  br i1 %299, label %2476, label %2533, !dbg !86

2476:                                             ; preds = %2384
  %2477 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %1096, !dbg !74
  %2478 = load <8 x bfloat>, ptr addrspace(3) %2477, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2479 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %346, !dbg !74
  %2480 = load <8 x bfloat>, ptr addrspace(3) %2479, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2481 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %1091, !dbg !74
  %2482 = load <8 x bfloat>, ptr addrspace(3) %2481, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2483 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %345, !dbg !74
  %2484 = load <8 x bfloat>, ptr addrspace(3) %2483, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2485 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %1086, !dbg !74
  %2486 = load <8 x bfloat>, ptr addrspace(3) %2485, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2487 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %344, !dbg !74
  %2488 = load <8 x bfloat>, ptr addrspace(3) %2487, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2489 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %1081, !dbg !74
  %2490 = load <8 x bfloat>, ptr addrspace(3) %2489, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2491 = getelementptr inbounds nuw i8, ptr addrspace(3) %1070, i32 %343, !dbg !74
  %2492 = load <8 x bfloat>, ptr addrspace(3) %2491, align 16, !dbg !74, !alias.scope !81, !noalias !75
  %2493 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2492, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %2494 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2488, <8 x bfloat> %179, <16 x float> %2493, i32 0, i32 0, i32 0), !dbg !86
  %2495 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2484, <8 x bfloat> %182, <16 x float> %2494, i32 0, i32 0, i32 0), !dbg !86
  %2496 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2480, <8 x bfloat> %185, <16 x float> %2495, i32 0, i32 0, i32 0), !dbg !86
  %2497 = extractelement <16 x float> %2496, i64 0, !dbg !86
  %2498 = extractelement <16 x float> %2496, i64 1, !dbg !86
  %2499 = extractelement <16 x float> %2496, i64 2, !dbg !86
  %2500 = extractelement <16 x float> %2496, i64 3, !dbg !86
  %2501 = extractelement <16 x float> %2496, i64 4, !dbg !86
  %2502 = extractelement <16 x float> %2496, i64 5, !dbg !86
  %2503 = extractelement <16 x float> %2496, i64 6, !dbg !86
  %2504 = extractelement <16 x float> %2496, i64 7, !dbg !86
  %2505 = extractelement <16 x float> %2496, i64 8, !dbg !86
  %2506 = extractelement <16 x float> %2496, i64 9, !dbg !86
  %2507 = extractelement <16 x float> %2496, i64 10, !dbg !86
  %2508 = extractelement <16 x float> %2496, i64 11, !dbg !86
  %2509 = extractelement <16 x float> %2496, i64 12, !dbg !86
  %2510 = extractelement <16 x float> %2496, i64 13, !dbg !86
  %2511 = extractelement <16 x float> %2496, i64 14, !dbg !86
  %2512 = extractelement <16 x float> %2496, i64 15, !dbg !86
  %2513 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2490, <8 x bfloat> %176, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !86
  %2514 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2486, <8 x bfloat> %179, <16 x float> %2513, i32 0, i32 0, i32 0), !dbg !86
  %2515 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2482, <8 x bfloat> %182, <16 x float> %2514, i32 0, i32 0, i32 0), !dbg !86
  %2516 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2478, <8 x bfloat> %185, <16 x float> %2515, i32 0, i32 0, i32 0), !dbg !86
  %2517 = extractelement <16 x float> %2516, i64 0, !dbg !86
  %2518 = extractelement <16 x float> %2516, i64 1, !dbg !86
  %2519 = extractelement <16 x float> %2516, i64 2, !dbg !86
  %2520 = extractelement <16 x float> %2516, i64 3, !dbg !86
  %2521 = extractelement <16 x float> %2516, i64 4, !dbg !86
  %2522 = extractelement <16 x float> %2516, i64 5, !dbg !86
  %2523 = extractelement <16 x float> %2516, i64 6, !dbg !86
  %2524 = extractelement <16 x float> %2516, i64 7, !dbg !86
  %2525 = extractelement <16 x float> %2516, i64 8, !dbg !86
  %2526 = extractelement <16 x float> %2516, i64 9, !dbg !86
  %2527 = extractelement <16 x float> %2516, i64 10, !dbg !86
  %2528 = extractelement <16 x float> %2516, i64 11, !dbg !86
  %2529 = extractelement <16 x float> %2516, i64 12, !dbg !86
  %2530 = extractelement <16 x float> %2516, i64 13, !dbg !86
  %2531 = extractelement <16 x float> %2516, i64 14, !dbg !86
  %2532 = extractelement <16 x float> %2516, i64 15, !dbg !86
  br label %2533, !dbg !86

2533:                                             ; preds = %2476, %2384
  %2534 = phi float [ %2497, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2535 = phi float [ %2498, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2536 = phi float [ %2499, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2537 = phi float [ %2500, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2538 = phi float [ %2501, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2539 = phi float [ %2502, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2540 = phi float [ %2503, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2541 = phi float [ %2504, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2542 = phi float [ %2505, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2543 = phi float [ %2506, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2544 = phi float [ %2507, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2545 = phi float [ %2508, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2546 = phi float [ %2509, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2547 = phi float [ %2510, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2548 = phi float [ %2511, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2549 = phi float [ %2512, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2550 = phi float [ %2517, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2551 = phi float [ %2518, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2552 = phi float [ %2519, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2553 = phi float [ %2520, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2554 = phi float [ %2521, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2555 = phi float [ %2522, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2556 = phi float [ %2523, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2557 = phi float [ %2524, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2558 = phi float [ %2525, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2559 = phi float [ %2526, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2560 = phi float [ %2527, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2561 = phi float [ %2528, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2562 = phi float [ %2529, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2563 = phi float [ %2530, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2564 = phi float [ %2531, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2565 = phi float [ %2532, %2476 ], [ 0.000000e+00, %2384 ], !dbg !86
  %2566 = fmul float %7, %2534, !dbg !87
  %2567 = fmul float %7, %2535, !dbg !87
  %2568 = fmul float %7, %2536, !dbg !87
  %2569 = fmul float %7, %2537, !dbg !87
  %2570 = fmul float %7, %2538, !dbg !87
  %2571 = fmul float %7, %2539, !dbg !87
  %2572 = fmul float %7, %2540, !dbg !87
  %2573 = fmul float %7, %2541, !dbg !87
  %2574 = fmul float %7, %2542, !dbg !87
  %2575 = fmul float %7, %2543, !dbg !87
  %2576 = fmul float %7, %2544, !dbg !87
  %2577 = fmul float %7, %2545, !dbg !87
  %2578 = fmul float %7, %2546, !dbg !87
  %2579 = fmul float %7, %2547, !dbg !87
  %2580 = fmul float %7, %2548, !dbg !87
  %2581 = fmul float %7, %2549, !dbg !87
  %2582 = fmul float %7, %2550, !dbg !87
  %2583 = fmul float %7, %2551, !dbg !87
  %2584 = fmul float %7, %2552, !dbg !87
  %2585 = fmul float %7, %2553, !dbg !87
  %2586 = fmul float %7, %2554, !dbg !87
  %2587 = fmul float %7, %2555, !dbg !87
  %2588 = fmul float %7, %2556, !dbg !87
  %2589 = fmul float %7, %2557, !dbg !87
  %2590 = fmul float %7, %2558, !dbg !87
  %2591 = fmul float %7, %2559, !dbg !87
  %2592 = fmul float %7, %2560, !dbg !87
  %2593 = fmul float %7, %2561, !dbg !87
  %2594 = fmul float %7, %2562, !dbg !87
  %2595 = fmul float %7, %2563, !dbg !87
  %2596 = fmul float %7, %2564, !dbg !87
  %2597 = fmul float %7, %2565, !dbg !87
  %2598 = fadd float %2566, 0.000000e+00, !dbg !88
  %2599 = fadd float %2567, 0.000000e+00, !dbg !88
  %2600 = fadd float %2568, 0.000000e+00, !dbg !88
  %2601 = fadd float %2569, 0.000000e+00, !dbg !88
  %2602 = fadd float %2570, 0.000000e+00, !dbg !88
  %2603 = fadd float %2571, 0.000000e+00, !dbg !88
  %2604 = fadd float %2572, 0.000000e+00, !dbg !88
  %2605 = fadd float %2573, 0.000000e+00, !dbg !88
  %2606 = fadd float %2574, 0.000000e+00, !dbg !88
  %2607 = fadd float %2575, 0.000000e+00, !dbg !88
  %2608 = fadd float %2576, 0.000000e+00, !dbg !88
  %2609 = fadd float %2577, 0.000000e+00, !dbg !88
  %2610 = fadd float %2578, 0.000000e+00, !dbg !88
  %2611 = fadd float %2579, 0.000000e+00, !dbg !88
  %2612 = fadd float %2580, 0.000000e+00, !dbg !88
  %2613 = fadd float %2581, 0.000000e+00, !dbg !88
  %2614 = fadd float %2582, 0.000000e+00, !dbg !88
  %2615 = fadd float %2583, 0.000000e+00, !dbg !88
  %2616 = fadd float %2584, 0.000000e+00, !dbg !88
  %2617 = fadd float %2585, 0.000000e+00, !dbg !88
  %2618 = fadd float %2586, 0.000000e+00, !dbg !88
  %2619 = fadd float %2587, 0.000000e+00, !dbg !88
  %2620 = fadd float %2588, 0.000000e+00, !dbg !88
  %2621 = fadd float %2589, 0.000000e+00, !dbg !88
  %2622 = fadd float %2590, 0.000000e+00, !dbg !88
  %2623 = fadd float %2591, 0.000000e+00, !dbg !88
  %2624 = fadd float %2592, 0.000000e+00, !dbg !88
  %2625 = fadd float %2593, 0.000000e+00, !dbg !88
  %2626 = fadd float %2594, 0.000000e+00, !dbg !88
  %2627 = fadd float %2595, 0.000000e+00, !dbg !88
  %2628 = fadd float %2596, 0.000000e+00, !dbg !88
  %2629 = fadd float %2597, 0.000000e+00, !dbg !88
  %2630 = and i1 %223, %2444, !dbg !89
  %2631 = and i1 %223, %2445, !dbg !89
  %2632 = and i1 %223, %2446, !dbg !89
  %2633 = and i1 %223, %2447, !dbg !89
  %2634 = and i1 %223, %2448, !dbg !89
  %2635 = and i1 %223, %2449, !dbg !89
  %2636 = and i1 %223, %2450, !dbg !89
  %2637 = and i1 %223, %2451, !dbg !89
  %2638 = and i1 %223, %2452, !dbg !89
  %2639 = and i1 %223, %2453, !dbg !89
  %2640 = and i1 %223, %2454, !dbg !89
  %2641 = and i1 %223, %2455, !dbg !89
  %2642 = and i1 %223, %2456, !dbg !89
  %2643 = and i1 %223, %2457, !dbg !89
  %2644 = and i1 %223, %2458, !dbg !89
  %2645 = and i1 %223, %2459, !dbg !89
  %2646 = and i1 %223, %2460, !dbg !89
  %2647 = and i1 %223, %2461, !dbg !89
  %2648 = and i1 %223, %2462, !dbg !89
  %2649 = and i1 %223, %2463, !dbg !89
  %2650 = and i1 %223, %2464, !dbg !89
  %2651 = and i1 %223, %2465, !dbg !89
  %2652 = and i1 %223, %2466, !dbg !89
  %2653 = and i1 %223, %2467, !dbg !89
  %2654 = and i1 %223, %2468, !dbg !89
  %2655 = and i1 %223, %2469, !dbg !89
  %2656 = and i1 %223, %2470, !dbg !89
  %2657 = and i1 %223, %2471, !dbg !89
  %2658 = and i1 %223, %2472, !dbg !89
  %2659 = and i1 %223, %2473, !dbg !89
  %2660 = and i1 %223, %2474, !dbg !89
  %2661 = and i1 %223, %2475, !dbg !89
  %2662 = select i1 %2630, float %2598, float 0xFFF0000000000000, !dbg !90
  %2663 = select i1 %2631, float %2599, float 0xFFF0000000000000, !dbg !90
  %2664 = select i1 %2632, float %2600, float 0xFFF0000000000000, !dbg !90
  %2665 = select i1 %2633, float %2601, float 0xFFF0000000000000, !dbg !90
  %2666 = select i1 %2634, float %2602, float 0xFFF0000000000000, !dbg !90
  %2667 = select i1 %2635, float %2603, float 0xFFF0000000000000, !dbg !90
  %2668 = select i1 %2636, float %2604, float 0xFFF0000000000000, !dbg !90
  %2669 = select i1 %2637, float %2605, float 0xFFF0000000000000, !dbg !90
  %2670 = select i1 %2638, float %2606, float 0xFFF0000000000000, !dbg !90
  %2671 = select i1 %2639, float %2607, float 0xFFF0000000000000, !dbg !90
  %2672 = select i1 %2640, float %2608, float 0xFFF0000000000000, !dbg !90
  %2673 = select i1 %2641, float %2609, float 0xFFF0000000000000, !dbg !90
  %2674 = select i1 %2642, float %2610, float 0xFFF0000000000000, !dbg !90
  %2675 = select i1 %2643, float %2611, float 0xFFF0000000000000, !dbg !90
  %2676 = select i1 %2644, float %2612, float 0xFFF0000000000000, !dbg !90
  %2677 = select i1 %2645, float %2613, float 0xFFF0000000000000, !dbg !90
  %2678 = select i1 %2646, float %2614, float 0xFFF0000000000000, !dbg !90
  %2679 = select i1 %2647, float %2615, float 0xFFF0000000000000, !dbg !90
  %2680 = select i1 %2648, float %2616, float 0xFFF0000000000000, !dbg !90
  %2681 = select i1 %2649, float %2617, float 0xFFF0000000000000, !dbg !90
  %2682 = select i1 %2650, float %2618, float 0xFFF0000000000000, !dbg !90
  %2683 = select i1 %2651, float %2619, float 0xFFF0000000000000, !dbg !90
  %2684 = select i1 %2652, float %2620, float 0xFFF0000000000000, !dbg !90
  %2685 = select i1 %2653, float %2621, float 0xFFF0000000000000, !dbg !90
  %2686 = select i1 %2654, float %2622, float 0xFFF0000000000000, !dbg !90
  %2687 = select i1 %2655, float %2623, float 0xFFF0000000000000, !dbg !90
  %2688 = select i1 %2656, float %2624, float 0xFFF0000000000000, !dbg !90
  %2689 = select i1 %2657, float %2625, float 0xFFF0000000000000, !dbg !90
  %2690 = select i1 %2658, float %2626, float 0xFFF0000000000000, !dbg !90
  %2691 = select i1 %2659, float %2627, float 0xFFF0000000000000, !dbg !90
  %2692 = select i1 %2660, float %2628, float 0xFFF0000000000000, !dbg !90
  %2693 = select i1 %2661, float %2629, float 0xFFF0000000000000, !dbg !90
  %2694 = tail call float @llvm.maxnum.f32(float %2662, float %2663), !dbg !91
  %2695 = tail call float @llvm.maxnum.f32(float %2694, float %2664), !dbg !91
  %2696 = tail call float @llvm.maxnum.f32(float %2695, float %2665), !dbg !91
  %2697 = tail call float @llvm.maxnum.f32(float %2696, float %2666), !dbg !91
  %2698 = tail call float @llvm.maxnum.f32(float %2697, float %2667), !dbg !91
  %2699 = tail call float @llvm.maxnum.f32(float %2698, float %2668), !dbg !91
  %2700 = tail call float @llvm.maxnum.f32(float %2699, float %2669), !dbg !91
  %2701 = tail call float @llvm.maxnum.f32(float %2700, float %2670), !dbg !91
  %2702 = tail call float @llvm.maxnum.f32(float %2701, float %2671), !dbg !91
  %2703 = tail call float @llvm.maxnum.f32(float %2702, float %2672), !dbg !91
  %2704 = tail call float @llvm.maxnum.f32(float %2703, float %2673), !dbg !91
  %2705 = tail call float @llvm.maxnum.f32(float %2704, float %2674), !dbg !91
  %2706 = tail call float @llvm.maxnum.f32(float %2705, float %2675), !dbg !91
  %2707 = tail call float @llvm.maxnum.f32(float %2706, float %2676), !dbg !91
  %2708 = tail call float @llvm.maxnum.f32(float %2707, float %2677), !dbg !91
  %2709 = tail call float @llvm.maxnum.f32(float %2708, float %2678), !dbg !91
  %2710 = tail call float @llvm.maxnum.f32(float %2709, float %2679), !dbg !91
  %2711 = tail call float @llvm.maxnum.f32(float %2710, float %2680), !dbg !91
  %2712 = tail call float @llvm.maxnum.f32(float %2711, float %2681), !dbg !91
  %2713 = tail call float @llvm.maxnum.f32(float %2712, float %2682), !dbg !91
  %2714 = tail call float @llvm.maxnum.f32(float %2713, float %2683), !dbg !91
  %2715 = tail call float @llvm.maxnum.f32(float %2714, float %2684), !dbg !91
  %2716 = tail call float @llvm.maxnum.f32(float %2715, float %2685), !dbg !91
  %2717 = tail call float @llvm.maxnum.f32(float %2716, float %2686), !dbg !91
  %2718 = tail call float @llvm.maxnum.f32(float %2717, float %2687), !dbg !91
  %2719 = tail call float @llvm.maxnum.f32(float %2718, float %2688), !dbg !91
  %2720 = tail call float @llvm.maxnum.f32(float %2719, float %2689), !dbg !91
  %2721 = tail call float @llvm.maxnum.f32(float %2720, float %2690), !dbg !91
  %2722 = tail call float @llvm.maxnum.f32(float %2721, float %2691), !dbg !91
  %2723 = tail call float @llvm.maxnum.f32(float %2722, float %2692), !dbg !91
  %2724 = tail call float @llvm.maxnum.f32(float %2723, float %2693), !dbg !91
  %2725 = bitcast float %2724 to i32, !dbg !95
  %2726 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %2725, i32 %2725, i1 false, i1 false), !dbg !95
  %2727 = extractvalue { i32, i32 } %2726, 0, !dbg !95
  %2728 = extractvalue { i32, i32 } %2726, 1, !dbg !95
  %2729 = bitcast i32 %2727 to float, !dbg !95
  %2730 = bitcast i32 %2728 to float, !dbg !95
  %2731 = tail call float @llvm.maxnum.f32(float %2729, float %2730), !dbg !91
  %2732 = tail call float @llvm.maxnum.f32(float %2386, float %2731), !dbg !96
  %2733 = fcmp one float %2732, 0xFFF0000000000000, !dbg !97
  %2734 = select i1 %2733, float %2732, float 0.000000e+00, !dbg !98
  %2735 = fsub float %2662, %2734, !dbg !99
  %2736 = fsub float %2663, %2734, !dbg !99
  %2737 = fsub float %2664, %2734, !dbg !99
  %2738 = fsub float %2665, %2734, !dbg !99
  %2739 = fsub float %2666, %2734, !dbg !99
  %2740 = fsub float %2667, %2734, !dbg !99
  %2741 = fsub float %2668, %2734, !dbg !99
  %2742 = fsub float %2669, %2734, !dbg !99
  %2743 = fsub float %2670, %2734, !dbg !99
  %2744 = fsub float %2671, %2734, !dbg !99
  %2745 = fsub float %2672, %2734, !dbg !99
  %2746 = fsub float %2673, %2734, !dbg !99
  %2747 = fsub float %2674, %2734, !dbg !99
  %2748 = fsub float %2675, %2734, !dbg !99
  %2749 = fsub float %2676, %2734, !dbg !99
  %2750 = fsub float %2677, %2734, !dbg !99
  %2751 = fsub float %2678, %2734, !dbg !99
  %2752 = fsub float %2679, %2734, !dbg !99
  %2753 = fsub float %2680, %2734, !dbg !99
  %2754 = fsub float %2681, %2734, !dbg !99
  %2755 = fsub float %2682, %2734, !dbg !99
  %2756 = fsub float %2683, %2734, !dbg !99
  %2757 = fsub float %2684, %2734, !dbg !99
  %2758 = fsub float %2685, %2734, !dbg !99
  %2759 = fsub float %2686, %2734, !dbg !99
  %2760 = fsub float %2687, %2734, !dbg !99
  %2761 = fsub float %2688, %2734, !dbg !99
  %2762 = fsub float %2689, %2734, !dbg !99
  %2763 = fsub float %2690, %2734, !dbg !99
  %2764 = fsub float %2691, %2734, !dbg !99
  %2765 = fsub float %2692, %2734, !dbg !99
  %2766 = fsub float %2693, %2734, !dbg !99
  %2767 = fmul float %2735, 0x3FF7154760000000, !dbg !100
  %2768 = tail call float @llvm.exp2.f32(float %2767), !dbg !100
  %2769 = fmul float %2736, 0x3FF7154760000000, !dbg !100
  %2770 = tail call float @llvm.exp2.f32(float %2769), !dbg !100
  %2771 = fmul float %2737, 0x3FF7154760000000, !dbg !100
  %2772 = tail call float @llvm.exp2.f32(float %2771), !dbg !100
  %2773 = fmul float %2738, 0x3FF7154760000000, !dbg !100
  %2774 = tail call float @llvm.exp2.f32(float %2773), !dbg !100
  %2775 = fmul float %2739, 0x3FF7154760000000, !dbg !100
  %2776 = tail call float @llvm.exp2.f32(float %2775), !dbg !100
  %2777 = fmul float %2740, 0x3FF7154760000000, !dbg !100
  %2778 = tail call float @llvm.exp2.f32(float %2777), !dbg !100
  %2779 = fmul float %2741, 0x3FF7154760000000, !dbg !100
  %2780 = tail call float @llvm.exp2.f32(float %2779), !dbg !100
  %2781 = fmul float %2742, 0x3FF7154760000000, !dbg !100
  %2782 = tail call float @llvm.exp2.f32(float %2781), !dbg !100
  %2783 = fmul float %2743, 0x3FF7154760000000, !dbg !100
  %2784 = tail call float @llvm.exp2.f32(float %2783), !dbg !100
  %2785 = fmul float %2744, 0x3FF7154760000000, !dbg !100
  %2786 = tail call float @llvm.exp2.f32(float %2785), !dbg !100
  %2787 = fmul float %2745, 0x3FF7154760000000, !dbg !100
  %2788 = tail call float @llvm.exp2.f32(float %2787), !dbg !100
  %2789 = fmul float %2746, 0x3FF7154760000000, !dbg !100
  %2790 = tail call float @llvm.exp2.f32(float %2789), !dbg !100
  %2791 = fmul float %2747, 0x3FF7154760000000, !dbg !100
  %2792 = tail call float @llvm.exp2.f32(float %2791), !dbg !100
  %2793 = fmul float %2748, 0x3FF7154760000000, !dbg !100
  %2794 = tail call float @llvm.exp2.f32(float %2793), !dbg !100
  %2795 = fmul float %2749, 0x3FF7154760000000, !dbg !100
  %2796 = tail call float @llvm.exp2.f32(float %2795), !dbg !100
  %2797 = fmul float %2750, 0x3FF7154760000000, !dbg !100
  %2798 = tail call float @llvm.exp2.f32(float %2797), !dbg !100
  %2799 = fmul float %2751, 0x3FF7154760000000, !dbg !100
  %2800 = tail call float @llvm.exp2.f32(float %2799), !dbg !100
  %2801 = fmul float %2752, 0x3FF7154760000000, !dbg !100
  %2802 = tail call float @llvm.exp2.f32(float %2801), !dbg !100
  %2803 = fmul float %2753, 0x3FF7154760000000, !dbg !100
  %2804 = tail call float @llvm.exp2.f32(float %2803), !dbg !100
  %2805 = fmul float %2754, 0x3FF7154760000000, !dbg !100
  %2806 = tail call float @llvm.exp2.f32(float %2805), !dbg !100
  %2807 = fmul float %2755, 0x3FF7154760000000, !dbg !100
  %2808 = tail call float @llvm.exp2.f32(float %2807), !dbg !100
  %2809 = fmul float %2756, 0x3FF7154760000000, !dbg !100
  %2810 = tail call float @llvm.exp2.f32(float %2809), !dbg !100
  %2811 = fmul float %2757, 0x3FF7154760000000, !dbg !100
  %2812 = tail call float @llvm.exp2.f32(float %2811), !dbg !100
  %2813 = fmul float %2758, 0x3FF7154760000000, !dbg !100
  %2814 = tail call float @llvm.exp2.f32(float %2813), !dbg !100
  %2815 = fmul float %2759, 0x3FF7154760000000, !dbg !100
  %2816 = tail call float @llvm.exp2.f32(float %2815), !dbg !100
  %2817 = fmul float %2760, 0x3FF7154760000000, !dbg !100
  %2818 = tail call float @llvm.exp2.f32(float %2817), !dbg !100
  %2819 = fmul float %2761, 0x3FF7154760000000, !dbg !100
  %2820 = tail call float @llvm.exp2.f32(float %2819), !dbg !100
  %2821 = fmul float %2762, 0x3FF7154760000000, !dbg !100
  %2822 = tail call float @llvm.exp2.f32(float %2821), !dbg !100
  %2823 = fmul float %2763, 0x3FF7154760000000, !dbg !100
  %2824 = tail call float @llvm.exp2.f32(float %2823), !dbg !100
  %2825 = fmul float %2764, 0x3FF7154760000000, !dbg !100
  %2826 = tail call float @llvm.exp2.f32(float %2825), !dbg !100
  %2827 = fmul float %2765, 0x3FF7154760000000, !dbg !100
  %2828 = tail call float @llvm.exp2.f32(float %2827), !dbg !100
  %2829 = fmul float %2766, 0x3FF7154760000000, !dbg !100
  %2830 = tail call float @llvm.exp2.f32(float %2829), !dbg !100
  %2831 = fadd float %2768, %2770, !dbg !101
  %2832 = fadd float %2772, %2831, !dbg !101
  %2833 = fadd float %2774, %2832, !dbg !101
  %2834 = fadd float %2776, %2833, !dbg !101
  %2835 = fadd float %2778, %2834, !dbg !101
  %2836 = fadd float %2780, %2835, !dbg !101
  %2837 = fadd float %2782, %2836, !dbg !101
  %2838 = fadd float %2784, %2837, !dbg !101
  %2839 = fadd float %2786, %2838, !dbg !101
  %2840 = fadd float %2788, %2839, !dbg !101
  %2841 = fadd float %2790, %2840, !dbg !101
  %2842 = fadd float %2792, %2841, !dbg !101
  %2843 = fadd float %2794, %2842, !dbg !101
  %2844 = fadd float %2796, %2843, !dbg !101
  %2845 = fadd float %2798, %2844, !dbg !101
  %2846 = fadd float %2800, %2845, !dbg !101
  %2847 = fadd float %2802, %2846, !dbg !101
  %2848 = fadd float %2804, %2847, !dbg !101
  %2849 = fadd float %2806, %2848, !dbg !101
  %2850 = fadd float %2808, %2849, !dbg !101
  %2851 = fadd float %2810, %2850, !dbg !101
  %2852 = fadd float %2812, %2851, !dbg !101
  %2853 = fadd float %2814, %2852, !dbg !101
  %2854 = fadd float %2816, %2853, !dbg !101
  %2855 = fadd float %2818, %2854, !dbg !101
  %2856 = fadd float %2820, %2855, !dbg !101
  %2857 = fadd float %2822, %2856, !dbg !101
  %2858 = fadd float %2824, %2857, !dbg !101
  %2859 = fadd float %2826, %2858, !dbg !101
  %2860 = fadd float %2828, %2859, !dbg !101
  %2861 = fadd float %2830, %2860, !dbg !101
  %2862 = bitcast float %2861 to i32, !dbg !103
  %2863 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %2862, i32 %2862, i1 false, i1 false), !dbg !103
  %2864 = fsub float %2386, %2734, !dbg !104
  %2865 = fmul float %2864, 0x3FF7154760000000, !dbg !105
  %2866 = tail call float @llvm.exp2.f32(float %2865), !dbg !105
  %2867 = insertelement <1 x float> poison, float %2866, i64 0, !dbg !106
  store <1 x float> %2867, ptr addrspace(3) %1583, align 4, !dbg !106
  fence syncscope("workgroup") release, !dbg !106
  tail call void @llvm.amdgcn.s.barrier(), !dbg !106
  fence syncscope("workgroup") acquire, !dbg !106
  %2868 = load <1 x float>, ptr addrspace(3) %1586, align 4, !dbg !106
  %2869 = insertelement <2 x float> poison, float %2768, i64 0, !dbg !109
  %2870 = insertelement <2 x float> %2869, float %2770, i64 1, !dbg !109
  %2871 = fptrunc <2 x float> %2870 to <2 x bfloat>, !dbg !109
  %2872 = insertelement <2 x float> poison, float %2772, i64 0, !dbg !109
  %2873 = insertelement <2 x float> %2872, float %2774, i64 1, !dbg !109
  %2874 = fptrunc <2 x float> %2873 to <2 x bfloat>, !dbg !109
  %2875 = insertelement <2 x float> poison, float %2776, i64 0, !dbg !109
  %2876 = insertelement <2 x float> %2875, float %2778, i64 1, !dbg !109
  %2877 = fptrunc <2 x float> %2876 to <2 x bfloat>, !dbg !109
  %2878 = insertelement <2 x float> poison, float %2780, i64 0, !dbg !109
  %2879 = insertelement <2 x float> %2878, float %2782, i64 1, !dbg !109
  %2880 = fptrunc <2 x float> %2879 to <2 x bfloat>, !dbg !109
  %2881 = insertelement <2 x float> poison, float %2784, i64 0, !dbg !109
  %2882 = insertelement <2 x float> %2881, float %2786, i64 1, !dbg !109
  %2883 = fptrunc <2 x float> %2882 to <2 x bfloat>, !dbg !109
  %2884 = insertelement <2 x float> poison, float %2788, i64 0, !dbg !109
  %2885 = insertelement <2 x float> %2884, float %2790, i64 1, !dbg !109
  %2886 = fptrunc <2 x float> %2885 to <2 x bfloat>, !dbg !109
  %2887 = insertelement <2 x float> poison, float %2792, i64 0, !dbg !109
  %2888 = insertelement <2 x float> %2887, float %2794, i64 1, !dbg !109
  %2889 = fptrunc <2 x float> %2888 to <2 x bfloat>, !dbg !109
  %2890 = insertelement <2 x float> poison, float %2796, i64 0, !dbg !109
  %2891 = insertelement <2 x float> %2890, float %2798, i64 1, !dbg !109
  %2892 = fptrunc <2 x float> %2891 to <2 x bfloat>, !dbg !109
  %2893 = insertelement <2 x float> poison, float %2800, i64 0, !dbg !109
  %2894 = insertelement <2 x float> %2893, float %2802, i64 1, !dbg !109
  %2895 = fptrunc <2 x float> %2894 to <2 x bfloat>, !dbg !109
  %2896 = insertelement <2 x float> poison, float %2804, i64 0, !dbg !109
  %2897 = insertelement <2 x float> %2896, float %2806, i64 1, !dbg !109
  %2898 = fptrunc <2 x float> %2897 to <2 x bfloat>, !dbg !109
  %2899 = insertelement <2 x float> poison, float %2808, i64 0, !dbg !109
  %2900 = insertelement <2 x float> %2899, float %2810, i64 1, !dbg !109
  %2901 = fptrunc <2 x float> %2900 to <2 x bfloat>, !dbg !109
  %2902 = insertelement <2 x float> poison, float %2812, i64 0, !dbg !109
  %2903 = insertelement <2 x float> %2902, float %2814, i64 1, !dbg !109
  %2904 = fptrunc <2 x float> %2903 to <2 x bfloat>, !dbg !109
  %2905 = insertelement <2 x float> poison, float %2816, i64 0, !dbg !109
  %2906 = insertelement <2 x float> %2905, float %2818, i64 1, !dbg !109
  %2907 = fptrunc <2 x float> %2906 to <2 x bfloat>, !dbg !109
  %2908 = insertelement <2 x float> poison, float %2820, i64 0, !dbg !109
  %2909 = insertelement <2 x float> %2908, float %2822, i64 1, !dbg !109
  %2910 = fptrunc <2 x float> %2909 to <2 x bfloat>, !dbg !109
  %2911 = insertelement <2 x float> poison, float %2824, i64 0, !dbg !109
  %2912 = insertelement <2 x float> %2911, float %2826, i64 1, !dbg !109
  %2913 = fptrunc <2 x float> %2912 to <2 x bfloat>, !dbg !109
  %2914 = insertelement <2 x float> poison, float %2828, i64 0, !dbg !109
  %2915 = insertelement <2 x float> %2914, float %2830, i64 1, !dbg !109
  %2916 = fptrunc <2 x float> %2915 to <2 x bfloat>, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %2917 = shufflevector <2 x bfloat> %2871, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2917, ptr addrspace(3) %1639, align 2, !dbg !109
  %2918 = shufflevector <2 x bfloat> %2883, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2918, ptr addrspace(3) %1641, align 2, !dbg !109
  %2919 = shufflevector <2 x bfloat> %2895, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2919, ptr addrspace(3) %1643, align 2, !dbg !109
  %2920 = shufflevector <2 x bfloat> %2907, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2920, ptr addrspace(3) %1645, align 2, !dbg !109
  %2921 = shufflevector <2 x bfloat> %2871, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2921, ptr addrspace(3) %1648, align 2, !dbg !109
  %2922 = shufflevector <2 x bfloat> %2883, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2922, ptr addrspace(3) %1650, align 2, !dbg !109
  %2923 = shufflevector <2 x bfloat> %2895, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2923, ptr addrspace(3) %1652, align 2, !dbg !109
  %2924 = shufflevector <2 x bfloat> %2907, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2924, ptr addrspace(3) %1654, align 2, !dbg !109
  %2925 = shufflevector <2 x bfloat> %2874, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2925, ptr addrspace(3) %1657, align 2, !dbg !109
  %2926 = shufflevector <2 x bfloat> %2886, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2926, ptr addrspace(3) %1659, align 2, !dbg !109
  %2927 = shufflevector <2 x bfloat> %2898, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2927, ptr addrspace(3) %1661, align 2, !dbg !109
  %2928 = shufflevector <2 x bfloat> %2910, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2928, ptr addrspace(3) %1663, align 2, !dbg !109
  %2929 = shufflevector <2 x bfloat> %2874, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2929, ptr addrspace(3) %1666, align 2, !dbg !109
  %2930 = shufflevector <2 x bfloat> %2886, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2930, ptr addrspace(3) %1668, align 2, !dbg !109
  %2931 = shufflevector <2 x bfloat> %2898, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2931, ptr addrspace(3) %1670, align 2, !dbg !109
  %2932 = shufflevector <2 x bfloat> %2910, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2932, ptr addrspace(3) %1672, align 2, !dbg !109
  %2933 = shufflevector <2 x bfloat> %2877, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2933, ptr addrspace(3) %1675, align 2, !dbg !109
  %2934 = shufflevector <2 x bfloat> %2889, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2934, ptr addrspace(3) %1677, align 2, !dbg !109
  %2935 = shufflevector <2 x bfloat> %2901, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2935, ptr addrspace(3) %1679, align 2, !dbg !109
  %2936 = shufflevector <2 x bfloat> %2913, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2936, ptr addrspace(3) %1681, align 2, !dbg !109
  %2937 = shufflevector <2 x bfloat> %2877, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2937, ptr addrspace(3) %1684, align 2, !dbg !109
  %2938 = shufflevector <2 x bfloat> %2889, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2938, ptr addrspace(3) %1686, align 2, !dbg !109
  %2939 = shufflevector <2 x bfloat> %2901, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2939, ptr addrspace(3) %1688, align 2, !dbg !109
  %2940 = shufflevector <2 x bfloat> %2913, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2940, ptr addrspace(3) %1690, align 2, !dbg !109
  %2941 = shufflevector <2 x bfloat> %2880, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2941, ptr addrspace(3) %1693, align 2, !dbg !109
  %2942 = shufflevector <2 x bfloat> %2892, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2942, ptr addrspace(3) %1695, align 2, !dbg !109
  %2943 = shufflevector <2 x bfloat> %2904, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2943, ptr addrspace(3) %1697, align 2, !dbg !109
  %2944 = shufflevector <2 x bfloat> %2916, <2 x bfloat> poison, <1 x i32> zeroinitializer, !dbg !109
  store <1 x bfloat> %2944, ptr addrspace(3) %1699, align 2, !dbg !109
  %2945 = shufflevector <2 x bfloat> %2880, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2945, ptr addrspace(3) %1702, align 2, !dbg !109
  %2946 = shufflevector <2 x bfloat> %2892, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2946, ptr addrspace(3) %1704, align 2, !dbg !109
  %2947 = shufflevector <2 x bfloat> %2904, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2947, ptr addrspace(3) %1706, align 2, !dbg !109
  %2948 = shufflevector <2 x bfloat> %2916, <2 x bfloat> poison, <1 x i32> <i32 1>, !dbg !109
  store <1 x bfloat> %2948, ptr addrspace(3) %1708, align 2, !dbg !109
  fence syncscope("workgroup") release, !dbg !109
  tail call void @llvm.amdgcn.s.barrier(), !dbg !109
  fence syncscope("workgroup") acquire, !dbg !109
  %2949 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1721), !dbg !109
  %2950 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1722), !dbg !109
  %2951 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1723), !dbg !109
  %2952 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1724), !dbg !109
  %2953 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1725), !dbg !109
  %2954 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1726), !dbg !109
  %2955 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %1727), !dbg !109
  %2956 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %1728), !dbg !109
  br i1 %299, label %2957, label %2994, !dbg !110

2957:                                             ; preds = %2533
  %2958 = fmul float %2385, %2866, !dbg !107
  %2959 = extractvalue { i32, i32 } %2863, 0, !dbg !103
  %2960 = bitcast i32 %2959 to float, !dbg !103
  %2961 = extractvalue { i32, i32 } %2863, 1, !dbg !103
  %2962 = bitcast i32 %2961 to float, !dbg !103
  %2963 = fadd float %2960, %2962, !dbg !101
  %2964 = fadd float %2963, %2958, !dbg !108
  %2965 = shufflevector <4 x bfloat> %2949, <4 x bfloat> %2950, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2966 = shufflevector <4 x bfloat> %2951, <4 x bfloat> %2952, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2967 = shufflevector <4 x bfloat> %2953, <4 x bfloat> %2954, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2968 = shufflevector <4 x bfloat> %2955, <4 x bfloat> %2956, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2969 = shufflevector <4 x bfloat> %2403, <4 x bfloat> %2404, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2970 = shufflevector <4 x bfloat> %2405, <4 x bfloat> %2406, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2971 = shufflevector <4 x bfloat> %2407, <4 x bfloat> %2408, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2972 = shufflevector <4 x bfloat> %2409, <4 x bfloat> %2410, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2973 = shufflevector <2 x float> %2394, <2 x float> %2393, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2974 = shufflevector <2 x float> %2392, <2 x float> %2391, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2975 = shufflevector <2 x float> %2390, <2 x float> %2389, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2976 = shufflevector <2 x float> %2388, <2 x float> %2387, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !110
  %2977 = shufflevector <4 x float> %2973, <4 x float> %2974, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2978 = shufflevector <4 x float> %2975, <4 x float> %2976, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !110
  %2979 = shufflevector <8 x float> %2977, <8 x float> %2978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !110
  %2980 = shufflevector <1 x float> %2868, <1 x float> poison, <16 x i32> zeroinitializer, !dbg !110
  %2981 = fmul <16 x float> %2979, %2980, !dbg !110
  %2982 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2969, <8 x bfloat> %2965, <16 x float> %2981, i32 0, i32 0, i32 0), !dbg !110
  %2983 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2970, <8 x bfloat> %2966, <16 x float> %2982, i32 0, i32 0, i32 0), !dbg !110
  %2984 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2971, <8 x bfloat> %2967, <16 x float> %2983, i32 0, i32 0, i32 0), !dbg !110
  %2985 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %2972, <8 x bfloat> %2968, <16 x float> %2984, i32 0, i32 0, i32 0), !dbg !110
  %2986 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %2987 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %2988 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %2989 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %2990 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %2991 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %2992 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %2993 = shufflevector <16 x float> %2985, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  br label %2994, !dbg !110

2994:                                             ; preds = %2957, %2533
  %2995 = phi float [ %2964, %2957 ], [ %2385, %2533 ]
  %2996 = phi <2 x float> [ %2986, %2957 ], [ %2387, %2533 ]
  %2997 = phi <2 x float> [ %2987, %2957 ], [ %2388, %2533 ]
  %2998 = phi <2 x float> [ %2988, %2957 ], [ %2389, %2533 ]
  %2999 = phi <2 x float> [ %2989, %2957 ], [ %2390, %2533 ]
  %3000 = phi <2 x float> [ %2990, %2957 ], [ %2391, %2533 ]
  %3001 = phi <2 x float> [ %2991, %2957 ], [ %2392, %2533 ]
  %3002 = phi <2 x float> [ %2992, %2957 ], [ %2393, %2533 ]
  %3003 = phi <2 x float> [ %2993, %2957 ], [ %2394, %2533 ]
  %3004 = fdiv float 1.000000e+00, %2995, !dbg !111
  %3005 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1582, !dbg !112
  %3006 = insertelement <1 x float> poison, float %3004, i64 0, !dbg !112
  store <1 x float> %3006, ptr addrspace(3) %3005, align 4, !dbg !112
  fence syncscope("workgroup") release, !dbg !112
  tail call void @llvm.amdgcn.s.barrier(), !dbg !112
  fence syncscope("workgroup") acquire, !dbg !112
  %3007 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1585, !dbg !112
  %3008 = load <1 x float>, ptr addrspace(3) %3007, align 4, !dbg !112
  %3009 = shufflevector <1 x float> %3008, <1 x float> poison, <2 x i32> zeroinitializer, !dbg !112
  %3010 = fmul <2 x float> %3003, %3009, !dbg !112
  %3011 = fmul <2 x float> %3002, %3009, !dbg !112
  %3012 = fmul <2 x float> %3001, %3009, !dbg !112
  %3013 = fmul <2 x float> %3000, %3009, !dbg !112
  %3014 = fmul <2 x float> %2999, %3009, !dbg !112
  %3015 = fmul <2 x float> %2998, %3009, !dbg !112
  %3016 = fmul <2 x float> %2997, %3009, !dbg !112
  %3017 = fmul <2 x float> %2996, %3009, !dbg !112
  %3018 = fptrunc <2 x float> %3010 to <2 x bfloat>, !dbg !113
  %3019 = fptrunc <2 x float> %3011 to <2 x bfloat>, !dbg !113
  %3020 = fptrunc <2 x float> %3012 to <2 x bfloat>, !dbg !113
  %3021 = fptrunc <2 x float> %3013 to <2 x bfloat>, !dbg !113
  %3022 = fptrunc <2 x float> %3014 to <2 x bfloat>, !dbg !113
  %3023 = fptrunc <2 x float> %3015 to <2 x bfloat>, !dbg !113
  %3024 = fptrunc <2 x float> %3016 to <2 x bfloat>, !dbg !113
  %3025 = fptrunc <2 x float> %3017 to <2 x bfloat>, !dbg !113
  %3026 = bitcast <2 x bfloat> %3018 to i32, !dbg !113
  %3027 = bitcast <2 x bfloat> %3019 to i32, !dbg !113
  %3028 = bitcast <2 x bfloat> %3020 to i32, !dbg !113
  %3029 = bitcast <2 x bfloat> %3021 to i32, !dbg !113
  %3030 = bitcast <2 x bfloat> %3022 to i32, !dbg !113
  %3031 = bitcast <2 x bfloat> %3023 to i32, !dbg !113
  %3032 = bitcast <2 x bfloat> %3024 to i32, !dbg !113
  %3033 = bitcast <2 x bfloat> %3025 to i32, !dbg !113
  %3034 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %3026, i32 %3028, i1 false, i1 false), !dbg !113
  %3035 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %3027, i32 %3029, i1 false, i1 false), !dbg !113
  %3036 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %3030, i32 %3032, i1 false, i1 false), !dbg !113
  %3037 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %3031, i32 %3033, i1 false, i1 false), !dbg !113
  br i1 %137, label %3038, label %.critedge, !dbg !113

3038:                                             ; preds = %2994
  %3039 = mul i64 %15, %127, !dbg !114
  %3040 = mul i64 %16, %129, !dbg !114
  %3041 = add i64 %3039, %3040, !dbg !114
  %3042 = trunc i64 %3041 to i32, !dbg !114
  %3043 = add i32 %75, %3042, !dbg !114
  %3044 = sext i32 %3043 to i64, !dbg !113
  %3045 = getelementptr bfloat, ptr addrspace(1) %0, i64 %3044, !dbg !113
  %3046 = extractvalue { i32, i32 } %3037, 1, !dbg !113
  %3047 = bitcast i32 %3046 to <2 x bfloat>, !dbg !113
  %3048 = shufflevector <2 x bfloat> %3047, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %3049 = extractvalue { i32, i32 } %3036, 1, !dbg !113
  %3050 = bitcast i32 %3049 to <2 x bfloat>, !dbg !113
  %3051 = shufflevector <2 x bfloat> %3050, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %3052 = extractvalue { i32, i32 } %3037, 0, !dbg !113
  %3053 = bitcast i32 %3052 to <2 x bfloat>, !dbg !113
  %3054 = extractvalue { i32, i32 } %3036, 0, !dbg !113
  %3055 = bitcast i32 %3054 to <2 x bfloat>, !dbg !113
  %3056 = extractvalue { i32, i32 } %3034, 0, !dbg !113
  %3057 = bitcast i32 %3056 to <2 x bfloat>, !dbg !113
  %3058 = extractvalue { i32, i32 } %3035, 0, !dbg !113
  %3059 = bitcast i32 %3058 to <2 x bfloat>, !dbg !113
  %3060 = shufflevector <2 x bfloat> %3057, <2 x bfloat> %3059, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !113
  %3061 = extractvalue { i32, i32 } %3034, 1, !dbg !113
  %3062 = bitcast i32 %3061 to <2 x bfloat>, !dbg !113
  %3063 = shufflevector <2 x bfloat> %3062, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %3064 = shufflevector <8 x bfloat> %3060, <8 x bfloat> %3063, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !113
  %3065 = extractvalue { i32, i32 } %3035, 1, !dbg !113
  %3066 = bitcast i32 %3065 to <2 x bfloat>, !dbg !113
  %3067 = shufflevector <2 x bfloat> %3066, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %3068 = shufflevector <8 x bfloat> %3064, <8 x bfloat> %3067, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !113
  %3069 = add i32 %74, %3042, !dbg !114
  %3070 = sext i32 %3069 to i64, !dbg !113
  %3071 = getelementptr bfloat, ptr addrspace(1) %0, i64 %3070, !dbg !113
  store <8 x bfloat> %3068, ptr addrspace(1) %3071, align 16, !dbg !113
  %3072 = shufflevector <2 x bfloat> %3055, <2 x bfloat> %3053, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %3073 = shufflevector <8 x bfloat> %3072, <8 x bfloat> %3051, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>
  %3074 = shufflevector <8 x bfloat> %3073, <8 x bfloat> %3048, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  store <8 x bfloat> %3074, ptr addrspace(1) %3045, align 16, !dbg !113
  br label %.critedge, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare i16 @llvm.amdgcn.raw.ptr.buffer.load.i16(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i64 @llvm.amdgcn.ballot.i64(i1) #4

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) readonly captures(none), ptr addrspace(3) writeonly captures(none), i32 immarg, i32, i32, i32 immarg, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.waitcnt(i32 immarg) #6

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) captures(none)) #7

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat>, <8 x bfloat>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare { i32, i32 } @llvm.amdgcn.permlane32.swap(i32, i32, i1 immarg, i1 immarg) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,512" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2,8" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { mustprogress nocallback nofree nounwind willreturn }
attributes #7 = { convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read) }
attributes #8 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "unified_attention_aiter.py", directory: "/root/code/triton-s-load/unified_attn_ubench")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !1, file: !1, line: 316, type: !5, scopeLine: 316, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "kernel_unified_attention_2d", linkageName: "kernel_unified_attention_2d", scope: !1, file: !1, line: 50, type: !5, scopeLine: 50, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!8 = !DILocation(line: 98, column: 32, scope: !7)
!9 = !DILocation(line: 99, column: 39, scope: !7)
!10 = !DILocation(line: 36, column: 17, scope: !11, inlinedAt: !12)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !1, discriminator: 0)
!12 = !DILocation(line: 116, column: 68, scope: !7)
!13 = !DILocation(line: 37, column: 22, scope: !11, inlinedAt: !12)
!14 = !DILocation(line: 37, column: 32, scope: !11, inlinedAt: !12)
!15 = !DILocation(line: 38, column: 44, scope: !11, inlinedAt: !12)
!16 = !DILocation(line: 38, column: 22, scope: !11, inlinedAt: !12)
!17 = !DILocation(line: 39, column: 25, scope: !11, inlinedAt: !12)
!18 = !DILocation(line: 39, column: 35, scope: !11, inlinedAt: !12)
!19 = !DILocation(line: 41, column: 22, scope: !11, inlinedAt: !12)
!20 = !DILocation(line: 41, column: 11, scope: !11, inlinedAt: !12)
!21 = !DILocation(line: 46, column: 18, scope: !11, inlinedAt: !12)
!22 = !DILocation(line: 119, column: 54, scope: !7)
!23 = !DILocation(line: 119, column: 32, scope: !7)
!24 = !DILocation(line: 119, column: 66, scope: !7)
!25 = !DILocation(line: 119, column: 76, scope: !7)
!26 = !DILocation(line: 121, column: 45, scope: !7)
!27 = !DILocation(line: 124, column: 74, scope: !7)
!28 = !DILocation(line: 124, column: 42, scope: !7)
!29 = !DILocation(line: 126, column: 56, scope: !7)
!30 = !DILocation(line: 128, column: 27, scope: !7)
!31 = !DILocation(line: 128, column: 38, scope: !7)
!32 = !DILocation(line: 129, column: 8, scope: !7)
!33 = !DILocation(line: 131, column: 26, scope: !7)
!34 = !DILocation(line: 132, column: 26, scope: !7)
!35 = !DILocation(line: 133, column: 56, scope: !7)
!36 = !DILocation(line: 133, column: 46, scope: !7)
!37 = !DILocation(line: 135, column: 52, scope: !7)
!38 = !DILocation(line: 136, column: 35, scope: !7)
!39 = !DILocation(line: 136, column: 65, scope: !7)
!40 = !DILocation(line: 136, column: 56, scope: !7)
!41 = !DILocation(line: 138, column: 34, scope: !7)
!42 = !DILocation(line: 139, column: 36, scope: !7)
!43 = !DILocation(line: 144, column: 31, scope: !7)
!44 = !DILocation(line: 145, column: 36, scope: !7)
!45 = !DILocation(line: 155, column: 57, scope: !7)
!46 = !DILocation(line: 154, column: 20, scope: !7)
!47 = !DILocation(line: 154, column: 8, scope: !7)
!48 = !{i32 1}
!49 = !DILocation(line: 160, column: 35, scope: !7)
!50 = !DILocation(line: 166, column: 23, scope: !7)
!51 = !DILocation(line: 166, column: 12, scope: !7)
!52 = !DILocation(line: 169, column: 13, scope: !7)
!53 = !DILocation(line: 175, column: 37, scope: !7)
!54 = !DILocation(line: 175, column: 22, scope: !7)
!55 = !DILocation(line: 178, column: 28, scope: !7)
!56 = !DILocation(line: 196, column: 10, scope: !7)
!57 = !DILocation(line: 198, column: 10, scope: !7)
!58 = !DILocation(line: 203, column: 56, scope: !7)
!59 = !DILocation(line: 15, column: 20, scope: !11, inlinedAt: !60)
!60 = !DILocation(line: 208, column: 45, scope: !7)
!61 = !DILocation(line: 15, column: 26, scope: !11, inlinedAt: !60)
!62 = !DILocation(line: 220, column: 56, scope: !7)
!63 = !DILocation(line: 218, column: 37, scope: !7)
!64 = !DILocation(line: 220, column: 37, scope: !7)
!65 = !DILocation(line: 226, column: 28, scope: !7)
!66 = !DILocation(line: 228, column: 21, scope: !7)
!67 = !DILocation(line: 233, column: 28, scope: !7)
!68 = !DILocation(line: 272, column: 55, scope: !7)
!69 = !DILocation(line: 272, column: 76, scope: !7)
!70 = !DILocation(line: 283, column: 36, scope: !7)
!71 = !DILocation(line: 225, column: 33, scope: !7)
!72 = !DILocation(line: 232, column: 33, scope: !7)
!73 = !DILocation(line: 240, column: 28, scope: !7)
!74 = !DILocation(line: 240, column: 12, scope: !7)
!75 = !{!76}
!76 = !{!"amdgpu.AsyncCopies", !77, !"Scope containing all AsyncCopyGlobalToLocal and BufferLoadToLocal ops"}
!77 = !{!"amdgpu.AsyncOps", !"Domain to hold alias scopes to specify aliasing information between AsyncCopyGlobalToLocal, BufferLoadToLocal and LocalLoad ops"}
!78 = !DILocation(line: 256, column: 30, scope: !7)
!79 = !DILocation(line: 256, column: 12, scope: !7)
!80 = !DILocation(line: 220, column: 77, scope: !7)
!81 = !{!82}
!82 = !{!"amdgpu.LocalLoads", !77, !"Scope containing all LocalLoad ops"}
!83 = !DILocation(line: 270, column: 25, scope: !7)
!84 = !DILocation(line: 270, column: 38, scope: !7)
!85 = !DILocation(line: 272, column: 41, scope: !7)
!86 = !DILocation(line: 277, column: 31, scope: !7)
!87 = !DILocation(line: 277, column: 21, scope: !7)
!88 = !DILocation(line: 277, column: 13, scope: !7)
!89 = !DILocation(line: 283, column: 60, scope: !7)
!90 = !DILocation(line: 283, column: 73, scope: !7)
!91 = !DILocation(line: 168, column: 27, scope: !92, inlinedAt: !94)
!92 = distinct !DILexicalBlockFile(scope: !7, file: !93, discriminator: 0)
!93 = !DIFile(filename: "standard.py", directory: "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language")
!94 = !DILocation(line: 310, column: 35, scope: !7)
!95 = !DILocation(line: 189, column: 40, scope: !92, inlinedAt: !94)
!96 = !DILocation(line: 310, column: 28, scope: !7)
!97 = !DILocation(line: 313, column: 29, scope: !7)
!98 = !DILocation(line: 313, column: 49, scope: !7)
!99 = !DILocation(line: 316, column: 23, scope: !7)
!100 = !DILocation(line: 316, column: 19, scope: !7)
!101 = !DILocation(line: 261, column: 15, scope: !92, inlinedAt: !102)
!102 = !DILocation(line: 319, column: 21, scope: !7)
!103 = !DILocation(line: 291, column: 36, scope: !92, inlinedAt: !102)
!104 = !DILocation(line: 322, column: 27, scope: !7)
!105 = !DILocation(line: 322, column: 23, scope: !7)
!106 = !DILocation(line: 325, column: 20, scope: !7)
!107 = !DILocation(line: 328, column: 16, scope: !7)
!108 = !DILocation(line: 328, column: 24, scope: !7)
!109 = !DILocation(line: 332, column: 27, scope: !7)
!110 = !DILocation(line: 332, column: 37, scope: !7)
!111 = !DILocation(line: 335, column: 23, scope: !7)
!112 = !DILocation(line: 336, column: 16, scope: !7)
!113 = !DILocation(line: 349, column: 8, scope: !7)
!114 = !DILocation(line: 348, column: 21, scope: !7)
